package modchu.model;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.File;import java.io.FileInputStream;import java.io.FileReader;import java.io.FileWriter;import java.io.InputStream;import java.lang.reflect.Field;import java.lang.reflect.Method;import java.util.ArrayList;import java.util.Enumeration;import java.util.HashMap;import java.util.LinkedList;import java.util.List;import java.util.Map.Entry;import java.util.Random;import java.util.concurrent.ConcurrentHashMap;import java.util.zip.ZipEntry;import java.util.zip.ZipFile;import java.util.zip.ZipInputStream;import modchu.lib.Modchu_AS;import modchu.lib.Modchu_CastHelper;import modchu.lib.Modchu_Config;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_EntityCapsHelper;import modchu.lib.Modchu_FileManager;import modchu.lib.Modchu_LMMManager;import modchu.lib.Modchu_Main;import modchu.lib.Modchu_ModelBaseMaster;import modchu.lib.Modchu_Reflect;import modchu.lib.Modchu_TextCalculation;import modchu.lib.Modchu_Version;import modchu.model.multimodel.base.MultiModel;import modchu.model.multimodel.base.MultiModelAction;import modchu.model.multimodel.base.MultiModelBaseBiped;import modchu.model.multimodel.base.MultiModelCustom;import modchu.model.multimodel.base.MultiModelMaidBone;import modchu.model.multimodel.base.MultiModelSkirtFloats;public class ModchuModel_CustomModel {	public MultiModelBaseBiped mainModel;	public MultiModelCustom baseModel;	public String cfgMainModelTextureName;	public String cfgMainModelTextureArmorName;	public String cfgMainModelDesignationArmorItemName;	public int mainModelDesignationColor = -1;	public Object texture;	public HashMap<String, ModchuModel_ModelRenderer> partsMap = new HashMap();	public static final byte normal = 0;	public static final byte eyeR = 1;	public static final byte eyeL = 2;	public static final byte ear = 3;	public static final byte tail = 4;	public static final byte breast = 5;	public static final int maxTypeMode = 5;	public static final int maxboxType = 3;	public byte modelType = modelType_PFLM;	public static final byte modelType_PFLM = 0;	public static final byte modelType_LMM = 1;	public static final byte viewTypeMainOnly = 2;	public static final byte viewTypeArmorOnly = 1;	private boolean changeModelInit;	private boolean allRendering = false;	private boolean partsRendering = false;	public ArrayList<Object[]> textureAndModelRendererList = new ArrayList();	private HashMap<ModchuModel_ModelRenderer, Boolean> showModelMemoryMap = new HashMap();	private HashMap<ModchuModel_ModelRenderer, Boolean> customModelShowModelMemoryMap = new HashMap();	private HashMap<Integer, Field> modelRendererFieldsMap = new HashMap();	private File cfgdir;	private static HashMap<String, Object> mainTextureMap = new HashMap();	private static HashMap<String, Object> cfgCopyMap;	private HashMap<String, ArrayList> textureListMap = new HashMap();	private HashMap<String, Object> anglePointVariableMap;	private String cfgName;	private String tempSetAction;	private int showArmorPartsNumber;	private int tempColor;	private boolean guiTextureSelectFlag;	private boolean colorSettingForcingFlag;	private boolean tempSetRotationAnglesFlag;	private Object tempSelectPanel;	private Object tempGuiEntitySelectEntity;	private Object currentScreen;	private float initF;	private float initF1;	private StringBuilder tempStringBuilder;	private String tempPartsName;	private boolean tempCommentFlag;	private boolean tempFlag;	public ModchuModel_CustomModel(MultiModelCustom multiModelCustom, String s, MultiModelBaseBiped multiModelBaseBiped, String s1, float f, float f1, HashMap map) {		baseModel = multiModelCustom;		mainModel = multiModelBaseBiped;		cfgMainModelTextureName = s1;		if (s != null) {			cfgName = s;			initF = f;			initF1 = f1;			init(s, f, f1);			Modchu_Debug.cDebug("ModchuModel_CustomModel	init end.");		} else {			cfgName = null;			partsRendering = false;			modelType = checkModelType(mainModel);		}	}	public void init(String s, float f, float f1) {		boolean cfgReLoad = false;		if (s != null); else {			s = cfgName;			cfgReLoad = true;			if (partsMap != null) {				partsMap.clear();			} else {				partsMap = new HashMap();			}		}		File mcDataDir = Modchu_AS.getFile(Modchu_AS.minecraftMcDataDir);		cfgdir = new File(mcDataDir, "/config/CustomModel/");		String s1 = new StringBuilder().append("CustomModel_").append(s).append(".cfg").toString();		Modchu_Debug.cDebug("ModchuModel_CustomModel	cfg["+s1+"] loadInit");		File file = new File(cfgdir, s1);		if (!file.exists()) {			Modchu_Debug.cDebug("ModchuModel_CustomModel	init !file.exists() fileName="+s1);			partsRendering = false;		} else {			Modchu_Debug.lDebug("ModchuModel_CustomModel	file.exists() ok.");			loadInit(file, cfgReLoad);			newInitSetting();			Modchu_Debug.cDebug("ModchuModel_CustomModel	cfg load");			load(file, cfgReLoad, f, f1);			Modchu_Debug.cDebug("ModchuModel_CustomModel	cfg load end");			partsRendering = true;		}		initCustomBreastFloats();		defaultAddChild();		//syncNameListSetting();		//PFLM_ModelData = Modchu_Reflect.loadClass(Modchu_Main.getClassName("PFLM_ModelData"));		Modchu_Debug.cDebug("ModchuModel_CustomModel	init() end.");	}	protected void initCustomBreastFloats() {		boolean debug = false;		if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	initCustomBreastFloats");		if (partsMap != null				&& !partsMap.isEmpty()) {			byte partsType;			Object model = getModel();			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	initCustomBreastFloats model="+model);			if (model != null					&& model instanceof MultiModelSkirtFloats) {				ConcurrentHashMap<String, ModchuModel_ModelRenderer> map = ((MultiModelSkirtFloats) model).breastFloatsModelRendererMap;				if (map != null						&& !map.isEmpty()); else {					((MultiModelSkirtFloats) model).breastFloatsModelRendererMap = new ConcurrentHashMap();				}				for (Entry<String, ModchuModel_ModelRenderer> en : partsMap.entrySet()) {					ModchuModel_ModelRenderer modelRenderer = en.getValue();					partsType = Modchu_CastHelper.Byte(modelRenderer.getFreeVariable("partsType"));					if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	initCustomBreastFloats partsType="+getPartsTypeString(partsType));					if (partsType == breast) {						String key = en.getKey()+";customParts";						((MultiModelSkirtFloats) model).breastFloatsModelRendererMap.put(key, modelRenderer);						if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	initCustomBreastFloats breastFloatsModelRendererMap put key="+key);					}				}			}		}		if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	initCustomBreastFloats end.");	}	public static void sampleCfgCopy() {		boolean debug = false;		FileInputStream fileIn = null;		ZipInputStream zipIn = null;		ZipInputStream zipIn2 = null;		if (cfgCopyMap != null); else cfgCopyMap = new HashMap();		try {			File mcDataDir = Modchu_AS.getFile(Modchu_AS.minecraftMcDataDir);			File cfgdir = new File(mcDataDir, "/config/CustomModel/");			if (!cfgdir.exists()) cfgdir.mkdir();			String s1 = new StringBuilder().append("CustomModel_1.cfg").toString();			File file = new File(cfgdir, s1);			Modchu_Debug.lDebug("ModchuModel_CustomModel	sampleCfgCopy() file="+file);			int version = file.exists() ? checkCustomModelCfgDataVersion(file) : -1;			if (debug) Modchu_Debug.lDebug("----------------------------------------------------");			File copyDir = null;			ZipFile zipFile = null;			//Modchu_Debug.mDebug("ModchuModel_CustomModel	dir.getAbsolutePath()="+dir.getAbsolutePath());			copyDir = new File(mcDataDir, "/config/");			if (!copyDir.exists()) return;			ArrayList<File> list = Modchu_FileManager.listFiles(Modchu_Main.modsDir.getAbsolutePath(), "*.zip", null, "MultiModelSet", false);			list.addAll(Modchu_FileManager.listFiles(new File(Modchu_Main.modsDir, Modchu_Version.getMinecraftVersionString()).getAbsolutePath(), "*.zip", null, "MultiModelSet", true));			if (ModchuModel_Main.isDev) {				List<File> list1 = Modchu_FileManager.getClassPathFileList("MultiModelSet");				for (File file1 : list1) {					list.add(file1);					//Modchu_Debug.mDebug("ModchuModel_CustomModel	list.add file1="+file1);				}			}			if (list != null					&& !list.isEmpty()) {				String copyFileName = "CustomModel/CustomModel_";				String copyFileName2 = ".cfg";				HashMap<ZipEntry, File> map = new HashMap();				for (File file1 : list) {					if (file1 != null) {						fileIn = new FileInputStream(file1);						//zipIn = new ZipInputStream(fileIn);						zipFile = new ZipFile(file1);						ZipEntry entry = null;						for (Enumeration<? extends ZipEntry> e = zipFile.entries(); e.hasMoreElements();) {							entry = e.nextElement();							String entryName = entry.getName();							if (entryName.startsWith(copyFileName)									&& entryName.lastIndexOf(copyFileName2) > -1									&& !cfgCopyMap.containsKey(entryName)) {								//if (debug) Modchu_Debug.lDebug("ModchuModel_CustomModel	sampleCfgCopy zipEntry="+zipEntry);								if (debug) Modchu_Debug.lDebug("ModchuModel_CustomModel	sampleCfgCopy. entryName="+entryName);								LinkedList<String> list2 = Modchu_FileManager.inputStreamToLinkedList(zipFile.getInputStream(entry));								int version2 = checkCustomModelCfgDataVersion(list2);								if (version < version2) {									if (debug) Modchu_Debug.lDebug("ModchuModel_CustomModel	sampleCfgCopy version="+version+" version2="+version2);									Modchu_FileManager.copyResourceText(zipFile.getInputStream(entry), new File(copyDir, entryName));								} else {									if (version == version2) {										if (debug) Modchu_Debug.lDebug("ModchuModel_CustomModel	sampleCfgCopy version == version2.");										if (file.exists()) {											if (!checkCustomModelCfgDataAutoUpdates(file)) {												Modchu_Debug.lDebug("ModchuModel_CustomModel	sampleCfgCopy CustomModel_1.cfg file.exists() autoUpdates false.return");												continue;											}											Modchu_Debug.lDebug("ModchuModel_CustomModel	sampleCfgCopy CustomModel_1.cfg file.exists() autoUpdates true.");										} else if (debug) {											Modchu_Debug.lDebug("ModchuModel_CustomModel	sampleCfgCopy CustomModel_1.cfg !file.exists()");										}									} else {										if (debug) Modchu_Debug.lDebug("ModchuModel_CustomModel	sampleCfgCopy version else.");									}								}								map.put(entry, new File(copyDir, entryName));								cfgCopyMap.put(entryName, "dummy");								//break;							} else {								//if (debug) Modchu_Debug.lDebug("ModchuModel_CustomModel	sampleCfgCopy entryName else entryName="+entryName);							}						}						//zipIn2 = new ZipInputStream(new FileInputStream(file1));						//Modchu_FileManager.copyResource(zipIn2, map);					}				}			}		} catch(Exception e) {			e.printStackTrace();		} finally {			if (fileIn != null) {				try {					fileIn.close();				} catch(Exception e) {				}			}			if (zipIn != null) {				try {					zipIn.close();				} catch(Exception e) {				}			}			if (zipIn2 != null) {				try {					zipIn.close();				} catch(Exception e) {				}			}		}		if (debug) Modchu_Debug.lDebug("----------------------------------------------------");	}	private static boolean checkCustomModelCfgDataAutoUpdates(File file) {		LinkedList<String> list = Modchu_FileManager.loadFileToLinkedList(file);		if (list != null				&& !list.isEmpty()); else return false;		for (String s : list) {			s = s != null ? s.replaceAll(" ", "").replaceAll("	", "") : null;			if (s != null					&& s.startsWith("autoUpdates")) {				int i1 = s.indexOf("=");				if (i1 > -1) {					String[] s0 = s.split("=");					if (!Modchu_CastHelper.Boolean(s0[1])) return false;				}			}		}		return true;	}	private static int checkCustomModelCfgDataVersion(File file) {		return checkCustomModelCfgDataVersion(Modchu_FileManager.loadFileToLinkedList(file));	}	private static int checkCustomModelCfgDataVersion(InputStream is) {		return checkCustomModelCfgDataVersion(Modchu_FileManager.inputStreamToLinkedList(is));	}	private static int checkCustomModelCfgDataVersion(LinkedList<String> list) {		if (list != null				&& !list.isEmpty()); else return -1;		for (String s : list) {			s = s != null ? s.replaceAll(" ", "").replaceAll("	", "") : null;			if (s != null					&& s.startsWith("version")) {				int i1 = s.indexOf("=");				if (i1 > -1) {					String[] s0 = s.split("=");					return Modchu_CastHelper.Int(s0[1]);				}			}		}		return -1;	}	public void newInitSetting() {		newMainModelInit();		Modchu_Debug.cDebug("ModchuModel_CustomModel	customInitModel end");	}	public void deleteParts(int i) {		if (i < 0				| i >= partsMap.size()) return;		partsMap.remove(Modchu_Main.getMapKey(partsMap, i));		//partsTextureAndModelRendererList		textureAndModelRendererList.remove(i);	}	public void deleteBox(int i) {		deleteBox(i, 0);	}	public void deleteBox(int i, int i2) {		if (partsMap != null				&& !partsMap.isEmpty()); else return;		ModchuModel_ModelRenderer modelRenderer = partsMap.get(Modchu_Main.getMapKey(partsMap, i));		if (modelRenderer != null); else return;		modelRenderer.removeFreeVariable("partsBoxData"+i2);		if (modelRenderer.cubeList != null				&& !modelRenderer.cubeList.isEmpty()) {			modelRenderer.cubeList.remove(i2);		}	}	public void addBox(int i) {		addBox(i, 0);	}	public void addBox(int i, int i2) {		//Modchu_Debug.mDebug("addBox i="+i+" i2="+i2);		if (partsMap != null				&& !partsMap.isEmpty()); else return;		ModchuModel_ModelRenderer modelRenderer = partsMap.get(Modchu_Main.getMapKey(partsMap, i));		if (modelRenderer != null); else return;		Object o = modelRenderer.getFreeVariable("partsBoxData"+i2);		float[] f0 = o != null				&& o instanceof float[] ? (float[])o : null;		addBox(modelRenderer, f0);	}	private void addBox(ModchuModel_ModelRenderer modelRenderer, float[] f0) {		addBox(modelRenderer, f0, 1.0F);	}	private void addBox(ModchuModel_ModelRenderer modelRenderer, float[] f0, float f) {		if (f0 != null); else return;		float[] f1 = copyBoxDataFloat(f0);		modelRenderer.addBox(f1[0], f1[1], f1[2], (int)f1[3], (int)f1[4], (int)f1[5], f * f1[6] + f1[7]);	}	private void addPlate(ModchuModel_ModelRenderer modelRenderer, float[] f0) {		addPlate(modelRenderer, f0, 1.0F);	}	private void addPlate(ModchuModel_ModelRenderer modelRenderer, float[] f0, float f) {		if (f0 != null); else return;		float[] f1 = copyBoxDataFloat(f0);		modelRenderer.addPlate(f1[0], f1[1], f1[2], (int)f1[3], (int)f1[4], (int)f1[5], f * f1[6] + f1[7]);	}	private void addBall(ModchuModel_ModelRenderer modelRenderer, float[] f0) {		addBall(modelRenderer, f0, 1.0F);	}	private void addBall(ModchuModel_ModelRenderer modelRenderer, float[] f0, float f) {		if (f0 != null); else return;		float[] f1 = copyBoxDataFloat(f0);		modelRenderer.addBall(f1[0], f1[1], f1[2], f1[3], f1[4], f1[5]);	}	private float[] copyBoxDataFloat(float[] f0) {		float[] f1;		if (f0.length < 8) {			f1 = new float[] {					0.0F, 0.0F, 0.0F,					1, 1, 1,					1.0F, 0.0F			};			for (int i = 0; i < f0.length; i++) {				f1[i] = f0[i];			}		} else {			f1 = f0;		}		return f1;	}	public void addParts(String s) {		if (partsMap != null				&& !partsMap.isEmpty()); else return;		Object model = getModel();		ModchuModel_ModelRenderer modelRenderer = new ModchuModel_ModelRenderer(model, s);		partsMap.put(s, modelRenderer);	}	private void partsAddChildSetting(String s, ModchuModel_ModelRenderer modelRenderer) {		if (s != null) {			Object model = getModel();			String addChildName = obfuscationNameCheck(s);			ModchuModel_ModelRenderer tempModelRenderer = getModelRenderer(s);			if (tempModelRenderer != null) {				tempModelRenderer.addChild(modelRenderer);				//Modchu_Reflect.setFieldObject(model.getClass(), addChildName, model, tempModelRenderer);				Modchu_Debug.cDebug("ModchuModel_CustomModel	partsAddChildSetting tempModelRenderer="+tempModelRenderer);				Modchu_Debug.cDebug("ModchuModel_CustomModel	partsAddChildSetting tempModelRenderer.boxName="+tempModelRenderer.boxName);				Modchu_Debug.cDebug("ModchuModel_CustomModel	partsAddChildSetting addChildName="+addChildName);				Modchu_Debug.cDebug("ModchuModel_CustomModel	partsAddChildSetting "+modelRenderer.getBoxName()+" addChild s="+s);			} else {				Modchu_Debug.cDebug("ModchuModel_CustomModel	partsAddChildSetting addChild else null !! "+modelRenderer.getBoxName()+" s="+s);			}		}	}	public ModchuModel_ModelRenderer getModelRenderer(String s) {		Object model = getModel();		ModchuModel_ModelRenderer modelRenderer = model != null ? (ModchuModel_ModelRenderer) Modchu_Reflect.getFieldObject(model.getClass(), s, model, -1) : null;		if (modelRenderer != null); else {			modelRenderer = partsMap.get(s);			if (modelRenderer != null); else {				Modchu_Debug.cDebug("ModchuModel_CustomModel	getModelRenderer else null !! s="+s);			}		}		return modelRenderer;	}	public void render(ModchuModel_IEntityCaps entityCaps, float f, float f1, float f2, float pheadYaw, float pheadPitch, float f5, boolean pIsRender) {		//Modchu_Debug.mDebug("ModchuModel_CustomModel	render");		boolean debug = false;		setRotationAngles(f, f1, f2, pheadYaw, pheadPitch, f5, entityCaps);		Object model = getModel();		if (model != null); else {			Modchu_Debug.mDebug("ModchuModel_CustomModel	render else model == null !!");			return;		}		if (entityCaps != null); else {			Modchu_Debug.mDebug("ModchuModel_CustomModel	render else entityCaps == null !!");			return;		}		//Modchu_Debug.mDebug("ModchuModel_CustomModel	render 0 bipedRightArm.showModel="+((MultiModelAction) model).bipedRightArm.showModel);		//Modchu_Debug.mDebug("ModchuModel_CustomModel	render model="+model);		Object entity = entityCaps.getCapsValue(entityCaps.caps_Entity);		int armorType = getArmorType();		//Modchu_Debug.mlDebug("ModchuModel_CustomModel	render "+baseModel+" armorType="+armorType+" modelSize="+((MultiModelCustom) baseModel).modelSize);		currentScreen = Modchu_AS.get(Modchu_AS.minecraftCurrentScreen);		if (currentScreen == null) {			if (tempSelectPanel != null) tempSelectPanel = null;		}		boolean colorSettingFlag = texture == null;		//Modchu_Debug.lDebug("render currentScreen="+currentScreen);		//Modchu_Debug.lDebug("render ModchuModel_Main.MMM_GuiTextureSelect="+ModchuModel_Main.MMM_GuiTextureSelect);		//Modchu_Debug.lDebug("render ModchuModel_Main.MMM_GuiTextureSelect.isInstance(currentScreen)="+ModchuModel_Main.MMM_GuiTextureSelect.isInstance(currentScreen));		Class MMM_GuiTextureSelect = Modchu_LMMManager.getLMMGuiTextureSelectClass();		//Modchu_Debug.mDebug("ModchuModel_CustomModel	render 1");		if (MMM_GuiTextureSelect != null) {			if (MMM_GuiTextureSelect.isInstance(currentScreen)) {				colorSettingFlag = true;				guiTextureSelectFlag = true;				if (tempSelectPanel != null); else {					tempSelectPanel = Modchu_Reflect.getFieldObject(MMM_GuiTextureSelect, "selectPanel", currentScreen);					tempGuiEntitySelectEntity = null;				}			} else {				if (tempSelectPanel != null) tempSelectPanel = null;				if (guiTextureSelectFlag) {					colorSettingForcingFlag = true;					guiTextureSelectFlag = false;				}			}		}		//Modchu_Debug.mDebug("ModchuModel_CustomModel	render 2");		colorSettingFlag = Modchu_EntityCapsHelper.getCapsValueByte(baseModel, entityCaps, entityCaps.caps_EntityType) == entityCaps.entityType_LMM;		if (!changeModelInit) changeModel(entityCaps);		if (partsRendering) {			//Modchu_Debug.mDebug("ModchuModel_CustomModel	render 1 bipedRightArm.showModel="+((MultiModelAction) model).bipedRightArm.showModel);			allShowModelMemory();			customModelShowModelMemory();			customModelShowModelSetting(entityCaps, (List)null, false);			//Modchu_Debug.mDebug("ModchuModel_CustomModel	render 2 bipedRightArm.showModel="+((MultiModelAction) model).bipedRightArm.showModel);		}		if (texture != null); else colorSettingForcingFlag = true;		//Modchu_Debug.lDebug("ModchuModel_CustomModel	render colorSettingFlag="+colorSettingFlag);		if (colorSettingFlag) changeColor(entityCaps);		Object render = Modchu_AS.get(Modchu_AS.render, model);		if (render != null); else {			render = Modchu_Main.getRender(entity);			if (render != null) Modchu_AS.set(Modchu_AS.setRender, model, render);		}		//Modchu_Debug.mDebug("ModchuModel_CustomModel	render 3");		if (debug) Modchu_Debug.mlDebug("ModchuModel_CustomModel	armorType="+armorType+" mainModeltexture="+texture);		boolean flag1 = armorType < 1;		if (!(model != null				&& model instanceof MultiModelCustom)) {			boolean isRenderFlag = true;			if (!flag1) {				//Modchu_Debug.mDebug("ModchuModel_CustomModel	render !flag1 armorType="+armorType);				//if (!isMaidModel()) return;				//String armorName = Modchu_CastHelper.String(entityCaps.getCapsValue(entityCaps.caps_textureArmorName));				Object itemStack = Modchu_Reflect.loadClass("EntityPlayer").isInstance(entity) ? Modchu_AS.get(Modchu_AS.entityPlayerInventoryPlayerArmorItemInSlot, showArmorPartsNumber) : Modchu_AS.get(Modchu_AS.entityLivingGetCurrentArmor, entity, showArmorPartsNumber);				if (debug) Modchu_Debug.mlDebug("ModchuModel_CustomModel	render itemStack="+itemStack);				if (setArmorModel(entityCaps, model, itemStack, entity, showArmorPartsNumber, f) > -1) {					if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	render setArmorModel cfgMainModeltextureArmorName="+cfgMainModelTextureArmorName);					Object resourceLocations = getTexture(entityCaps, entity, cfgMainModelTextureArmorName, 0, itemStack);					if (debug) Modchu_Debug.mlDebug("ModchuModel_CustomModel	render armorType="+armorType+" resourceLocations="+resourceLocations);					mainModelRender(entityCaps, f, f1, f2, pheadYaw, pheadPitch, f5, pIsRender, entity, render, resourceLocations);					partsRender(entityCaps, f, f1, f2, pheadYaw, pheadPitch, f5, pIsRender, entity, render, itemStack);				} else {					if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	render !setArmorModel");				}			} else {				if (debug) Modchu_Debug.mlDebug("ModchuModel_CustomModel	mainModelRender call.");				mainModelRender(entityCaps, f, f1, f2, pheadYaw, pheadPitch, f5, pIsRender, entity, render, texture);				partsRender(entityCaps, f, f1, f2, pheadYaw, pheadPitch, f5, pIsRender, entity, render);			}		} else {			if (debug) Modchu_Debug.mlDebug("ModchuModel_CustomModel	model == MultiModelCustom");		}		if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	render end. ");	}	private void partsRender(ModchuModel_IEntityCaps entityCaps, float f, float f1, float f2, float pheadYaw, float pheadPitch, float f5, boolean pIsRender, Object entity, Object render) {		partsRender(entityCaps, f, f1, f2, pheadYaw, pheadPitch, f5, pIsRender, entity, render, null);	}	private void partsRender(ModchuModel_IEntityCaps entityCaps, float f, float f1, float f2, float pheadYaw, float pheadPitch, float f5, boolean pIsRender, Object entity, Object render, Object itemStack) {		boolean debug = false;		Object model = getModel();		if (model != null				&& render != null); else {			if (debug) {				if (model != null); else Modchu_Debug.mDebug("ModchuModel_CustomModel	partsRender model == null !!");				if (render != null); else Modchu_Debug.mDebug("ModchuModel_CustomModel	partsRender render == null !!");			}			return;		}		String s1 = null;		int armorType = getArmorType();		if (partsRendering) {			//Modchu_Debug.mDebug("ModchuModel_CustomModel	partsRender textureAndModelRendererList="+textureAndModelRendererList);			if (textureAndModelRendererList != null				&& textureAndModelRendererList.size() > 0) {				allShowModelSetting(false);				String s2 = null;				String s3 = null;				//Modchu_Debug.mDebug("textureAndModelRendererList.size()="+textureAndModelRendererList.size());				for(Object[] o : textureAndModelRendererList) {					boolean flag = false;					if (o != null							&& o.length > 0							&& o[0] != null							&& o[1] != null); else {						if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	partsRender partsRendering continue o="+o);						continue;					}					if (debug) Modchu_Debug.mlDebug("ModchuModel_CustomModel	partsRender o[0]="+o[0]+" itemStack="+itemStack);					Object texture = armorType > 0 ? getTexture(entityCaps, entity, Modchu_CastHelper.String(o[0]), 0, itemStack) : o[0];					if (texture != null) {						//if (debug)						//Modchu_Debug.mDebug1("ModchuModel_CustomModel	partsRender parts texture="+texture);						//Modchu_Debug.mDebug("ModchuModel_CustomModel	partsRender parts texture="+texture+" render="+render);						if (render != null) Modchu_AS.set(Modchu_AS.renderBindTexture, render, texture);					}					List<ModchuModel_ModelRenderer> list = (List) o[1];					if (list != null							&& !list.isEmpty()) {						for(ModchuModel_ModelRenderer modelRenderer : list) {							if (customModelShowModelMemoryMapGet(modelRenderer)) {								if (debug) {									Modchu_Debug.mDebug("ModchuModel_CustomModel	partsRender customModelShowModelSetting call");									//Modchu_Debug.mDebug("ModchuModel_CustomModel	partsRender modelRenderer.boxName="+modelRenderer.boxName);									//Modchu_Debug.mDebug("ModchuModel_CustomModel	partsRender modelRenderer.rotateAngleX="+modelRenderer.rotateAngleX);									//Modchu_Debug.mDebug("ModchuModel_CustomModel	partsRender modelRenderer.rotateAngleY="+modelRenderer.rotateAngleY);									//Modchu_Debug.mDebug("ModchuModel_CustomModel	partsRender modelRenderer.rotateAngleZ="+modelRenderer.rotateAngleZ);								}								customModelShowModelSetting(entityCaps, modelRenderer, true);							} else {								if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	partsRender MemoryMap false modelRenderer="+modelRenderer);							}						}						if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	partsRender model="+model);						if (debug) {							if (model instanceof MultiModelBaseBiped) {								MultiModelBaseBiped multiModelBaseBiped = (MultiModelBaseBiped) model;								for(ModchuModel_ModelRendererBase modelRendererBase : multiModelBaseBiped.bipedHead.childModels) {									Modchu_Debug.mDebug1("ModchuModel_CustomModel	partsRender bipedHead.childModels modelRenderer.getBoxName()="+((ModchuModel_ModelRenderer) modelRendererBase).getBoxName()+" showModel="+modelRendererBase.showModel+" modelRenderer="+modelRendererBase);								}							}						}						if (model instanceof MultiModelCustom) {							try {								((MultiModelCustom) model).superRender(entityCaps, f, f1, f2, pheadYaw, pheadPitch, f5);								//if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	partsRender customModelShowModelSetting MultiModelCustom render call");							} catch (Exception e) {								Modchu_Debug.lDebug1("ModchuModel_CustomModel	partsRender MultiModelCustom Exception !!", 2, e);							}						}						else if (model instanceof MultiModelBaseBiped) {							try {								((MultiModelBaseBiped) model).render(entityCaps, f, f1, f2, pheadYaw, pheadPitch, f5);							} catch (Exception e) {								Modchu_Debug.lDebug1("ModchuModel_CustomModel	partsRender MultiModelBaseBiped Exception !!", 2, e);							}							//if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	partsRender customModelShowModelSetting MultiModelBaseBiped render call");						} else {							Class c = getIEntityCapsClass();							if (c != null) {								try {									Modchu_Reflect.invokeMethod(model.getClass(), "render", new Class[]{ c, float.class, float.class,										float.class, float.class, float.class, float.class, boolean.class }, model, new Object[]{ entityCaps, f, f1, f2, pheadYaw, pheadPitch, f5, getIsRendering(entityCaps, armorType) });									if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	partsRender customModelShowModelSetting Other render call");								} catch (Exception e) {									Modchu_Debug.lDebug1("ModchuModel_CustomModel	partsRender IEntityCaps model Exception !!", 2, e);								}							} else {								if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	partsRender customModelShowModelSetting Other render getIModelCapsClass null !!");							}						}						customModelShowModelSetting(entityCaps, (List)null, false);						if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	partsRender customModelShowModelSetting render after call");					} else {						if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	partsRender parts list="+list);					}				}			}			allShowModelMemoryRead();			customModelShowModelMemoryRead();		}	}	private void mainModelRender(ModchuModel_IEntityCaps entityCaps, float f, float f1, float ticksExisted, float pheadYaw, float pheadPitch, float f5, boolean pIsRender, Object entity, Object render, Object resourceLocations) {		Object model = getModel();		if (model != null				&& render != null); else return;		boolean debug = false;		if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	mainModelRender resourceLocations="+resourceLocations);		if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	mainModelRender model.getClass()="+(model.getClass()));		if (resourceLocations != null) Modchu_AS.set(Modchu_AS.renderBindTexture, render, resourceLocations);		//Modchu_Debug.mDebug("ModchuModel_CustomModel	render render="+render);		//Modchu_Debug.mDebug("ModchuModel_CustomModel	render entityCaps.getClass()="+(entityCaps.getClass()));		if (model instanceof MultiModelBaseBiped) {			((MultiModelBaseBiped) model).render(entityCaps, f, f1, ticksExisted, pheadYaw, pheadPitch, f5, getIsRendering(entityCaps, 0));			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	render getIsRendering="+getIsRendering(entityCaps, 0));		} else {			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	mainModelRender !MultiModelBaseBiped");			Class c = getIEntityCapsClass();			Method method = c != null ? Modchu_Reflect.getMethod(model.getClass(),					"render", new Class[]{ c, float.class, float.class, float.class, float.class, float.class, float.class, boolean.class }) : null;			if (method != null) {				Object entityCaps2 = getEntityCaps(entityCaps);				Modchu_Reflect.invoke(method, model, new Object[]{ entityCaps2, f, f1, ticksExisted, pheadYaw, pheadPitch, f5, getIsRendering(entityCaps, 0) });			} else {				String s = "ModchuModel_CustomModel	mainModelRender !MultiModelBaseBiped method == null error !! model.getClass()="+model.getClass()+" c="+c;				if (debug) Modchu_Debug.mDebug(s);				Modchu_Main.setRuntimeException(s);			}		}	}	private int setArmorModel(ModchuModel_IEntityCaps entityCaps, Object model, Object itemstack, Object entity, int i, float f) {		boolean debug = false;		byte byte0 = -1;		model = getModel(model);		if (model != null				&& model instanceof MultiModelBaseBiped); else {			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	setArmorModel !MultiModelBaseBiped return model="+model);			return byte0;		}		int armorType = getArmorType();		if (armorType > 0); else {			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	setArmorModel armorType return armorType="+armorType);			return byte0;		}		int i2 = armorType == 2 ? 0 : 1;		if (itemstack != null				&& Modchu_AS.getInt(Modchu_AS.itemStackStackSize, itemstack) > 0) {			((MultiModelBaseBiped) model).showAllParts(entityCaps);			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	setArmorModel model="+model);			if (model instanceof MultiModelBaseBiped) {				if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	setArmorModel i="+i+" i2="+i2);				((MultiModelBaseBiped) model).showArmorParts(entityCaps, i, i2);			} else {				Modchu_Reflect.invokeMethod(model.getClass(), "showArmorParts", new Class[]{ int.class, int.class }, model, new Object[]{ i, i2 });			}//-@-b181			byte0 = (byte) (Modchu_AS.getBoolean(Modchu_AS.itemStackIsItemEnchanted, itemstack) ? 15 : 1);//@-@b181		} else {			if (debug) {				Modchu_Debug.mDebug("ModchuModel_CustomModel	setArmorModel else itemstack="+itemstack);				if (itemstack != null) Modchu_Debug.mDebug("ModchuModel_CustomModel	setArmorModel else itemStackStackSize="+Modchu_AS.getInt(Modchu_AS.itemStackStackSize, itemstack));			}		}		return byte0;	}	public void setLivingAnimations(ModchuModel_IEntityCaps entityCaps, float f, float f1, float renderPartialTicks) {		if (baseModel instanceof MultiModelCustom) {			 baseModel.superSetLivingAnimations(entityCaps, f, f1, renderPartialTicks);		}	}	public void setLivingAnimationsLM(ModchuModel_IEntityCaps entityCaps, float f, float f1, float renderPartialTicks) {		//Modchu_Debug.Debug("ModchuModel_CustomModel	setLivingAnimationsLM");		Object model = getModel();		if (model != null) {			if (model instanceof MultiModelCustom) {				try {					((MultiModelCustom) model).superSetLivingAnimationsLM(entityCaps, f, f1, renderPartialTicks);				} catch (Exception e) {					Modchu_Debug.lDebug1("ModchuModel_CustomModel	setLivingAnimationsLM MultiModelCustom Exception !!", 2, e);				}			}			else if (model instanceof MultiModelBaseBiped) {				try {					((MultiModelBaseBiped) model).setLivingAnimations(entityCaps, f, f1, renderPartialTicks);				} catch (Exception e) {					Modchu_Debug.lDebug1("ModchuModel_CustomModel	setLivingAnimationsLM MultiModelBaseBiped Exception !!", 2, e);				}			} else {				Class c = getIEntityCapsClass();				if (c != null) {					Object entityCaps1 = getEntityCaps(entityCaps);					try {						Modchu_Reflect.invokeMethod(model.getClass(), "setLivingAnimations", new Class[]{ c, float.class, float.class, float.class }, model, new Object[]{ entityCaps1, f, f1, renderPartialTicks });					} catch (Exception e) {						Modchu_Debug.lDebug1("ModchuModel_CustomModel	setLivingAnimationsLM IEntityCaps model Exception !!", 2, e);					}				}			}		}		if (partsMap != null				&& !partsMap.isEmpty()) {			Object entity = entityCaps.getCapsValue(entityCaps.caps_Entity);			//Modchu_Debug.mDebug("ModchuModel_CustomModel	setLivingAnimationsLM entity="+entity);			if (entity != null); else return;			for (Entry<String, ModchuModel_ModelRenderer> en : partsMap.entrySet()) {				String key = en.getKey();				ModchuModel_ModelRenderer modelRenderer = en.getValue();				byte partsType = Modchu_CastHelper.Byte(modelRenderer.getFreeVariable("partsType"));				//Modchu_Debug.mDebug("ModchuModel_CustomModel	setLivingAnimationsLM partsType="+getPartsTypeString(partsType));				if (partsType == eyeR						| partsType == eyeL) {					//Modchu_Debug.mDebug("ModchuModel_CustomModel	setLivingAnimationsLM getBoxName()="+modelRenderer.getBoxName());					// 目パチ					int ticksExisted = Modchu_AS.getInt(Modchu_AS.entityTicksExisted, entity);					float entityIdFactor = Modchu_EntityCapsHelper.getCapsValueFloat(baseModel, entityCaps, entityCaps.caps_entityIdFactor);					float f3 = ticksExisted + renderPartialTicks + entityIdFactor;					//Modchu_Debug.mDebug("ticksExisted="+ticksExisted);					//Modchu_Debug.mDebug("renderPartialTicks="+renderPartialTicks);					//Modchu_Debug.mDebug("entityIdFactor="+Modchu_EntityCapsHelper.getCapsValueFloat(entityCaps, baseModel.caps_entityIdFactor));					//Modchu_Debug.dDebug("f3="+f3+" 0 > ? "+(Modchu_AS.getFloat(Modchu_AS.mathHelperSin, f3 * 0.05F) + Modchu_AS.getFloat(Modchu_AS.mathHelperSin, f3 * 0.13F) + Modchu_AS.getFloat(Modchu_AS.mathHelperSin, f3 * 0.7F) + 2.55F));					if( 0 > Modchu_AS.getFloat(Modchu_AS.mathHelperSin, f3 * 0.05F) + Modchu_AS.getFloat(Modchu_AS.mathHelperSin, f3 * 0.13F) + Modchu_AS.getFloat(Modchu_AS.mathHelperSin, f3 * 0.7F) + 2.55F) {						customModelShowModelSetting(entityCaps, modelRenderer, true);						//Modchu_Debug.dDebug("true  showModel="+modelRenderer.showModel, 1);					} else {						customModelShowModelSetting(entityCaps, modelRenderer, false);						//Modchu_Debug.dDebug("false showModel="+modelRenderer.showModel, 1);					}					customModelShowModelMemoryMapPut(modelRenderer, modelRenderer.showModel);					//if (partsType == eyeR) Modchu_Debug.mDebug1("setLivingAnimationsLM eyeR modelRenderer="+modelRenderer);				}				//modelRenderer.showModel = true;				//customModelShowModelMemoryMapPut(modelRenderer, modelRenderer.showModel);			}		}	}	public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IEntityCaps entityCaps) {		if (baseModel instanceof MultiModelCustom) {			baseModel.superSetRotationAngles(f, f1, f2, f3, f4, f5, entityCaps);		}		setRotationAnglesLM(f, f1, f2, f3, f4 ,f5, entityCaps);	}	public void setRotationAnglesLM(float f, float f1, float f2, float pheadYaw, float pheadPitch, float f5, ModchuModel_IEntityCaps entityCaps) {		boolean debug = false;		//Modchu_Debug.Debug("ModchuModel_CustomModel	setRotationAnglesLM");		//Modchu_Debug.mDebug("ModchuModel_CustomModel	setRotationAnglesLM getArmorType()="+getArmorType());		Object model = getModel();		//Modchu_Debug.mDebug1("ModchuModel_CustomModel	setRotationAnglesLM model="+model);		if (model != null) {			if (model instanceof MultiModelCustom) {				((MultiModelCustom) model).superSetRotationAnglesLM(f, f1, f2, pheadYaw, pheadPitch, f5, entityCaps);			}			else if (model instanceof MultiModelBaseBiped) {				((MultiModelBaseBiped) model).setRotationAnglesLM(f, f1, f2, pheadYaw, pheadPitch, f5, entityCaps);			} else {				Object entityCaps1 = getEntityCaps(entityCaps);				Class c = getIEntityCapsClass();				Method method = Modchu_Reflect.getMethod(model.getClass(), "setRotationAngles", new Class[]{					float.class, float.class, float.class, float.class, float.class, float.class, c  }, -1);				if (method != null) Modchu_Reflect.invoke(method, model, new Object[]{ f, f1, f2, pheadYaw, pheadPitch, f5, entityCaps1 });				else {					Modchu_Debug.lDebug1("ModchuModel_CustomModel	setRotationAnglesLM else method == null !! model="+model);				}				//Modchu_Debug.mDebug("ModchuModel_CustomModel	setRotationAnglesLM caps_getIsSneak="+(Modchu_ModelCapsHelper.getCapsValueBoolean(baseModel, entityCaps1, entityCaps.caps_getIsSneak)));				//Modchu_Debug.mDebug1("ModchuModel_CustomModel	setRotationAnglesLM ="+(Modchu_Reflect.getMethod(model.getClass(), "setRotationAngles", new Class[]{ float.class, float.class, float.class, float.class, float.class, float.class, c  })));			}		}		if (partsMap != null				&& !partsMap.isEmpty()) {			partsSetDefaultPause(f, f1, f2, pheadYaw, pheadPitch, f5, entityCaps);			byte partsType;			int i = 0;			for (Entry<String, ModchuModel_ModelRenderer> en : partsMap.entrySet()) {				String key = en.getKey();				ModchuModel_ModelRenderer modelRenderer = en.getValue();				if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	setRotationAnglesLM modelRenderer.getBoxName()="+modelRenderer.getBoxName());				// anglePointMap				HashMap<String, HashMap> anglePointMap = modelRenderer.freeVariableContainsKey("anglePointMap") ? (HashMap<String, HashMap>) modelRenderer.getFreeVariable("anglePointMap") : null;				if (anglePointMap != null) {					setRotationAnglesAnglePointMap(f, f1, f2, pheadYaw, pheadPitch, f5, entityCaps, modelRenderer, anglePointMap);				} else {					if (debug) Modchu_Debug.mDebug1("ModchuModel_CustomModel	setRotationAnglesLM anglePointMap == null modelRenderer.getBoxName()="+modelRenderer.getBoxName());				}				// partsType				partsType = Modchu_CastHelper.Byte(modelRenderer.getFreeVariable("partsType"));				//if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	setRotationAnglesLM partsType="+getPartsTypeString(partsType));				if (Modchu_EntityCapsHelper.getCapsValueBoolean(model, entityCaps, entityCaps.caps_aimedBow)) {					//Modchu_Debug.Debug("ModchuModel_CustomModel	setRotationAnglesLM caps_aimedBow");					if (partsType == eyeR) {						customModelShowModelSetting(entityCaps, modelRenderer, false);						customModelShowModelMemoryMapPut(modelRenderer, modelRenderer.showModel);						//Modchu_Debug.mDebug("caps_aimedBow eyeR modelRenderer.showModel="+modelRenderer.showModel);						if (debug) Modchu_Debug.mDebug1("caps_aimedBow eyeR modelRenderer="+modelRenderer);					}					if (partsType == eyeL) {						customModelShowModelSetting(entityCaps, modelRenderer, true);						customModelShowModelMemoryMapPut(modelRenderer, modelRenderer.showModel);						//if (debug) Modchu_Debug.mDebug("caps_aimedBow eyeL modelRenderer.showModel="+modelRenderer.showModel);					}				} else {					//if (debug) Modchu_Debug.Debug("ModchuModel_CustomModel	setRotationAnglesLM caps_aimedBow == false");				}				if (partsType == ear						| partsType == tail) {					float partsTypeFactor = Modchu_CastHelper.Float(modelRenderer.getFreeVariable("partsTypeFactor"));					float partsTypeCorrection = Modchu_CastHelper.Float(modelRenderer.getFreeVariable("partsTypeCorrection"));					Object entity = entityCaps.getCapsValue(entityCaps.caps_Entity);					int ticksExisted = Modchu_AS.getInt(Modchu_AS.entityTicksExisted, entity);					if (partsType == ear) {						float f6 = (Float) Modchu_Reflect.invokeMethod(model.getClass(), "mh_sin", new Class[]{ float.class }, model, new Object[]{ ticksExisted * 0.05F });						modelRenderer.rotateAngleX = f6 * partsTypeFactor + partsTypeCorrection;					}					if (partsType == tail) {						float f7 = (Float) Modchu_Reflect.invokeMethod(model.getClass(), "mh_cos", new Class[]{ float.class }, model, new Object[]{ ticksExisted * 0.2F });						//if (debug) Modchu_Debug.mDebug1("ModchuModel_CustomModel	setRotationAnglesLM model="+model+" f7="+f7+" ticksExisted="+ticksExisted);						modelRenderer.rotateAngleY = modelRenderer.rotateAngleZ = f7 * partsTypeFactor + partsTypeCorrection;						//if (debug) Modchu_Debug.Debug("ModchuModel_CustomModel	setRotationAnglesLM tail modelRenderer.rotateAngleY="+modelRenderer.rotateAngleY);					}				}			}		}		if (model instanceof MultiModelSkirtFloats) ((MultiModelSkirtFloats) model).breastFloats(f, f1, f2, pheadYaw, pheadPitch, f5, entityCaps);	}	private void setRotationAnglesAnglePointMap(float f, float f1, float f2, float pheadYaw, float pheadPitch, float f5, ModchuModel_IEntityCaps entityCaps, ModchuModel_ModelRenderer modelRenderer, HashMap<String, HashMap> anglePointMap) {		boolean debug = false;		if (debug) Modchu_Debug.mDebug1("ModchuModel_CustomModel	setRotationAnglesAnglePointMap initAnglePointMapCheck ------------------- start.");		if (!Modchu_CastHelper.Boolean(modelRenderer.getFreeVariable("initAnglePointMapCheck"))) {			String[] s0 = new String[]{					"default",					"Riding",					"Sneak",					"Guard",					"AimedBow",					"Wait"			};			LinkedList<String> list = new LinkedList();			for (String s1 : s0) {				if (anglePointMap.containsKey(s1)) {					list.add(s1);					if (debug) Modchu_Debug.mDebug1("ModchuModel_CustomModel	setRotationAnglesAnglePointMap anglePointMap.containsKey("+s1+") ok. list.add modelRenderer.getBoxName()="+modelRenderer.getBoxName());				} else {					if (debug) Modchu_Debug.mDebug1("ModchuModel_CustomModel	setRotationAnglesAnglePointMap anglePointMap.containsKey("+s1+") false. modelRenderer.getBoxName()="+modelRenderer.getBoxName());				}			}			for (int i = 0; i < 30; i++) {				String s2 = "action"+i;				if (anglePointMap.containsKey(s2)) list.add(s2);			}			modelRenderer.setFreeVariable("anglePointStringList", list);			modelRenderer.setFreeVariable("initAnglePointMapCheck", true);			if (anglePointVariableMap != null); else anglePointVariableMap = new HashMap();		}		LinkedList<String> list = (LinkedList<String>) modelRenderer.getFreeVariable("anglePointStringList");		if (list != null				&& !list.isEmpty()) setRotationAnglesAnglePointMap(f, f1, f2, pheadYaw, pheadPitch, f5, entityCaps, modelRenderer, anglePointMap, list);		if (debug) Modchu_Debug.mDebug1("ModchuModel_CustomModel	setRotationAnglesAnglePointMap initAnglePointMapCheck ------------------- end.");	}	private void setRotationAnglesAnglePointMap(float f, float f1, float f2, float pheadYaw, float pheadPitch, float f5, ModchuModel_IEntityCaps entityCaps, ModchuModel_ModelRenderer modelRenderer, HashMap<String, HashMap> anglePointMap, LinkedList<String> list) {		// TODO		boolean debug = false;		if (debug) {			Modchu_Debug.mDebug("ModchuModel_CustomModel	setRotationAnglesAnglePointMap ------------------- start.");			if (f != 0.0F					| f1 != 0.0F) Modchu_Debug.mDebug("ModchuModel_CustomModel	setRotationAnglesAnglePointMap f="+f+" f1="+f1);		}		anglePointVariableMap.put("f", f);		anglePointVariableMap.put("f1", f1);		anglePointVariableMap.put("f2", f2);		anglePointVariableMap.put("f3", pheadYaw);		anglePointVariableMap.put("f4", pheadPitch);		anglePointVariableMap.put("f5", f5);		for (String s : list) {			HashMap<Integer, Object> map1 = anglePointMap.containsKey(s) ? (HashMap<Integer, Object>) anglePointMap.get(s) : null;			if (map1 != null					&& !map1.isEmpty()); else continue;			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	setRotationAnglesAnglePointMap modelRenderer.getBoxName()="+modelRenderer.getBoxName());			for (int i = 0; i < 6; i++) {				if (!map1.containsKey(i)) continue;				Object o = map1.get(i);				if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	setRotationAnglesAnglePointMap o="+o);				if (o instanceof List) {					if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	setRotationAnglesAnglePointMap runCalculation ck s--------------------------------");					Object o1 = Modchu_TextCalculation.instance.runCalculation((List) o, anglePointVariableMap);					if (o1 != null							&& o1 instanceof Float) {						o = (Float) o1;						if (debug								&& (Float) o1 != 0.0F) Modchu_Debug.mDebug("ModchuModel_CustomModel	setRotationAnglesAnglePointMap 2 o="+o);					}					if (debug) {						Modchu_Debug.mDebug("ModchuModel_CustomModel	setRotationAnglesAnglePointMap 3 o="+o);						Modchu_Debug.mDebug("ModchuModel_CustomModel	setRotationAnglesAnglePointMap runCalculation ck e--------------------------------");					}				}				if (o != null						&& o instanceof Float) {					float ff = (Float) o;					if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	setRotationAnglesAnglePointMap 3 ff="+ff+" i="+i);					switch(i) {					case 0:						modelRenderer.rotateAngleX = ff;						break;					case 1:						modelRenderer.rotateAngleY = ff;						if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	setRotationAnglesAnglePointMap 4 modelRenderer.rotateAngleY="+modelRenderer.rotateAngleY);						break;					case 2:						modelRenderer.rotateAngleZ = ff;						if (debug) {							Modchu_Debug.mDebug("ModchuModel_CustomModel	setRotationAnglesAnglePointMap 4 modelRenderer.rotateAngleZ="+modelRenderer.rotateAngleZ);							Object model = getModel();							Modchu_Debug.mDebug("ModchuModel_CustomModel	setRotationAnglesAnglePointMap 4 bipedRightArm.rotateAngleZ="+((MultiModelMaidBone) model).bipedRightArm.rotateAngleZ);						}						break;					case 3:						modelRenderer.rotationPointX = ff;						if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	setRotationAnglesAnglePointMap 4 modelRenderer.rotationPointX="+modelRenderer.rotationPointX);						break;					case 4:						modelRenderer.rotationPointY = ff;						if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	setRotationAnglesAnglePointMap 4 modelRenderer.rotationPointY="+modelRenderer.rotationPointY);						break;					case 5:						modelRenderer.rotationPointZ = ff;						if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	setRotationAnglesAnglePointMap 4 modelRenderer.rotationPointZ="+modelRenderer.rotationPointZ);						break;					}					Object model = getModel();					if (debug) {						//Modchu_Debug.mDebug("ModchuModel_CustomModel	setRotationAnglesAnglePointMap 4 modelRenderer.rotateAngleX="+modelRenderer.rotateAngleX);						//Modchu_Debug.mDebug("ModchuModel_CustomModel	setRotationAnglesAnglePointMap 4 bipedRightArm.rotateAngleX="+((MultiModelMaidBone) model).bipedRightArm.rotateAngleX);						if (((MultiModelMaidBone) model).bipedRightArm.rotateAngleX != 0.0F								&& modelRenderer.rotateAngleX != ((MultiModelMaidBone) model).bipedRightArm.rotateAngleX) {							String s1 = "ModchuModel_CustomModel	setRotationAnglesAnglePointMap modelRenderer.rotateAngleX != Error !!";							Modchu_Debug.mDebug(s1);							//Modchu_Main.setRuntimeException(s1);						}					}					// TODO					Modchu_Debug.mdDebug("x="+((MultiModelMaidBone) model).bipedRightArm.rotateAngleX+" y="+((MultiModelMaidBone) model).bipedRightArm.rotateAngleY+" z="+((MultiModelMaidBone) model).bipedRightArm.rotateAngleZ);					Modchu_Debug.mdDebug("x="+modelRenderer.rotateAngleX+" y="+modelRenderer.rotateAngleY+" z="+modelRenderer.rotateAngleZ, 1);					//modelRenderer.rotateAngleX = Modchu_Debug.debaf4;					//modelRenderer.rotateAngleY = Modchu_Debug.debaf5;					//modelRenderer.rotateAngleZ = Modchu_Debug.debaf6;					//modelRenderer.rotationPointX = Modchu_Debug.debaf1;					//modelRenderer.rotationPointY = Modchu_Debug.debaf2;					//modelRenderer.rotationPointZ = Modchu_Debug.debaf3;					//Modchu_Debug.mdDebug("px="+modelRenderer.rotationPointX+" py="+modelRenderer.rotationPointY+" pz="+modelRenderer.rotationPointZ, 2);				}			}		}		if (debug) Modchu_Debug.mDebug1("ModchuModel_CustomModel	setRotationAnglesAnglePointMap ------------------- end.");	}	public void skirtFloatsInit(float f, float f1) {		Object model = getModel();		if (model instanceof MultiModelSkirtFloats				&& model != null						&& !(model instanceof MultiModelCustom)) ((MultiModelSkirtFloats) model).skirtFloatsInit(f, f1);	}	public void setRotationAnglesfirstPerson(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model != null); else return;		if (model instanceof MultiModelCustom) ((MultiModelCustom) model).superSetRotationAnglesfirstPerson(f, f1, f2, f3, f4, f5, entityCaps);		else if (model instanceof MultiModelBaseBiped) ((MultiModelBaseBiped) model).setRotationAnglesfirstPerson(f, f1, f2, f3, f4, f5, entityCaps);	}	public Object getCapsValue(ModchuModel_IEntityCaps entityCaps, int pIndex, Object[] pArg) {		//Modchu_Debug.mDebug("ModchuModel_CustomModel	getCapsValue");		Object model = isMaidModel() ? getModel() : getModel(baseModel);		//Modchu_Debug.mDebug("ModchuModel_CustomModel	getCapsValue model="+model);		if (model != null); else return null;		Object o = null;		if (model instanceof MultiModelCustom) return ((MultiModelCustom) model).superGetCapsValue(entityCaps, pIndex, pArg);		if (model instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) model).getCapsValue(entityCaps, pIndex, pArg);		Class c = getIEntityCapsClass();		pArg = capsObjectCheck(pArg);		Method method = Modchu_Reflect.getMethod(model.getClass(), "getCapsValue", new Class[]{ c, int.class, Object[].class }, -1);		if (method != null) {			Object entityCaps1 = getEntityCaps(entityCaps);			o = Modchu_Reflect.invoke(method, model, new Object[]{ entityCaps1, pIndex, pArg });		} else {			method = Modchu_Reflect.getMethod(model.getClass(), "getCapsValue", new Class[]{ int.class, Object[].class }, -1);			if (method != null) o = Modchu_Reflect.invoke(method, model, new Object[]{ pIndex, pArg });		}		return o;	}	public boolean setCapsValue(ModchuModel_IEntityCaps entityCaps, int pIndex, Object[] pArg) {		Object model = isMaidModel() ? getModel() : getModel(baseModel);		if (model != null); else return false;		boolean b = false;		if (model instanceof MultiModelCustom) return ((MultiModelCustom) model).superSetCapsValue(entityCaps, pIndex, pArg);		if (model instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) model).setCapsValue(entityCaps, pIndex, pArg);		Class c = getIEntityCapsClass();		pArg = capsObjectCheck(pArg);		Method method = Modchu_Reflect.getMethod(model.getClass(), "setCapsValue", new Class[]{ c, int.class, Object[].class }, -1);		if (method != null) {			Object entityCaps1 = getEntityCaps(entityCaps);			b = Modchu_CastHelper.Boolean(Modchu_Reflect.invoke(method, model, new Object[]{ entityCaps1, pIndex, pArg }));		} else {			method = Modchu_Reflect.getMethod(model.getClass(), "setCapsValue", new Class[]{ int.class, Object[].class }, -1);			if (method != null) b = Modchu_CastHelper.Boolean(Modchu_Reflect.invoke(method, model, new Object[]{ pIndex, pArg }));		}		return b;	}	public void renderItems(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) ((MultiModelCustom) model).superRenderItemsLM(entityCaps);		else if (model instanceof MultiModelBaseBiped) ((MultiModelBaseBiped) model).renderItems(entityCaps);	}	public void defaultPartsSettingBefore(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superDefaultPartsSettingBefore(entityCaps);			return;		}		if (model instanceof MultiModelAction) ((MultiModelAction) model).defaultPartsSettingBefore(entityCaps);	}	public void defaultPartsSettingAfter(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superDefaultPartsSettingAfter(entityCaps);			return;		}		if (model instanceof MultiModelAction) ((MultiModelAction) model).defaultPartsSettingAfter(entityCaps);	}	public void showModelSettingReflects(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superShowModelSettingReflects(entityCaps);			return;		}		if (model instanceof MultiModelAction) ((MultiModelAction) model).showModelSettingReflects(entityCaps);	}	public void actionInitSetting(float f, float f1, float f2, float f3, float f4, float f5, int i, ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superActionInitSetting(f, f1, f2, f3, f4, f5, i, entityCaps);			return;		}		if (model instanceof MultiModelAction) ((MultiModelAction) model).actionInitSetting(f, f1, f2, f3, f4, f5, i, entityCaps);	}	public float getHeight(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		float f = 0.0F;		if (model instanceof MultiModelCustom) return f;		if (model instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) model).getHeight(entityCaps);		Object entityCaps1 = getEntityCaps(entityCaps);		Class c = getIEntityCapsClass();		if (c != null				&& model != null				&& !(model instanceof MultiModelCustom)) f = Modchu_CastHelper.Float(Modchu_Reflect.invokeMethod(model.getClass(), "getHeight", new Class[]{ c }, model, new Object[]{ entityCaps1 }));		return f;	}	public float getWidth(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		float f = 0.0F;		if (model instanceof MultiModelCustom) return f;		if (model instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) model).getWidth(entityCaps);		Object entityCaps1 = getEntityCaps(entityCaps);		Class c = getIEntityCapsClass();		if (c != null				&& model != null				&& !(model instanceof MultiModelCustom)) f = Modchu_CastHelper.Float(Modchu_Reflect.invokeMethod(model.getClass(), "getWidth", new Class[]{ c }, model, new Object[]{ entityCaps1 }));		return f;	}	public float getYOffset(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		float f = -100.0F;		if (model instanceof MultiModelCustom) return f;		if (model instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) model).getYOffset(entityCaps);		return f;	}	public float getRidingHeight(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		float f = 0.0F;		if (model instanceof MultiModelCustom) return f;		if (model instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) model).getRidingHeight(entityCaps);		return Modchu_CastHelper.Float(reflectOther(model, "getRidingHeight", new Class[]{ getIEntityCapsClass() }, new Object[]{ getEntityCaps(entityCaps) }));	}	public float getRidingWidth(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		float f = 0.0F;		if (model instanceof MultiModelCustom) return f;		if (model instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) model).getRidingWidth(entityCaps);		return Modchu_CastHelper.Float(reflectOther(model, "getRidingWidth", new Class[]{ getIEntityCapsClass() }, new Object[]{ getEntityCaps(entityCaps) }));	}	public float getRidingYOffset(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		float f = -100.0F;		if (model instanceof MultiModelCustom) return f;		if (model instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) model).getRidingYOffset(entityCaps);		return Modchu_CastHelper.Float(reflectOther(model, "getRidingYOffset", new Class[]{ getIEntityCapsClass() }, new Object[]{ getEntityCaps(entityCaps) }));	}	public float getMountedYOffset(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		float f = -100.0F;		if (model instanceof MultiModelCustom) return f;		if (model instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) model).getMountedYOffset(entityCaps);		return Modchu_CastHelper.Float(reflectOther(model, "getMountedYOffset", new Class[]{ getIEntityCapsClass() }, new Object[]{ getEntityCaps(entityCaps) }));	}	public double getSittingYOffset(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		double d = -100.0D;		if (model instanceof MultiModelCustom) return d;		if (model instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) model).getSittingYOffset(entityCaps);		return Modchu_CastHelper.Double(reflectOther(model, "getSittingYOffset", new Class[]{ getIEntityCapsClass() }, new Object[]{ getEntityCaps(entityCaps) }));	}	public float ridingViewCorrection(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		float f = -100.0F;		if (model instanceof MultiModelCustom) return f;		if (model instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) model).ridingViewCorrection(entityCaps);		return Modchu_CastHelper.Float(reflectOther(model, "ridingViewCorrection", new Class[]{ getIEntityCapsClass() }, new Object[]{ getEntityCaps(entityCaps) }));	}	public float getModelScale(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		float f = 0.0F;		if (model instanceof MultiModelCustom) return f;		if (model instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) model).getModelScale(entityCaps);		return Modchu_CastHelper.Float(reflectOther(model, "getModelScale", new Class[]{ getIEntityCapsClass() }, new Object[]{ getEntityCaps(entityCaps) }));	}	public void setArmorBipedHeadShowModel(ModchuModel_IEntityCaps entityCaps, boolean b) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superSetArmorBipedHeadShowModel(entityCaps, b);			return;		}		if (model instanceof MultiModelBaseBiped) {			((MultiModelBaseBiped) model).setArmorBipedHeadShowModel(entityCaps, b);			return;		}		reflectOther(model, "setArmorBipedHeadShowModel", new Class[]{ getIEntityCapsClass(), boolean.class }, new Object[]{ getEntityCaps(entityCaps), b });	}	public void setArmorBipedBodyShowModel(ModchuModel_IEntityCaps entityCaps, boolean b) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superSetArmorBipedBodyShowModel(entityCaps, b);			return;		}		if (model instanceof MultiModelBaseBiped) {			((MultiModelBaseBiped) model).setArmorBipedBodyShowModel(entityCaps, b);			return;		}		reflectOther(model, "setArmorBipedBodyShowModel", new Class[]{ getIEntityCapsClass(), boolean.class }, new Object[]{ getEntityCaps(entityCaps), b });	}	public void setArmorBipedRightArmShowModel(ModchuModel_IEntityCaps entityCaps, boolean b) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superSetArmorBipedRightArmShowModel(entityCaps, b);			return;		}		if (model instanceof MultiModelBaseBiped) {			((MultiModelBaseBiped) model).setArmorBipedRightArmShowModel(entityCaps, b);			return;		}		reflectOther(model, "setArmorBipedRightArmShowModel", new Class[]{ getIEntityCapsClass(), boolean.class }, new Object[]{ getEntityCaps(entityCaps), b });	}	public void setArmorBipedLeftArmShowModel(ModchuModel_IEntityCaps entityCaps, boolean b) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superSetArmorBipedLeftArmShowModel(entityCaps, b);			return;		}		if (model instanceof MultiModelBaseBiped) {			((MultiModelBaseBiped) model).setArmorBipedLeftArmShowModel(entityCaps, b);			return;		}		reflectOther(model, "setArmorBipedLeftArmShowModel", new Class[]{ getIEntityCapsClass(), boolean.class }, new Object[]{ getEntityCaps(entityCaps), b });	}	public void setArmorBipedRightLegShowModel(ModchuModel_IEntityCaps entityCaps, boolean b) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superSetArmorBipedRightLegShowModel(entityCaps, b);			return;		}		if (model instanceof MultiModelBaseBiped) {			((MultiModelBaseBiped) model).setArmorBipedRightLegShowModel(entityCaps, b);			return;		}		reflectOther(model, "setArmorBipedRightLegShowModel", new Class[]{ getIEntityCapsClass(), boolean.class }, new Object[]{ getEntityCaps(entityCaps), b });	}	public void setArmorBipedLeftLegShowModel(ModchuModel_IEntityCaps entityCaps, boolean b) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superSetArmorBipedLeftLegShowModel(entityCaps, b);			return;		}		if (model instanceof MultiModelBaseBiped) {			((MultiModelBaseBiped) model).setArmorBipedLeftLegShowModel(entityCaps, b);			return;		}		reflectOther(model, "setArmorBipedLeftLegShowModel", new Class[]{ getIEntityCapsClass(), boolean.class }, new Object[]{ getEntityCaps(entityCaps), b });	}	public void setArmorSkirtShowModel(ModchuModel_IEntityCaps entityCaps, boolean b) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superSetArmorSkirtShowModel(entityCaps, b);			return;		}		if (model instanceof MultiModelBaseBiped) {			((MultiModelBaseBiped) model).setArmorSkirtShowModel(entityCaps, b);			return;		}		reflectOther(model, "setArmorSkirtShowModel", new Class[]{ getIEntityCapsClass(), boolean.class }, new Object[]{ getEntityCaps(entityCaps), b });	}	public void allShowModelMemory() {		Object model = getModel();		ModchuModel_ModelRenderer modelRenderer;		for (int i = 0; i < modelRendererFieldsMap.size(); i++) {			try {				modelRenderer = (ModchuModel_ModelRenderer) modelRendererFieldsMap.get(i).get(model);				if (modelRenderer != null) {					showModelMemoryMapPut(modelRenderer, modelRenderer.showModel);					//Modchu_Debug.mDebug("allShowModelMemory modelRendererFieldsMap.get("+i+").getName() = "+modelRendererFieldsMap.get(i).getName()+" modelRenderer.showModel="+modelRenderer.showModel);				}			} catch (Exception e) {				e.printStackTrace();			}		}	}	public void customModelShowModelMemory() {		boolean debug = false;		if (partsMap != null				&& !partsMap.isEmpty()) {			boolean b1 = false;			for (Entry<String, ModchuModel_ModelRenderer> en : partsMap.entrySet()) {				String key = en.getKey();				ModchuModel_ModelRenderer modelRenderer = en.getValue();				customModelShowModelMemoryMapPut(modelRenderer, modelRenderer.showModel);				if (debug) Modchu_Debug.mDebug("customModelShowModelMemory get("+key+") showModel="+modelRenderer.showModel);			}		} else {			if (debug) {				if (partsMap != null); else Modchu_Debug.mDebug("customModelShowModelMemory partsMap == null !!");				if (partsMap.isEmpty()) Modchu_Debug.mDebug("customModelShowModelMemory partsMap.isEmpty() !!");			}		}	}	public void allShowModelMemoryRead() {		Object model = getModel();		ModchuModel_ModelRenderer modelRenderer;		for (int i = 0; i < modelRendererFieldsMap.size(); i++) {			try {				modelRenderer = (ModchuModel_ModelRenderer) modelRendererFieldsMap.get(i).get(model);				if (modelRenderer != null) {					((ModchuModel_ModelRenderer) modelRendererFieldsMap.get(i).get(model)).showModel = showModelMemoryMapGet(modelRenderer);					//Modchu_Debug.mDebug("allShowModelMemory modelRendererFieldsMap.get("+i+").getName() = "+modelRendererFieldsMap.get(i).getName()+" ((ModchuModel_ModelRenderer) modelRendererFieldsMap.get(i).get(model)).showModel="+((ModchuModel_ModelRenderer) modelRendererFieldsMap.get(i).get(model)).showModel);				}			} catch (Exception e) {				e.printStackTrace();			}		}	}	public void customModelShowModelMemoryRead() {		boolean debug = false;		if (partsMap != null				&& !partsMap.isEmpty()) {			boolean b1 = false;			for (Entry<String, ModchuModel_ModelRenderer> en : partsMap.entrySet()) {				String key = en.getKey();				ModchuModel_ModelRenderer modelRenderer = en.getValue();				modelRenderer.showModel = customModelShowModelMemoryMapGet(modelRenderer);				if (debug) Modchu_Debug.mDebug("customModelShowModelMemoryRead parts["+key+"].showModel="+modelRenderer.showModel);			}		}	}	public void changeModel(ModchuModel_IEntityCaps entityCaps) {		boolean debug = false;		if (debug) Modchu_Debug.mlDebug("ModchuModel_CustomModel	changeModel");		changeModelInit = true;		defaultAddChild();		colorSettingForcingFlag = true;		changeColor(entityCaps);		settingModelRendererFieldsMap();		if (debug) Modchu_Debug.mlDebug("ModchuModel_CustomModel	changeModel end.");	}	private void settingModelRendererFieldsMap() {		modelRendererFieldsMap.clear();		Object model = getModel();		if (model != null); else return;		Field[] fields = model.getClass().getFields();		if (fields != null				&& fields.length > 0) {			Object o;			ModchuModel_ModelRenderer modelRenderer;			int k = 0;			for (Field f : fields) {				//Modchu_Debug.mDebug("changeModel f.getType() = "+f.getType());				try {					o = f.get(model);					if (o != null							&& o instanceof ModchuModel_ModelRenderer) {						modelRenderer = (ModchuModel_ModelRenderer) o;						modelRendererFieldsMap.put(k, f);						k++;					}				} catch (Exception e1) {					e1.printStackTrace();				}			}		}	}	public void changeColor(ModchuModel_IEntityCaps entityCaps) {		boolean debug = false;		if (debug) Modchu_Debug.mlDebug("ModchuModel_CustomModel	changeColor");		if (entityCaps != null); else {			Modchu_Debug.mDebug1("ModchuModel_CustomModel	colorSetting entityCaps == null !!");			return;		}		if (debug) {			Object model = getModel();			Object entity = entityCaps.getCapsValue(entityCaps.caps_Entity);			if (entity != null); else {				Modchu_Debug.mDebug1("ModchuModel_CustomModel	colorSetting entity == null !!");				return;			}		}		int color = getMaidColor(entityCaps);		//Modchu_Debug.mDebug("tempColor="+tempColor+" color="+color+" colorSettingForcingFlag="+colorSettingForcingFlag);		if (tempColor != color				| guiTextureSelectFlag				| colorSettingForcingFlag); else return;		//Modchu_Debug.mDebug("tempColor="+tempColor+" color="+color+" colorSettingForcingFlag="+colorSettingForcingFlag);		colorSettingForcingFlag = false;		colorSetting(entityCaps, color);		if (debug) Modchu_Debug.mlDebug("ModchuModel_CustomModel	changeColor end.");	}	public void setDefaultPause(float f, float f1, float f2, float f3, float f4,			float f5, ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model != null); else return;		if (model instanceof MultiModelCustom) ((MultiModelCustom) model).superSetDefaultPause(f, f1, f2, f3, f4, f5, entityCaps);		else if (model instanceof MultiModelBaseBiped) ((MultiModelBaseBiped) model).setDefaultPause(f, f1, f2, f3, f4, f5, entityCaps);		partsSetDefaultPause(f, f1, f2, f3, f4, f5, entityCaps);	}	private void partsSetDefaultPause(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IEntityCaps entityCaps) {		if (partsMap != null				&& !partsMap.isEmpty()) {			byte partsType;			for (Entry<String, ModchuModel_ModelRenderer> en : partsMap.entrySet()) {				ModchuModel_ModelRenderer modelRenderer = en.getValue();				modelRenderer.setRotationPoint(Modchu_CastHelper.Float(modelRenderer.getFreeVariable("initRotationPointX")), Modchu_CastHelper.Float(modelRenderer.getFreeVariable("initRotationPointY")), Modchu_CastHelper.Float(modelRenderer.getFreeVariable("initRotationPointZ")));			}		}	}	public float[] getArmorModelsSize() {		Object model = getModel();		if (model != null) {			if (model instanceof MultiModelCustom) return ((MultiModelCustom) model).superGetArmorModelsSize();			if (model instanceof MultiModelBaseBiped) {				//Modchu_Debug.mDebug("getArmorModelsSize model.getClass()="+model.getClass());				return (float[]) Modchu_Reflect.invokeMethod(model.getClass(), "getArmorModelsSize", model);			}		}		return new float[] {0.1F, 0.5F};	}	public void renderFirstPersonHand(ModchuModel_IEntityCaps entityCaps, float f, int i) {		Object model = getModel();		if (model != null); else return;		Object entity = entityCaps.getCapsValue(entityCaps.caps_Entity);		if (entity != null); else return;		Object render = Modchu_AS.get(Modchu_AS.renderManagerGetEntityRenderObject, entity);		if (texture != null				&& render != null) Modchu_AS.set(Modchu_AS.renderBindTexture, render, texture);		if (model instanceof MultiModelCustom) ((MultiModelCustom) model).superRenderFirstPersonHand(entityCaps, f, i);		else if (model instanceof MultiModelBaseBiped) ((MultiModelBaseBiped) model).renderFirstPersonHand(entityCaps, f, i);		else {			Class c = getIEntityCapsClass();			Method method = Modchu_Reflect.getMethod(model.getClass(), "renderFirstPersonHand", new Class[]{ c });			if (method != null) {				Object entityCaps1 = getEntityCaps(entityCaps);				if (c != null) Modchu_Reflect.invoke(method, model, new Object[]{ entityCaps1 });			}		}	}	private void loadInit(File file, boolean b) {		List<String> list2 = !b ? Modchu_Config.getCfgData().get(file) : null;		if (list2 == null) {			list2 = new ArrayList();			BufferedReader breader = null;			try {				breader = new BufferedReader(new FileReader(file));				String rl;				for (int i = 0; (rl = breader.readLine()) != null ; i++) {					int i1;					list2.add(rl);					if (rl.startsWith("#")							| rl.startsWith("/")) continue;					initCheckData(rl.toString());				}				Modchu_Config.getCfgData().put(file, list2);			} catch (Exception e) {				//Modchu_Debug.cDebug("ModchuModel_CustomModel	loadInit load "+ file.toString() +" load fail.");				e.printStackTrace();			 } finally {				 try {					 if (breader != null) breader.close();				 } catch (Exception e) {				 }			 }		} else {			for (String s2 : list2) {				if (s2.startsWith("#")						| s2.startsWith("/")) continue;				initCheckData(s2.toString());			}		}	}	private void initCheckData(String s) {		boolean debug = false;		s = s.replaceAll(" ", "");		s = s.replaceAll("	", "");		s = s.toLowerCase();		int i1;		if (s.startsWith("name")) {			i1 = s.indexOf("=");			if (i1 > -1) {				return;			}		}		if (s.startsWith("mainmodeltexturename")) {			i1 = s.indexOf("=");			if (i1 > -1) {				String[] s0 = s.split("=");				if (s0.length > 1) {					i1 = s0[1].indexOf(";");					if (i1 > -1) {						String[] s1 = s0[1].split(";");						cfgMainModelTextureName = s1[0];						mainModelDesignationColor = Modchu_CastHelper.Int(s1[1]);					} else {						cfgMainModelTextureName = s0[1];					}				} else {					cfgMainModelTextureName = null;				}				if (debug) Modchu_Debug.mlDebug1("ModchuModel_CustomModel	initCheckData mainModeltextureName="+cfgMainModelTextureName);				return;			}		}		if (s.startsWith("mainmodeltexturearmorname")) {			i1 = s.indexOf("=");			if (i1 > -1) {				String[] s0 = s.split("=");				if (s0.length > 1) {					i1 = s0[1].indexOf(";");					if (i1 > -1) {						String[] s1 = s0[1].split(";");						cfgMainModelTextureArmorName = s1[0];						cfgMainModelDesignationArmorItemName = s1[1];					} else {						cfgMainModelTextureArmorName = s0[1];					}				} else {					cfgMainModelTextureArmorName = null;				}				if (debug) {					Modchu_Debug.mlDebug1("ModchuModel_CustomModel	initCheckData mainModeltextureArmorName="+cfgMainModelTextureArmorName);					if (cfgMainModelDesignationArmorItemName != null) Modchu_Debug.mlDebug1("ModchuModel_CustomModel	initCheckData mainModelDesignationArmorItemName="+cfgMainModelDesignationArmorItemName);				}				return;			}		}	}	public void save(File file) {		if (!file.exists()) {			try {				BufferedWriter bwriter = new BufferedWriter(new FileWriter(						file));				StringBuilder sb = new StringBuilder();				List list = new ArrayList();				bwriter.write("");				bwriter.newLine();				bwriter.close();				Modchu_Debug.lDebug("ModchuModel_CustomModel	"+ file.toString() +" new file create.");			} catch (Exception e) {				Modchu_Debug.lDebug(""+getClass().getName()+" save file="+ file.toString() +" file writer fail.", 2, e);				e.printStackTrace();			}		}		if (file.exists() && file.canRead() && file.canWrite()) {			List lines = getSaveList();			try {			// 保存				if (!lines.isEmpty()						&& (file.exists() || file.createNewFile())						&& file.canWrite()) {					BufferedWriter bwriter = new BufferedWriter(							new FileWriter(file));					String t;					for (int i = 0 ; i < lines.size() ; i++) {						t = (String) lines.get(i);						bwriter.write(t);						bwriter.newLine();					}					bwriter.close();				}			} catch (Exception er) {				Modchu_Debug.lDebug("ModchuModel_CustomModel	save file save fail.");				er.printStackTrace();			}		}	}	public List getSaveList() {		List lines = new ArrayList();		String s;		String s1;		StringBuilder sb = new StringBuilder();		sb = sb.append("mainModelTextureName").append("=");		if (cfgMainModelTextureName != null) {			sb = sb.append(cfgMainModelTextureName);			if (mainModelDesignationColor > -1) {				sb = sb.append(";").append(mainModelDesignationColor);			}		}		lines.add(sb.toString());		sb = sb.append("cfgMainModelTextureArmorName").append("=");		if (cfgMainModelTextureArmorName != null) {			sb = sb.append(cfgMainModelTextureArmorName);			if (cfgMainModelDesignationArmorItemName != null) {				sb = sb.append(";").append(cfgMainModelDesignationArmorItemName);			}		}		lines.add(sb.toString());		lines.add("");		sb.delete(0, sb.length());		if (partsMap != null				&& !partsMap.isEmpty()) {			int i = 0;			int partsTextureColor;			int partsTextureWidth;			int partsTextureHeight;			float initRotateAngleX;			float initRotateAngleY;			float initRotateAngleZ;			float initRotationPointX;			float initRotationPointY;			float initRotationPointZ;			byte partsType;			byte boxType;			float[] f0;			float[] f1;			Object o;			for (Entry<String, ModchuModel_ModelRenderer> en : partsMap.entrySet()) {				String key = en.getKey();				ModchuModel_ModelRenderer modelRenderer = en.getValue();				sb = sb.append("name").append("=").append(key);				lines.add(sb.toString());				sb.delete(0, sb.length());				sb = sb.append("textureName").append("=").append(modelRenderer.getFreeVariable("textureName"));				partsTextureColor = Modchu_CastHelper.Int(modelRenderer.getFreeVariable("partsTextureColor"));				if (partsTextureColor != -1)  sb = sb.append(";").append(partsTextureColor);				lines.add(sb.toString());				sb.delete(0, sb.length());				partsTextureWidth = Modchu_CastHelper.Int(modelRenderer.getFreeVariable("partsTextureWidth"));				sb = sb.append("textureWidth").append("=").append(partsTextureWidth);				lines.add(sb.toString());				sb.delete(0, sb.length());				partsTextureHeight = Modchu_CastHelper.Int(modelRenderer.getFreeVariable("partsTextureHeight"));				sb = sb.append("textureHeight").append("=").append(partsTextureHeight);				lines.add(sb.toString());				sb.delete(0, sb.length());				sb = sb.append("textureOffset").append("=").append(modelRenderer.getTextureOffsetX()).append(",").append(modelRenderer.getTextureOffsetY());				lines.add(sb.toString());				sb.delete(0, sb.length());				if (modelRenderer.cubeList != null						&& !modelRenderer.cubeList.isEmpty()) {					for (int i1 = 0; i1 < modelRenderer.cubeList.size(); i1++) {						boxType = Modchu_CastHelper.Byte(modelRenderer.getFreeVariable("boxType"+i1));						o = modelRenderer.getFreeVariable("partsBoxData"+i1);						f0 = o != null								&& o instanceof float[] ? (float[])o : null;						f1 = copyBoxDataFloat(f0);						if (i1 > 0) {							ConcurrentHashMap textureOffsetMap = Modchu_AS.getConcurrentHashMap(Modchu_AS.modelRendererGetTextureOffsetMap, modelRenderer);							String key2 = (String)Modchu_Main.getConcurrentHashMapKey(textureOffsetMap, i1 - 1);							Object textureOffset = textureOffsetMap.get(key2);							sb = sb.append("textureOffset").append("=").append(key2).append(",").append(Modchu_AS.getInt(Modchu_AS.textureOffsetTextureOffsetX, textureOffset)).append(",").append(Modchu_AS.getInt(Modchu_AS.textureOffsetTextureOffsetY, textureOffset));							lines.add(sb.toString());							sb.delete(0, sb.length());						}						switch(boxType) {						case 0:							sb = sb.append("addBox");							break;						case 1:							sb = sb.append("addPlate");							break;						case 2:							sb = sb.append("addBall");							break;						}						sb = sb.append("(").append(f1[0]).append("F,").append(f1[1]).append("F,").append(f1[2]).append("F,").append(f1[3]).append(",").append(f1[4]).append(",").append(f1[5]);						if (boxType != 2) sb = sb.append(",").append(f1[6]).append("F,").append(f1[7]).append("F");						sb = sb.append(")");						lines.add(sb.toString());						sb.delete(0, sb.length());						i++;					}				}				initRotateAngleX = Modchu_CastHelper.Float(modelRenderer.getFreeVariable("initRotateAngleX"));				initRotateAngleY = Modchu_CastHelper.Float(modelRenderer.getFreeVariable("initRotateAngleY"));				initRotateAngleZ = Modchu_CastHelper.Float(modelRenderer.getFreeVariable("initRotateAngleZ"));				sb = sb.append("setRotateAngle").append("(").append(initRotateAngleX).append("F,").append(initRotateAngleY).append("F,").append(initRotateAngleZ).append("F)");				lines.add(sb.toString());				sb.delete(0, sb.length());				initRotationPointX = Modchu_CastHelper.Float(modelRenderer.getFreeVariable("initRotationPointX"));				initRotationPointY = Modchu_CastHelper.Float(modelRenderer.getFreeVariable("initRotationPointY"));				initRotationPointZ = Modchu_CastHelper.Float(modelRenderer.getFreeVariable("initRotationPointZ"));				sb = sb.append("setRotationPoint").append("(").append(initRotationPointX).append("F,").append(initRotationPointY).append("F,").append(initRotationPointZ).append("F)");				lines.add(sb.toString());				sb.delete(0, sb.length());				ArrayList list = getPartsAddChildLiat(modelRenderer);				if (list != null						&& !list.isEmpty()) {					String s2 = null;					for (int i1 = 0; i1 < list.size(); i1++) {						s2 = (String) list.get(i1);						if (s2 != null) {							sb = sb.append(s2).append(".addChild");							lines.add(sb.toString());							sb.delete(0, sb.length());						}					}				}				partsType = Modchu_CastHelper.Byte(modelRenderer.getFreeVariable("partsType"));				float partsTypeFactor = Modchu_CastHelper.Float(modelRenderer.getFreeVariable("partsTypeFactor"));				float partsTypeCorrection = Modchu_CastHelper.Float(modelRenderer.getFreeVariable("partsTypeCorrection"));				sb = sb.append("type").append("=").append(getPartsTypeString(partsType)).append(";").append(partsTypeFactor).append("F;").append(partsTypeCorrection).append("F");				lines.add(sb.toString());				sb.delete(0, sb.length());				lines.add("");			}		}		return lines;	}	private void load(File file, boolean b, float f, float f1) {		//Modchu_Debug.mlDebug1("ModchuModel_CustomModel	load 1");		if (!isMaidModel()) return;		List<String> list2 = !b ? Modchu_Config.getCfgData().get(file) : null;		tempPartsName = null;		tempCommentFlag = false;		tempFlag = false;		tempStringBuilder = null;		if (list2 == null) {			list2 = new ArrayList();			BufferedReader breader = null;			try {				breader = new BufferedReader(new FileReader(file));				String s2;				while ((s2 = breader.readLine()) != null) {					list2.add(s2);					load_r(s2, f, f1);				}				Modchu_Config.getCfgData().put(file, list2);				breader.close();			} catch (Error err) {				err.printStackTrace();			} catch (Exception e) {				//Modchu_Debug.cDebug("Modchu_Config load "+ file.toString() +" load fail.");				e.printStackTrace();			} finally {				try {					if (breader != null) breader.close();				} catch (Exception e) {				}			}		} else {			//Modchu_Debug.mDebug("1 file="+file.toString()+" list.size()="+list.size());			for (String s2 : list2) {				load_r(s2, f, f1);				//Modchu_Debug.mDebug("ModchuModel_CustomModel	load tempPartsName="+tempPartsName);			}		}		tempPartsName = null;		tempStringBuilder = null;		Modchu_TextCalculation.instance.debugSetting = false;		Modchu_Debug.mlDebug1("ModchuModel_CustomModel	load end.");	}	private void load_r(String s1, float f, float f1) {		//Modchu_Debug.mDebug("ModchuModel_CustomModel	load_r s1="+s1);		if (s1.startsWith("/*")) {			tempCommentFlag = true;			return;		}		if (s1.startsWith("*/")				&& tempCommentFlag) {			tempCommentFlag = false;			return;		}		if (tempCommentFlag				| s1.startsWith("#")				| s1.startsWith("/")) return;		if (s1.indexOf("{") > -1) {			if (tempStringBuilder != null); else tempStringBuilder = new StringBuilder();			tempStringBuilder.append(s1);			tempFlag = true;			return;		}		if (tempFlag) {			tempStringBuilder.append(s1);			if (s1.indexOf("}") > -1) {				tempFlag = false;				s1 = tempStringBuilder.toString();				tempStringBuilder.delete(0, tempStringBuilder.length());			} else {				return;			}		}		//Modchu_Debug.mlDebug("ModchuModel_CustomModel	load_r 2 s1="+s1);		tempPartsName = settingData(tempPartsName, s1, f, f1);		//Modchu_Debug.mDebug("ModchuModel_CustomModel	load_r tempPartsName="+tempPartsName);		Modchu_Debug.mDebug("ModchuModel_CustomModel	load_r end.");	}	private String settingData(String tempPartsName, String s, float f, float f1) {		boolean debug = f == 0.0F				&& !Modchu_Main.isRelease();		Object model = getModel();		s = s.replaceAll(" ", "");		s = s.replaceAll("	", "");		s = s.replaceAll("\\{", "");		s = s.replaceAll("\\}", "");		//s = s.toLowerCase();		int i1 = 0;		boolean flag = partsMap != null				&& !partsMap.isEmpty();		if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	tempPartsName="+tempPartsName+" s="+s);		ModchuModel_ModelRenderer tempModelRenderer = flag ? partsMap.get(tempPartsName) : null;		flag = flag				&& tempModelRenderer != null;		HashMap<String, Object> map = Modchu_Main.getNewModchuCharacteristicMap(loadSettingDataString(s));		if (map != null				&& !map.isEmpty()); else {			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	map="+map+" return.");			return tempPartsName;		}		s = map.containsKey("String") ? Modchu_CastHelper.String(map.get("String")) : null;		String s1 = map.containsKey("String1") ? Modchu_CastHelper.String(map.get("String1")) : null;		if (tempSetRotationAnglesFlag) {			settingDataSetRotationAngles(map, tempModelRenderer, tempPartsName, s, s1, f, f1);			return tempPartsName;		}		if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	s="+s+" s1="+s1);		if (s != null				&& !s.isEmpty()); else return tempPartsName;		if (s.equals("name")				&& s1 != null				&& !s1.isEmpty()) {			tempPartsName = s1;			if (debug) {				Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	------------------- name start.");				Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	tempPartsName="+tempPartsName);			}			ModchuModel_ModelRenderer modelRenderer = new ModchuModel_ModelRenderer(model, tempPartsName);			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	boxName="+modelRenderer.getBoxName());			if (flag) {				modelRenderer.setFreeVariable("textureName", ""+Modchu_CastHelper.String(tempModelRenderer.getFreeVariable("textureName")));				Object o = tempModelRenderer.getFreeVariable("partsTextureColor");				modelRenderer.setFreeVariable("partsTextureColor", flag						&& o != null ? Modchu_CastHelper.Int(o, -1) : -1);			} else {				modelRenderer.setFreeVariable("partsTextureColor", -1);			}			modelRenderer.setFreeVariable("partsType", flag ? Modchu_CastHelper.Byte(tempModelRenderer.getFreeVariable("partsType"), normal) : normal);			modelRenderer.setFreeVariable("partsTypeCorrection", flag ? Modchu_CastHelper.Float(tempModelRenderer.getFreeVariable("partsTypeCorrection"), 1.0F) : 1.0F);			modelRenderer.setFreeVariable("partsTypeFactor", flag ? Modchu_CastHelper.Float(tempModelRenderer.getFreeVariable("partsTypeFactor"), 0.0F) : 0.0F);			modelRenderer.setTextureSize(flag ? (int)tempModelRenderer.textureWidth : 64, flag ? (int)tempModelRenderer.textureHeight : 32);			modelRenderer.setTextureOffset(flag ? tempModelRenderer.getTextureOffsetX() : 0, flag ? tempModelRenderer.getTextureOffsetY() : 0);			modelRenderer.setFreeVariable("viewType", flag ? tempModelRenderer.getFreeVariable("viewType") : (byte) -1);			modelRenderer.setFreeVariable("armorPartsType", flag ? tempModelRenderer.getFreeVariable("armorPartsType") : null);			partsMap.put(tempPartsName, modelRenderer);			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	------------------- name end.");			return tempPartsName;		}		if (!flag) return tempPartsName;		if (s.equals("textureName")) {			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	------------------- textureName start.");			int partsTextureColor = map.containsKey("Integer") ? Modchu_CastHelper.Int(map.get("Integer")) : -1;			tempModelRenderer.setFreeVariable("partsTextureColor", partsTextureColor);			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	partsTextureColor="+partsTextureColor);			String textureName = Modchu_CastHelper.String(map.get("String1"));			tempModelRenderer.setFreeVariable("textureName", textureName);			partsMap.put(tempPartsName, tempModelRenderer);			if (debug) {				Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	textureName="+textureName);				Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	------------------- textureName end.");			}			return tempPartsName;		}		if (s.equals("textureWidth")				&& map.containsKey("Integer")) {			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	------------------- textureWidth start.");			tempModelRenderer.textureWidth = Modchu_CastHelper.Int(map.get("Integer"));			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	partsTextureWidth="+tempModelRenderer.textureWidth);			partsMap.put(tempPartsName, tempModelRenderer);			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	------------------- textureWidth end.");			return tempPartsName;		}		if (s.equals("textureHeight")				&& map.containsKey("Integer")) {			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	------------------- textureHeight start.");			tempModelRenderer.textureHeight = Modchu_CastHelper.Int(map.get("Integer"));			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	partsTextureHeight="+tempModelRenderer.textureHeight);			partsMap.put(tempPartsName, tempModelRenderer);			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	------------------- textureHeight end.");			return tempPartsName;		}		if (s.equals("textureOffset")				&& map.containsKey("Integer")				&& map.containsKey("Integer1")) {			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	------------------- textureOffset start.");			String s2 = map.containsKey("String1") ? Modchu_CastHelper.String(map.get("String1")) : null;			int x = Modchu_CastHelper.Int(map.get("Integer"));			int y = Modchu_CastHelper.Int(map.get("Integer1"));			if (s2 != null					&& !s2.isEmpty()) tempModelRenderer.setTextureOffset(s2, x, y);			else tempModelRenderer.setTextureOffset(x, y);			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	textureOffset x="+x+" y="+y);			partsMap.put(tempPartsName, tempModelRenderer);			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	------------------- textureOffset end.");			return tempPartsName;		}		if (s.equals("mirror")				&& map.containsKey("Boolean")) {			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	------------------- mirror start.");			tempModelRenderer.mirror = Modchu_CastHelper.Boolean(map.get("Boolean"));			if (debug) {				Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	tempModelRenderer="+tempModelRenderer);				Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	partsMirror="+tempModelRenderer.mirror);			}			partsMap.put(tempPartsName, tempModelRenderer);			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	------------------- mirror end.");			return tempPartsName;		}		if (s.equals("addBox")				| s.equals("addPlate")				| s.equals("addBall")) {			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	------------------- addBox start.");			byte boxType = (byte) (s.equals("addBox") ? 0 : s.equals("addPlate") ? 1 : s.equals("addBall") ? 2 : 0);			//if (debug) Modchu_Debug.mDebug("settingData add boxType="+boxType);			i1 = tempModelRenderer.cubeList != null ? tempModelRenderer.cubeList.size() : -1;			boolean flag2 = false;			float fx = map.containsKey("Float") ? Modchu_CastHelper.Float(map.get("Float")) : 0.0F;			float fy = map.containsKey("Float1") ? Modchu_CastHelper.Float(map.get("Float1")) : 0.0F;			float fz = map.containsKey("Float2") ? Modchu_CastHelper.Float(map.get("Float2")) : 0.0F;			int sx = map.containsKey("Integer") ? Modchu_CastHelper.Int(map.get("Integer")) : 1;			int sy = map.containsKey("Integer1") ? Modchu_CastHelper.Int(map.get("Integer1")) : 1;			int sz = map.containsKey("Integer2") ? Modchu_CastHelper.Int(map.get("Integer2")) : 1;			float scaleM = map.containsKey("Float3") ? Modchu_CastHelper.Float(map.get("Float3")) : 1.0F;			float scaleF = map.containsKey("Float4") ? Modchu_CastHelper.Float(map.get("Float4")) : 0.0F;			switch (boxType) {			case 0:				if (debug) Modchu_Debug.mDebug(new StringBuilder().append("ModchuModel_CustomModel	settingData	addBox(")						.append(fx).append("F,").append(fy).append("F,").append(fz).append("F,")						.append(sx).append(",").append(sy).append(",").append(sz).append(",")						.append(f).append("F*").append(scaleM).append("F+").append(scaleF).append("F)").toString());				tempModelRenderer.addBox(fx, fy, fz, sx, sy, sz, f * scaleM + scaleF);				flag2 = true;				break;			case 1:				if (debug) Modchu_Debug.mDebug(new StringBuilder().append("ModchuModel_CustomModel	settingData	addPlate(")						.append(fx).append("F,").append(fy).append("F,").append(fz).append("F,")						.append(sx).append(",").append(sy).append(",").append(sz).append(",")						.append(f).append("F*").append(scaleM).append("F+").append(scaleF).append("F)").toString());				tempModelRenderer.addPlate(fx, fy, fz, sx, sy, sz, f * scaleM + scaleF);				flag2 = true;				break;			case 2:				if (debug) Modchu_Debug.mDebug(new StringBuilder().append("ModchuModel_CustomModel	settingData	addBall(")						.append(fx).append("F,").append(fy).append("F,").append(fz).append("F,")						.append(sx).append(",").append(sy).append(",").append(sz)						.append(")").toString());				tempModelRenderer.addBall(fx, fy, fz, sx, sy, sz);				flag2 = true;				break;			}			//if (debug) Modchu_Debug.mDebug("settingData add 3");			if (flag2) {				tempModelRenderer.setFreeVariable("boxType"+i1, boxType);				tempModelRenderer.setFreeVariable("partsBoxData"+i1, new float[]{						fx, fy, fz, (float)sx, (float)sy, (float)sz, scaleM, scaleF				});			}			partsMap.put(tempPartsName, tempModelRenderer);			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	------------------- addBox end.");			return tempPartsName;		}		if (s.equals("setRotationPoint")				&& map.containsKey("Float")				&& map.containsKey("Float1")				&& map.containsKey("Float2")) {			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	------------------- setRotationPoint start.");			float rotationPointX = Modchu_CastHelper.Float(map.get("Float"));			float rotationPointY = Modchu_CastHelper.Float(map.get("Float1"));			float rotationPointZ = Modchu_CastHelper.Float(map.get("Float2"));			tempModelRenderer.setRotationPoint(rotationPointX, rotationPointY, rotationPointZ);			tempModelRenderer.setFreeVariable("initRotationPointX", rotationPointX);			tempModelRenderer.setFreeVariable("initRotationPointY", rotationPointY);			tempModelRenderer.setFreeVariable("initRotationPointZ", rotationPointZ);			partsMap.put(tempPartsName, tempModelRenderer);			if (debug) {				Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	setRotationPoint("+rotationPointX+", "+rotationPointY+", "+rotationPointZ+")");				Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	------------------- setRotationPoint end.");			}			return tempPartsName;		}		if (s.equals("setRotateAngle")				&& map.containsKey("Float")				&& map.containsKey("Float1")				&& map.containsKey("Float2")) {			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	------------------- setRotateAngle start.");			float rotateAngleX = Modchu_CastHelper.Float(map.get("Float"));			float rotateAngleY = Modchu_CastHelper.Float(map.get("Float1"));			float rotateAngleZ = Modchu_CastHelper.Float(map.get("Float2"));			tempModelRenderer.setRotateAngle(rotateAngleX, rotateAngleY, rotateAngleZ);			tempModelRenderer.setFreeVariable("initRotateAngleX", rotateAngleX);			tempModelRenderer.setFreeVariable("initRotateAngleY", rotateAngleY);			tempModelRenderer.setFreeVariable("initRotateAngleZ", rotateAngleZ);			partsMap.put(tempPartsName, tempModelRenderer);			if (debug) {				Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	setRotateAngle("+rotateAngleX+", "+rotateAngleY+", "+rotateAngleZ+")");				Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	------------------- setRotateAngle end.");			}			return tempPartsName;		}		if (s1 != null				&& s1.indexOf("addChild") > -1) {			if (debug) {				Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	------------------- addChild start.");				Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	addChild s="+s);			}			if (!s.equals("null")) {				addPartsAddChildList(s, tempModelRenderer);				partsMap.put(tempPartsName, tempModelRenderer);			}			if (debug) {				ArrayList list = getPartsAddChildLiat(tempModelRenderer);				Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	addChild name="+tempPartsName);				Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	addChild list.size()="+list.size());				Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	------------------- addChild end.");			}			return tempPartsName;		}		if (s.equals("type")) {			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	------------------- type start.");			float ff1 = map.containsKey("Float") ? Modchu_CastHelper.Float(map.get("Float")) : 1.0F;			float ff2 = map.containsKey("Float1") ? Modchu_CastHelper.Float(map.get("Float1")) : 0.1F;			tempModelRenderer.setFreeVariable("partsTypeFactor", ff1);			tempModelRenderer.setFreeVariable("partsTypeCorrection", ff2);			if (debug) {				Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	partsTypeFactor="+ff1);				Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	partsTypeCorrection="+ff2);			}			byte by = normal;			if (s1.equals("eyeR")) by = eyeR;			else if (s1.equals("eyeL")) by = eyeL;			else if (s1.equals("ear")) by = ear;			else if (s1.equals("tail")) by = tail;			else if (s1.equals("breast")) by = breast;			tempModelRenderer.setFreeVariable("partsType", by);			partsMap.put(tempPartsName, tempModelRenderer);			if (debug) {				Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	type="+getPartsTypeString(by));				Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	------------------- type end.");			}			return tempPartsName;		}		if (s.equals("viewType")) {			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	------------------- viewType start.");			s = Modchu_CastHelper.String(map.get("String1"));			tempModelRenderer.setFreeVariable("viewType", s.equals("mainOnly") ? viewTypeMainOnly : s.equals("armorOnly") ? viewTypeArmorOnly : (byte) -1);			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	viewType="+s);			partsMap.put(tempPartsName, tempModelRenderer);			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	------------------- viewType end.");			return tempPartsName;		}		if (s.equals("armorPartsType")) {			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	------------------- armorPartsType start.");			LinkedList list = new LinkedList();			for (int i2 = 0; i2 < 65; i2++) {				String s2 = i2 == 0 ? "Boolean" : "Boolean"+i2;				if (map.containsKey(s2)) {					list.add(Modchu_CastHelper.Boolean(map.get(s2)));					//if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	armorPartsType list.add :"+map.get(s2));				}				else break;			}			boolean[] b0 = new boolean[list.size()];			int i2 = 0;			for (Object o : list) {				b0[i2] = Modchu_CastHelper.Boolean(o);				if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	armorPartsType b0["+i2+"]="+Modchu_CastHelper.Boolean(o));				i2++;			}			tempModelRenderer.setFreeVariable("armorPartsType", b0);			partsMap.put(tempPartsName, tempModelRenderer);			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	------------------- armorPartsType end.");			return tempPartsName;		}		if (s.equals("setRotationAngles")) {			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	------------------- setRotationAngles start.");			tempSetRotationAnglesFlag = true;			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	------------------- setRotationAngles end.");			return tempPartsName;		}		if (s.equals("breastFloatsVolume")				| s.equals("skirtFloatsVolume")) {			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	------------------- "+s+" start.");			double d1 = map.containsKey("Double") ? Modchu_CastHelper.Double(map.get("Double")) : 1.0D;			tempModelRenderer.setFreeVariable(s, d1);			partsMap.put(tempPartsName, tempModelRenderer);			if (debug) {				Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	s="+s+" d1="+d1);				Modchu_Debug.mDebug("ModchuModel_CustomModel	settingData	------------------- "+s+" end.");			}			return tempPartsName;		}		return tempPartsName;	}	private Object[] loadSettingDataString(String s) {		boolean debug = false;		if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	loadSettingDataString s="+s);		LinkedList list = new LinkedList();		ArrayList<String> tempList = new ArrayList();		tempList.add(s);		for(int i = 0; i < 64; i++) {			loadSettingDataString_r(list, tempList);			if (tempList.isEmpty()) break;		}		return Modchu_Main.listToObjectArray(list);	}	private void loadSettingDataString_r(List list, List<String> list1) {		boolean debug = false;		String s = list1.get(0);		list1.remove(0);		if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	loadSettingDataString_r s="+s);		int i1 = s.indexOf("=");		if (i1 > -1) {			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	loadSettingDataString_r \"=\"");			String s1 = s.substring(i1 + 1);			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	loadSettingDataString_r s1="+s1);			s = s.substring(0, i1);			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	loadSettingDataString_r s="+s);			if (s != null					&& !s.isEmpty()) list1.add(s);			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	loadSettingDataString_r residue s="+s);			if (s1 != null					&& !s1.isEmpty()) list1.add(s1);			return;		}		if (tempSetRotationAnglesFlag				&& (Modchu_Main.calculationCharacterStringCheck(s)				| otherCalculationCharacterStringCheck(s))) {			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	loadSettingDataString_r tempSetRotationAnglesFlag");			if (loadSettingDataString_r_Comma(s, list, list1)) {				if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	loadSettingDataString_r tempSetRotationAnglesFlag Comma return.");				return;			}			if (s != null					&& !s.isEmpty()) {				list.add(s);				if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	loadSettingDataString_r tempSetRotationAnglesFlag list.add s="+s);			}			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	loadSettingDataString_r tempSetRotationAnglesFlag end return.");			return;		}		i1 = s.indexOf("(");		if (i1 > -1) {			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	loadSettingDataString_r \"(\"");			if (i1 > 0) {				String s2 = s.substring(0, i1);				if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	loadSettingDataString_r s2="+s2);				if (s2 != null						&& !s2.isEmpty()) list1.add(s2);			}			String s1 = s.substring(i1 + 1);			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	loadSettingDataString_r residue s1="+s1);			i1 = s1.indexOf(")");			if (i1 > -1) {				if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	loadSettingDataString_r \")\"");				s1 = s1.substring(0, i1);				if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	loadSettingDataString_r s1="+s1);				if (s1 != null						&& !s1.isEmpty()) list1.add(s1);			}			return;		}		if (loadSettingDataString_r_Comma(s, list, list1)) return;		i1 = s.indexOf(".");		if (i1 > -1) {			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	loadSettingDataString_r \".\"");			if (i1 < 1) return;			String s1 = s.substring(i1 - 1, i1);			i1+=2;			if (s.length() < i1) return;			String s3 = s.substring(i1 - 1, i1);			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	loadSettingDataString_r s1="+s1+" s3="+s3);			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	loadSettingDataString_r s="+s);			try {			if (Modchu_Main.integerCheck(s1)					&& Modchu_Main.integerCheck(s3)) {				Object o = Modchu_Main.stringToSuitableObject(s);				if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	loadSettingDataString_r list.add o="+o+" o.getClass()="+o.getClass());				list.add(o);			} else {				String[] s4 = s.split("\\.");				if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	loadSettingDataString_r s4="+s4);				if (s4 != null						&& s4.length > 0); else {					if (debug) {						if (s4 != null) Modchu_Debug.mDebug("ModchuModel_CustomModel	loadSettingDataString_r s4.length="+s4.length);						Modchu_Debug.mDebug("ModchuModel_CustomModel	loadSettingDataString_r s4="+s4+" return.");					}					return;				}				for (String s5 : s4) {					if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	loadSettingDataString_r s5="+s5);					if (s5 != null							&& !s5.isEmpty()) list1.add(s5);				}			}			} catch (Error e) {				e.printStackTrace();			} catch (Exception e) {				e.printStackTrace();			} catch (Throwable e) {				e.printStackTrace();			}			return;		}		Object o = Modchu_Main.stringToSuitableObject(s);		if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	loadSettingDataString_r list.add o="+o+" o.getClass()="+o.getClass());		list.add(o);	}	private boolean loadSettingDataString_r_Comma(String s, List list, List<String> list1) {		boolean debug = !Modchu_Main.isRelease();		String s2 = ",";		int i1 = s.indexOf(s2);		if (i1 < 0) {			s2 = ";";			i1 = s.indexOf(s2);		}		if (i1 > -1) {			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	loadSettingDataString_r_Comma	\""+s2+"\"");			String[] s0 = s.split(s2);			if (s0 != null					&& s0.length > 0); else return true;			for (String s3 : s0) {				if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	loadSettingDataString_r_Comma	s3="+s3);				if (s3 != null						&& !s3.isEmpty()) {					if (tempSetRotationAnglesFlag) {						i1 = Modchu_Main.countIndex(s3, "(");						if (i1 % 2 == 1) {							if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	loadSettingDataString_r_Comma	\"(\"");							s3 = s3.substring(i1);						} else {							i1 = Modchu_Main.countIndex(s3, ")");							if (i1 % 2 == 1) {								if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	loadSettingDataString_r_Comma	\")\"");								s3 = s3.substring(0, i1);							}						}						if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	loadSettingDataString_r_Comma	s3="+s3);						// TODO						ArrayList list2 = Modchu_TextCalculation.instance.getTextCalculationList(s3);						if (list2 != null								&& !list2.isEmpty()) {							list.add(list2);							if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	loadSettingDataString_r_Comma	list.add list2="+Modchu_Main.listToString(list2));						}					} else {						Object o = Modchu_Main.stringToSuitableObject(s3);						if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	loadSettingDataString_r_Comma	list.add o="+o+" o.getClass()="+o.getClass());						list.add(o);					}				}			}			return true;		}		if (tempSetRotationAnglesFlag) {			if (debug) {				Modchu_Debug.mDebug("ModchuModel_CustomModel	loadSettingDataString_r_Comma	tempSetRotationAnglesFlag start.");				Modchu_Debug.mDebug("ModchuModel_CustomModel	loadSettingDataString_r_Comma	tempSetRotationAnglesFlag s="+s);			}			ArrayList list2 = Modchu_TextCalculation.instance.getTextCalculationList(s);			if (list2 != null					&& !list2.isEmpty()) {				list.add(list2);				if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	loadSettingDataString_r_Comma	list.add 2 list2="+Modchu_Main.listToString(list2));				return true;			} else {				if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	loadSettingDataString_r_Comma	tempSetRotationAnglesFlag list2 == null.");			}			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	loadSettingDataString_r_Comma	tempSetRotationAnglesFlag end.");		}		return false;	}	public static boolean otherCalculationCharacterStringCheck(String s) {		if (s != null				&& !s.isEmpty()); else return false;		String[] s0 = new String[]{				"f"		};		int i1 = -1;		for (String s1 : s0) {			if (s.equals(s1)) return true;			if (s.startsWith(s1)					&& s.length() < 3) {				String s2 = s1.substring(1);				if (Modchu_Main.integerCheck(s2)) {					return true;				}			}		}		return false;	}	private void settingDataSetRotationAngles(HashMap<String, Object> map, ModchuModel_ModelRenderer tempModelRenderer, String tempPartsName, String s, String s1, float f, float f1) {		boolean debug = false;		Object model = getModel();		int i1 = 0;		if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	settingDataSetRotationAngles s="+s+" s1="+s1);		if (s1 != null				&& !s1.isEmpty()); else {			tempSetRotationAnglesFlag = false;			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	settingDataSetRotationAngles s1 == null. tempSetRotationAnglesFlag = false");			return;		}		if (s.equals("setAction")) {			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	settingDataSetRotationAngles ------------------- setAction start.");			tempSetAction = s1;			if (debug) {				Modchu_Debug.mDebug("ModchuModel_CustomModel	settingDataSetRotationAngles tempSetAction="+tempSetAction);				Modchu_Debug.mDebug("ModchuModel_CustomModel	settingDataSetRotationAngles ------------------- setAction end.");			}			return;		}		if (s1.indexOf("rotateAngle") > -1				| s1.indexOf("rotationPoint") > -1) {			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	settingDataSetRotationAngles ------------------- settingDataSetRotationAngles rotateAngle or rotationPoint start.");			int i3 = s1.equals("rotateAngleX") ? 0					: s1.equals("rotateAngleY") ? 1							: s1.equals("rotateAngleZ") ? 2									: s1.equals("rotationPointX") ? 3											: s1.equals("rotationPointY") ? 4													: s1.equals("rotationPointZ") ? 5 : -1;			if (i3 == -1) {				if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	settingDataSetRotationAngles ------------------- settingDataSetRotationAngles rotateAngle or rotationPoint i3 == -1 end.");				return;			}			Object o1 = map.containsKey("LinkedList") ? Modchu_CastHelper.LinkedList(map.get("LinkedList")) : map.containsKey("ArrayList") ? Modchu_CastHelper.ArrayList(map.get("ArrayList")) : map.containsKey("List") ? Modchu_CastHelper.List(map.get("List")) : map.containsKey("Float") ? Modchu_CastHelper.Float(map.get("Float")) : null;			if (tempSetAction != null					&& !tempSetAction.isEmpty()); else tempSetAction = "default";			ModchuModel_ModelRenderer modelRenderer = getModelRenderer(s);			if (modelRenderer != null); else {				if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	settingDataSetRotationAngles ------------------- settingDataSetRotationAngles rotateAngle or rotationPoint modelRenderer == null !! end.");				return;			}			HashMap<String, HashMap> anglePointMap = modelRenderer.freeVariableContainsKey("anglePointMap") ? (HashMap<String, HashMap>) modelRenderer.getFreeVariable("anglePointMap") : new HashMap();			HashMap<Integer, Object> map1 = anglePointMap.containsKey(tempSetAction) ? (HashMap<Integer, Float>) anglePointMap.get(tempSetAction) : new HashMap();			partsMap.put(s, modelRenderer);			if (o1 != null) map1.put(i3, o1);			anglePointMap.put(tempSetAction, map1);			modelRenderer.setFreeVariable("anglePointMap", anglePointMap);			if (debug) {				Modchu_Debug.mDebug("ModchuModel_CustomModel	settingDataSetRotationAngles tempSetAction="+tempSetAction);				Modchu_Debug.mDebug("ModchuModel_CustomModel	settingDataSetRotationAngles modelRenderer.getBoxName()="+modelRenderer.getBoxName());				Modchu_Debug.mDebug("ModchuModel_CustomModel	settingDataSetRotationAngles "+(i3 == 0 ? "rotateAngleX" : i3 == 1 ? "rotateAngleY" : i3 == 2 ? "rotateAngleZ" : i3 == 3 ? "rotationPointX" : i3 == 4 ? "rotationPointY" : i3 == 5 ? "rotationPointZ" : null)+"="+o1);				Modchu_Debug.mDebug("ModchuModel_CustomModel	settingDataSetRotationAngles ------------------- settingDataSetRotationAngles rotateAngle or rotationPoint end.");			}			return;		}		if ((s1.equals("setRotateAngle")				| s1.equals("setRotationPoint"))) {			if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	settingDataSetRotationAngles ------------------- settingDataSetRotationAngles setRotateAngle or setRotationPoint start.");			int i2 = s.indexOf("setRotateAngle") > -1 ? 0 : 3;			Object ox = map.containsKey("Float") ? Modchu_CastHelper.Float(map.get("Float")) : 0.0F;			Object oy = map.containsKey("Float1") ? Modchu_CastHelper.Float(map.get("Float1")) : 0.0F;			Object oz = map.containsKey("Float2") ? Modchu_CastHelper.Float(map.get("Float2")) : 0.0F;			List listX = map.containsKey("LinkedList") ? Modchu_CastHelper.LinkedList(map.get("LinkedList")) : map.containsKey("ArrayList") ? Modchu_CastHelper.ArrayList(map.get("ArrayList")) : map.containsKey("List") ? Modchu_CastHelper.List(map.get("List")) : null;			List listY = map.containsKey("LinkedList1") ? Modchu_CastHelper.LinkedList(map.get("LinkedList1")) : map.containsKey("ArrayList1") ? Modchu_CastHelper.ArrayList(map.get("ArrayList1")) : map.containsKey("List1") ? Modchu_CastHelper.List(map.get("List1")) : null;			List listZ = map.containsKey("LinkedList2") ? Modchu_CastHelper.LinkedList(map.get("LinkedList2")) : map.containsKey("ArrayList2") ? Modchu_CastHelper.ArrayList(map.get("ArrayList2")) : map.containsKey("List2") ? Modchu_CastHelper.List(map.get("List2")) : null;			if (tempSetAction != null					&& !tempSetAction.isEmpty()); else tempSetAction = "default";			ModchuModel_ModelRenderer modelRenderer = getModelRenderer(s);			if (modelRenderer != null); else {				if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel	settingDataSetRotationAngles modelRenderer == null !! return.");				return;			}			HashMap<String, HashMap> anglePointMap = modelRenderer.freeVariableContainsKey("anglePointMap") ? (HashMap<String, HashMap>) modelRenderer.getFreeVariable("anglePointMap") : new HashMap();			HashMap<Integer, Object> map1 = anglePointMap.containsKey(tempSetAction) ? (HashMap<Integer, LinkedList>) anglePointMap.get(tempSetAction) : new HashMap();			// TODO			if (listX != null) map1.put(i2, listX);			else if (map.containsKey("Float")) map1.put(i2, ox);			if (listY != null) map1.put(i2 + 1, listY);			else if (map.containsKey("Float1")) map1.put(i2 + 1, oy);			if (listZ != null) map1.put(i2 + 2, listZ);			else if (map.containsKey("Float2")) map1.put(i2 + 2, oz);			anglePointMap.put(tempSetAction, map1);			modelRenderer.setFreeVariable("anglePointMap", anglePointMap);			partsMap.put(s, modelRenderer);			if (debug) {				Modchu_Debug.mDebug("ModchuModel_CustomModel	settingDataSetRotationAngles modelRenderer.getBoxName()="+modelRenderer.getBoxName());				Modchu_Debug.mDebug("ModchuModel_CustomModel	settingDataSetRotationAngles "+(i2 == 0 ? "setRotateAngle(" : "setRotationPoint(")+ox+", "+oy+", "+oz+")");				Modchu_Debug.mDebug("ModchuModel_CustomModel	settingDataSetRotationAngles ------------------- settingDataSetRotationAngles setRotateAngle or setRotationPoint end.");			}			return;		}	}	private List<Object[]> partsTextureAndModelRendererListAdd(List<Object[]> textureAndModelRendererList, ModchuModel_ModelRenderer modelRenderer, Object texture) {		Object[] o = null;		List<ModchuModel_ModelRenderer> list = null;		int i = 0;		if (!textureAndModelRendererList.isEmpty()) {			for(Object[] o2 : textureAndModelRendererList) {				if (o2[0].equals(texture)) {					o = o2;					list = (List<ModchuModel_ModelRenderer>) o[1];					break;				}				i++;			}		}		if (o != null); else {			list = new ArrayList();			o = new Object[] {					texture, list			};		}		if (!list.contains(modelRenderer)) {			list.add(modelRenderer);			o[1] = list;		}		if (textureAndModelRendererList.size() > i) textureAndModelRendererList.set(i, o);		else textureAndModelRendererList.add(o);		return textureAndModelRendererList;	}	private ArrayList getPartsAddChildLiat(ModchuModel_ModelRenderer modelRenderer) {		Object o = modelRenderer.getFreeVariable("partsAddChildList");		return o != null				&& o instanceof ArrayList ? (ArrayList)o : new ArrayList();	}	private void addPartsAddChildList(String s, ModchuModel_ModelRenderer modelRenderer) {		ArrayList list = getPartsAddChildLiat(modelRenderer);		if (!list.contains(s)) {			list.add(s);			modelRenderer.setFreeVariable("partsAddChildList", list);		}	}	public void newMainModelInit() {		int armorType = getArmorType();		String textureName = getMainModelTextureName();		Modchu_Debug.cDebug("newMainModelInit armorType="+armorType+" textureName="+textureName);		if (textureName != null); else return;		Object[] option = null;		Object[] o = ModchuModel_TextureManagerBase.instance.modelNewInstance(null, textureName, true, false, option);		if (o != null				&& o[0] != null) {			mainModel = (MultiModelBaseBiped) o[armorType];			modelType = checkModelType(mainModel);		}		Modchu_Debug.mlDebug1("newMainModelInit mainModel != null ?"+(mainModel != null)+" getClass()="+(mainModel != null ? mainModel.getClass() : "null")+" textureName="+textureName);	}	private void colorSetting(ModchuModel_IEntityCaps entityCaps, int color) {		boolean debug = false;		if (debug) Modchu_Debug.mlDebug1("ModchuModel_CustomModel	colorSetting");		Object model = getModel(baseModel);		Object entity = entityCaps.getCapsValue(entityCaps.caps_Entity);		tempColor = color;		int armorType = getArmorType();		String mapKey = cfgName +"," + color +"," + armorType;		String textureName = getMainModelTextureName();		texture = getTexture(entityCaps, entity, textureName, mainModelDesignationColor > 0 ? mainModelDesignationColor : color);		if (texture != null); else {			if (debug) Modchu_Debug.mlDebug1("ModchuModel_CustomModel	colorSetting mainModelDesignationColor get mainModeltexture="+texture+" mainModelDesignationColor="+mainModelDesignationColor);		}		if (textureListMap.containsKey(mapKey)) {			textureAndModelRendererList = textureListMap.get(mapKey);			//Modchu_Debug.mDebug("textureListMap.get ["+mapKey+"]="+(textureList.get(0)));		} else {			ArrayList<Object[]> tempTextureAndModelRendererList = new ArrayList();			if (partsMap != null					&& !partsMap.isEmpty()) {				int i = 0;				int partsTextureColor;				for (Entry<String, ModchuModel_ModelRenderer> en : partsMap.entrySet()) {					String key = en.getKey();					ModchuModel_ModelRenderer modelRenderer = en.getValue();					partsTextureColor = Modchu_CastHelper.Int(modelRenderer.getFreeVariable("partsTextureColor"));					String s1 = Modchu_CastHelper.String(modelRenderer.getFreeVariable("textureName"));					if (s1 != null) {						int i2 = s1.indexOf(";");						if (i2 > -1) s1 = s1.substring(0, i2);						Object s2 = ((ModchuModel_IEntityCaps) model).getCapsValue(entityCaps, ((ModchuModel_IEntityCaps) model).caps_texture, s1, partsTextureColor == -1 ? color : (int) partsTextureColor);						//Modchu_Debug.mDebug("ModchuModel_CustomModel	colorSetting add "+s1+" color="+(partsTextureColor == -1 ? color : (int) partsTextureColor)+" texture="+s2);						partsTextureAndModelRendererListAdd(tempTextureAndModelRendererList, modelRenderer, armorType == 0 ? s2 : s1);					}					i++;				}				if (!tempTextureAndModelRendererList.isEmpty()) {					textureListMap.put(mapKey, tempTextureAndModelRendererList);					//Modchu_Debug.mDebug("textureListMap.put ["+mapKey+"]="+(tempTextureList.get(0)));				}				textureAndModelRendererList = tempTextureAndModelRendererList;			}		}		if (debug) Modchu_Debug.mlDebug1("ModchuModel_CustomModel	colorSetting mainModeltextureName="+cfgMainModelTextureName+" color="+color+" mainModeltexture="+texture);	}	private void allShowModelSetting(boolean b) {		Object model = getModel();		ModchuModel_ModelRenderer modelRenderer;		for (int i = 0; i < modelRendererFieldsMap.size(); i++) {			try {				modelRenderer = (ModchuModel_ModelRenderer) modelRendererFieldsMap.get(i).get(model);				if (modelRenderer != null) {					if (b) b = showModelMemoryMapGet(modelRenderer);					((ModchuModel_ModelRenderer) modelRendererFieldsMap.get(i).get(model)).showModel = b;					//Modchu_Debug.mDebug("allShowModelSetting modelRendererFieldsMap.get("+i+").getName() = "+modelRendererFieldsMap.get(i).getName()+" b="+b);				}			} catch (Exception e) {				e.printStackTrace();			}		}	}	private void customModelShowModelSetting(ModchuModel_IEntityCaps entityCaps, List<ModchuModel_ModelRenderer> list, boolean b) {		if (partsMap != null				&& !partsMap.isEmpty()) {			int i = 0;			boolean b1;			for (Entry<String, ModchuModel_ModelRenderer> en : partsMap.entrySet()) {				String key = en.getKey();				ModchuModel_ModelRenderer modelRenderer = en.getValue();				b1 = false;				if (b) b = !getCustomModelShowModelMemoryMap().isEmpty() ? customModelShowModelMemoryMapGet(modelRenderer) : true;				if (list != null						&& !list.isEmpty()) {					for(ModchuModel_ModelRenderer tempModelRenderer : list) {						if (tempModelRenderer.equals(modelRenderer)) {							b1 = b;							break;						}					}				} else {					b1 = b;				}				//Modchu_Debug.cDebug("customModelShowModelSetting "+partsTextureNameMap.get(i)+" customModelshowModelMemoryListGet(parts["+i+"])="+(customModelshowModelMemoryListGet(modelRenderer))+" s="+s+" b="+b+" b1="+b1);				modelRenderer.showModel = b1;				i++;			}		}	}	private void customModelShowModelSetting(ModchuModel_IEntityCaps entityCaps, ModchuModel_ModelRenderer modelRenderer, boolean b) {		if (modelRenderer != null) {			boolean debug = false;			int armorType = getArmorType();			boolean b1 = false;			if (b) {				Object model = getModel(baseModel);				b1 = Modchu_EntityCapsHelper.getCapsValueInt(baseModel, entityCaps, entityCaps.caps_showModelSettingBoolean, modelRenderer, Modchu_EntityCapsHelper.getCapsValueInt(baseModel, entityCaps, ((ModchuModel_IEntityCaps) model).caps_armorType)) != 0 ? true : false;				if (b1) {					// viewType判定					byte viewType = Modchu_CastHelper.Byte(modelRenderer.getFreeVariable("viewType"));					//if (debug) Modchu_Debug.cDebug("customModelShowModelSetting viewType armorType="+armorType+" viewType="+viewType);					if (viewType > 0) {						if ((armorType == 0								&& viewType == viewTypeMainOnly)								| (armorType > 0										&& viewType == viewTypeArmorOnly)) {							//if (debug) Modchu_Debug.cDebug("customModelShowModelSetting viewType false not setteing.");						} else {							//if (debug) Modchu_Debug.cDebug("customModelShowModelSetting viewType false setteing.");							b1 = false;						}					}					if (b1							&& armorType > 0) {						// armorPartsType判定						//if (debug) Modchu_Debug.cDebug("customModelShowModelSetting armorPartsType showArmorPartsNumber="+showArmorPartsNumber);						boolean[] b0 = Modchu_CastHelper.BooleanArray(modelRenderer.getFreeVariable("armorPartsType"));						//if (debug) Modchu_Debug.cDebug("customModelShowModelSetting armorPartsType b0="+b0);						int i2 = 3 - showArmorPartsNumber;						if (b0 != null								&& b0.length > i2) {							//if (debug) Modchu_Debug.cDebug("customModelShowModelSetting armorPartsType b0["+i2+"]="+b0[i2]);							if (!b0[i2]) b1 = false;						}					}				}				//Modchu_Debug.mDebug("ModchuModel_CustomModel	customModelShowModelSetting 1 b1="+b1);			}			//Modchu_Debug.mDebug("ModchuModel_CustomModel	customModelShowModelSetting b="+b);			modelRenderer.showModel = b1;			//Modchu_Debug.mDebug("ModchuModel_CustomModel	customModelShowModelSetting b1="+b1);		}	}	public int showArmorParts(ModchuModel_IEntityCaps entityCaps, int i, int i2) {		if (!isMaidModel()) return -1;		Object model = getModel(baseModel);		if (model != null); else return -1;		if (entityCaps != null); else {			((ModchuModel_IEntityCaps) model).setCapsValue(entityCaps, ((ModchuModel_IEntityCaps) model).caps_armorType, i2 == 1 ? 2 : 1);		}		showArmorPartsNumber = i;		return model != null				&& !(model instanceof MultiModelCustom) ?						Modchu_CastHelper.Int(model != null ? Modchu_Reflect.invokeMethod(model.getClass(), "showArmorParts", new Class[]{ int.class, int.class }, model, new Object[]{ i, i2 }) : -1) :							model instanceof MultiModelCustom ? -2 : -1;	}	public String getUsingTexture() {		return null;	}	public void defaultSkirtFloatsAddChild() {		Object model = getModel();		if (model != null); else return;		if (model instanceof MultiModelSkirtFloats) {			if (model instanceof MultiModelCustom) ((MultiModelCustom) model).superDefaultSkirtFloatsAddChild();			else ((MultiModelSkirtFloats) model).defaultSkirtFloatsAddChild();		}	}	public void defaultAddChild() {		getShowModelMemoryMap().clear();		textureListMap.clear();		getCustomModelShowModelMemoryMap().clear();		//modelRendererFieldsMap.clear();		Object model = getModel();		clearAllAddChild();		if (model != null) {			if (model instanceof MultiModelCustom) ((MultiModelCustom) model).superDefaultAddChild();			else if (model instanceof MultiModelBaseBiped) ((MultiModelBaseBiped) model).defaultAddChild();		}		defaultCustomAddChild();	}	private void clearAllAddChild() {		boolean b1;		for (Entry<String, ModchuModel_ModelRenderer> en : partsMap.entrySet()) {			String key = en.getKey();			ModchuModel_ModelRenderer modelRenderer = en.getValue();			modelRenderer.clearChildModels();			modelRenderer.clearBoneChildModels();			modelRenderer.clearBoneSpecialChildModels();;		}	}	private void defaultCustomAddChild() {		Modchu_Debug.cDebug("defaultCustomAddChild");		boolean b1;		ArrayList<String> list;		Modchu_Debug.cDebug("defaultCustomAddChild partsMap.size()="+partsMap.size());		for (Entry<String, ModchuModel_ModelRenderer> en : partsMap.entrySet()) {			String key = en.getKey();			ModchuModel_ModelRenderer modelRenderer = en.getValue();			list = getPartsAddChildLiat(modelRenderer);			Modchu_Debug.cDebug("defaultCustomAddChild name="+key);			Modchu_Debug.cDebug("defaultCustomAddChild boxName="+modelRenderer.getBoxName());			Modchu_Debug.cDebug("defaultCustomAddChild list.size()="+list.size());			if (list != null					&& !list.isEmpty()) {				for (String s1 : list) {					partsAddChildSetting(s1, modelRenderer);				}			}		}	}	public void actionPartsAddChild() {		Object model = getModel();		if (model != null); else return;		if (model instanceof MultiModelCustom) ((MultiModelCustom) model).superActionPartsAddChild();		else if (model instanceof MultiModelAction) ((MultiModelAction) model).actionPartsAddChild();	}	public void boneProcessing(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model != null); else return;		if (model instanceof MultiModelCustom) ((MultiModelCustom) model).superBoneProcessing(f, f1, f2, f3, f4, f5, entityCaps);		else if (model instanceof MultiModelAction) ((MultiModelAction) model).boneProcessing(f, f1, f2, f3, f4, f5, entityCaps);	}	public Object getModel() {		return getModel(null);	}	public Object getModel(Object model) {		if (model != null) model = Modchu_Main.getModchuCharacteristicObjectMaster(model);		return model != null ? model : mainModel != null ? mainModel : baseModel;	}	private String obfuscationNameCheck(String s) {/*		if (!Modchu_Main.isRelease()				| Modchu_Main.isForge) return s;		String[] s1 = {				"bipedHead", "bipedHeadwear", "bipedBody",				"bipedRightArm", "bipedLeftArm", "bipedRightLeg", "bipedLeftLeg", "bipedCloak",				"bipedEars"		};		String[] s2 = {				"c", "d", "e",				"f", "g", "h", "i", "j",				"k"		};		for(int i = 0; i < s1.length; i++) {			if (s.equalsIgnoreCase(s1[i])) return s2[i];		}*/		return s;	}	public static String getPartsTypeString(byte by) {		String s = null;		switch (by) {		case normal:			s = "normal";			break;		case eyeR:			s = "eyeR";			break;		case eyeL:			s = "eyeL";			break;		case ear:			s = "ear";			break;		case tail:			s = "tail";			break;		case breast:			s = "breast";			break;		}		return s;	}	private Class getIEntityCapsClass() {		return modelType == modelType_LMM ? Modchu_LMMManager.getLMMIModelCapsClass() : modelType == modelType_PFLM ? ModchuModel_IEntityCaps.class : null;	}	private int getArmorType() {		float[] f = getArmorModelsSize();		//Modchu_Debug.mlDebug("getArmorType() modelSize="+((MultiModelCustom) baseModel).modelSize+" f[0]="+f[0]+" f[1]="+f[1]);		Object model = getModel(baseModel);		return ((MultiModelCustom) model).modelSize == f[0] ? 1 : ((MultiModelCustom) model).modelSize == f[1] ? 2 : 0;		//return Modchu_CastHelper.Int(((MultiModelCustom) baseModel).getCapsValue(baseModel.caps_armorType));		//return Modchu_EntityCapsHelper.getCapsValueInt(baseModel, baseModel.caps_armorType);	}	private boolean getIsRendering(ModchuModel_IEntityCaps entityCaps, int i) {		Object model = getModel(baseModel);		Object entity = ((MultiModelBaseBiped) model).getCapsValue(entityCaps, entityCaps.caps_Entity);		if (entityTypeIsLMMCheck(entityCaps)				| entityTypeIsModchuLMMCheck(entityCaps)) {			boolean isInvisible = entity != null ? Modchu_AS.getBoolean(Modchu_AS.entityIsInvisible, entity) : false;			if (i == 0					&& (!ModchuModel_ConfigData.useInvisibilityBody					| (ModchuModel_ConfigData.useInvisibilityBody					&& !isInvisible))) return true;			if (i > 0					&& (!ModchuModel_ConfigData.useInvisibilityArmor					| (ModchuModel_ConfigData.useInvisibilityArmor					&& !isInvisible))) return true;			return false;		}		return allRendering ? true : Modchu_EntityCapsHelper.getCapsValueBoolean(entityCaps, entityCaps.caps_isRendering, (Object)i);	}	private Object getTexture(ModchuModel_IEntityCaps entityCaps, Object entity, String s, int i) {		return getTexture(entityCaps, entity, s, i, null);	}	private Object getTexture(ModchuModel_IEntityCaps entityCaps, Object entity, String s, int i, Object itemStack) {		boolean debug = false;		int armorType = getArmorType();		String mapKey = cfgName +","+ s +"," + i +"," + armorType;		if (mainTextureMap.containsKey(mapKey)) return mainTextureMap.get(mapKey);		Object model = getModel(baseModel);		if (debug) {			Modchu_Debug.mlDebug("ModchuModel_CustomModel	getTexture s="+s+" i="+i+" armorType="+armorType);			Modchu_Debug.mlDebug("ModchuModel_CustomModel	getTexture itemStack="+itemStack);		}		Object s1 = armorType < 1 ?				entityCaps.getCapsValue(entityCaps.caps_texture, s, i) :					entityCaps.getCapsValue(entityCaps.caps_armorTexture, s, armorType == 1 ? 64 : 80, itemStack, debug);		if (s1 != null) {			if (debug) Modchu_Debug.mlDebug("ModchuModel_CustomModel	getTexture s1="+s1);		} else {			if (debug) Modchu_Debug.mlDebug("ModchuModel_CustomModel	getTexture s1 == null !!");		}		if (s1 != null) mainTextureMap.put(mapKey, s1);		return s1;	}	private int getMaidColor(ModchuModel_IEntityCaps entityCaps) {		Object entity = entityCaps.getCapsValue(entityCaps.caps_Entity);		Object o = null;		Object currentScreen = Modchu_AS.get(Modchu_AS.minecraftCurrentScreen);		if (guiTextureSelectFlag) {			if (tempSelectPanel != null) {				if (tempGuiEntitySelectEntity != null); else tempGuiEntitySelectEntity = Modchu_Reflect.getFieldObject(Modchu_LMMManager.getLMMGuiTextureSlotClass(), "entity", tempSelectPanel);				if (tempGuiEntitySelectEntity != null) {					allRendering = true;					o = Modchu_Reflect.invokeMethod(Modchu_LMMManager.getMMMEntitySelectClass(), "getColor", tempGuiEntitySelectEntity);					//Modchu_Debug.Debug("getMaidColor MMM_GuiTextureSelect o="+o);				}			}		} else if (entityTypeIsLMMCheck(entityCaps)) {			Class LMM_EntityLittleMaid = Modchu_LMMManager.getLMMEntityLittleMaidClass();			if (LMM_EntityLittleMaid != null					&& LMM_EntityLittleMaid.isInstance(entity)) {				if (Modchu_Main.getMinecraftVersion() > 159) {					Object textureData = Modchu_Reflect.getFieldObject(LMM_EntityLittleMaid, "textureData", entity);					if (textureData != null) o = Modchu_Reflect.invokeMethod(ModchuModel_Main.isLMMX ? "mmmlibx.lib.MMM_TextureData" : "MMM_TextureData", "getColor", textureData);				} else{					if (Modchu_Main.getMinecraftVersion() < 160) o = Modchu_Reflect.getFieldObject(LMM_EntityLittleMaid, "maidColor", entity);				}			}			//allRendering = true;			//Modchu_Debug.Debug("getMaidColor mod_LMM_littleMaidMob");		} else {			//Modchu_Debug.Debug("getMaidColor !LMM ?"+(entity.getClass()));			Object model = getModel(baseModel);			Modchu_Debug.Debug("getMaidColor baseModel ="+baseModel);			Modchu_Debug.Debug("getMaidColor model ="+model);			o = Modchu_EntityCapsHelper.getCapsValueInt(model, entityCaps, ((MultiModelCustom) model).caps_maidColor, entity);		}		if (o != null) {			//Modchu_Debug.Debug("getMaidColor o="+o);			return Modchu_CastHelper.Int(o);		}		return 0;	}	public String getMainModelTextureName() {		int armorType = getArmorType();		String s = null;		switch(armorType) {		case 0:			s = cfgMainModelTextureName;			break;		case 1:		case 2:			s = cfgMainModelTextureArmorName != null				&& !cfgMainModelTextureArmorName.isEmpty() ? cfgMainModelTextureArmorName : cfgMainModelTextureName;			break;		}		return s;	}	private HashMap<ModchuModel_ModelRenderer, Boolean> getShowModelMemoryMap() {		return showModelMemoryMap;	}	private boolean showModelMemoryMapGet(ModchuModel_ModelRenderer modelRenderer) {		return showModelMemoryMap.containsKey(modelRenderer) ? showModelMemoryMap.get(modelRenderer) : false;	}	private void showModelMemoryMapPut(ModchuModel_ModelRenderer modelRenderer, boolean b) {		showModelMemoryMap.put(modelRenderer, b);	}	private HashMap<ModchuModel_ModelRenderer, Boolean> getCustomModelShowModelMemoryMap() {		return customModelShowModelMemoryMap;	}	private boolean customModelShowModelMemoryMapGet(ModchuModel_ModelRenderer modelRenderer) {		//Modchu_Debug.mDebug("ModchuModel_CustomModel	customModelShowModelMemoryMapGet modelRenderer="+modelRenderer);		return customModelShowModelMemoryMap.containsKey(modelRenderer) ? customModelShowModelMemoryMap.get(modelRenderer) : false;	}	private void customModelShowModelMemoryMapPut(ModchuModel_ModelRenderer modelRenderer, boolean b) {		//Modchu_Debug.mDebug("ModchuModel_CustomModel	customModelShowModelMemoryMapPut modelRenderer="+modelRenderer);		customModelShowModelMemoryMap.put(modelRenderer, b);	}	public ModchuModel_ModelRenderer getBipedHead(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) return ((MultiModelCustom) model).bipedHead;		if (model instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) model).bipedHead;		Object o = Modchu_Reflect.getFieldObject(model.getClass(), "bipedHead", model);		if (o != null); else o = Modchu_Reflect.getFieldObject(model.getClass(), "field_78116_c", model);		return o != null				&& o instanceof ModchuModel_ModelRenderer ? (ModchuModel_ModelRenderer) o : null;	}	public ModchuModel_ModelRenderer getDominantArm(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		int i = Modchu_EntityCapsHelper.getCapsValueInt(baseModel, entityCaps, entityCaps.caps_dominantArm, entityCaps.getCapsValue(entityCaps.caps_armorType));		if (model instanceof MultiModelCustom) return i == 0 ? ((MultiModelCustom) model).bipedRightArm : ((MultiModelCustom) model).bipedLeftArm;		if (model instanceof MultiModelBaseBiped) return i == 0 ? ((MultiModelBaseBiped) model).bipedRightArm : ((MultiModelBaseBiped) model).bipedLeftArm;		Object o = Modchu_Reflect.getFieldObject(model.getClass(), i == 0 ? "bipedRightArm" : "bipedLeftArm", model);		if (o != null); else o = Modchu_Reflect.getFieldObject(model.getClass(), i == 0 ? "field_78112_f" : "field_78113_g", model);		return o != null				&& o instanceof ModchuModel_ModelRenderer ? (ModchuModel_ModelRenderer) o : null;	}	public ModchuModel_ModelRenderer getBipedBody(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) return ((MultiModelCustom) model).bipedBody;		if (model instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) model).bipedBody;		Object o = Modchu_Reflect.getFieldObject(model.getClass(), "bipedBody", model);		if (o != null); else o = Modchu_Reflect.getFieldObject(model.getClass(), "field_78115_e", model);		return o != null				&& o instanceof ModchuModel_ModelRenderer ? (ModchuModel_ModelRenderer) o : null;	}	public ModchuModel_ModelRenderer getBipedRightArm(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) return ((MultiModelCustom) model).bipedRightArm;		if (model instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) model).bipedRightArm;		Object o = Modchu_Reflect.getFieldObject(model.getClass(), "bipedRightArm", model);		if (o != null); else o = Modchu_Reflect.getFieldObject(model.getClass(), "field_78112_f", model);		return o != null				&& o instanceof ModchuModel_ModelRenderer ? (ModchuModel_ModelRenderer) o : null;	}	public ModchuModel_ModelRenderer getBipedLeftArm(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) return ((MultiModelCustom) model).bipedLeftArm;		if (model instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) model).bipedLeftArm;		Object o = Modchu_Reflect.getFieldObject(model.getClass(), "bipedLeftArm", model);		if (o != null); else o = Modchu_Reflect.getFieldObject(model.getClass(), "field_78113_g", model);		return o != null				&& o instanceof ModchuModel_ModelRenderer ? (ModchuModel_ModelRenderer) o : null;	}	public ModchuModel_ModelRenderer getBipedRightLeg(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) return ((MultiModelCustom) model).bipedRightLeg;		if (model instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) model).bipedRightLeg;		Object o = Modchu_Reflect.getFieldObject(model.getClass(), "bipedRightLeg", model);		if (o != null); else o = Modchu_Reflect.getFieldObject(model.getClass(), "field_78123_h", model);		return o != null				&& o instanceof ModchuModel_ModelRenderer ? (ModchuModel_ModelRenderer) o : null;	}	public ModchuModel_ModelRenderer getBipedLeftLeg(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) return ((MultiModelCustom) model).bipedLeftLeg;		if (model instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) model).bipedLeftLeg;		Object o = Modchu_Reflect.getFieldObject(model.getClass(), "bipedLeftLeg", model);		if (o != null); else o = Modchu_Reflect.getFieldObject(model.getClass(), "field_78124_i", model);		return o != null				&& o instanceof ModchuModel_ModelRenderer ? (ModchuModel_ModelRenderer) o : null;	}	public ModchuModel_ModelRenderer getNotDominantArm(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		int i = Modchu_EntityCapsHelper.getCapsValueInt(baseModel, entityCaps, entityCaps.caps_dominantArm, entityCaps.getCapsValue(entityCaps.caps_armorType));		if (model instanceof MultiModelCustom) return i == 0 ? ((MultiModelCustom) model).bipedLeftArm : ((MultiModelCustom) model).bipedRightArm;		if (model instanceof MultiModelBaseBiped) return i == 0 ? ((MultiModelBaseBiped) model).bipedLeftArm : ((MultiModelBaseBiped) model).bipedRightArm;		Object o = Modchu_Reflect.getFieldObject(model.getClass(), i == 0 ? "bipedLeftArm" : "bipedRightArm", model);		if (o != null); else o = Modchu_Reflect.getFieldObject(model.getClass(), i == 0 ? "field_78113_g" : "field_78112_f", model);		return o != null				&& o instanceof ModchuModel_ModelRenderer ? (ModchuModel_ModelRenderer) o : null;	}	public void showAllParts(Object o) {/*		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superShowAllParts(entityCaps);		}		if (model instanceof MultiModelBaseBiped) ((MultiModelBaseBiped) model).showAllParts(entityCaps);		boolean b = Modchu_EntityCapsHelper.getCapsValueInt(model, entityCaps.caps_armorType) == 0;		for (Entry<String, ModchuModel_ModelRenderer> en : partsMap.entrySet()) {			ModchuModel_ModelRenderer o = en.getValue();			o.showModel = b;			customModelShowModelMemoryMapPut(o, o.showModel);		}*/	}	private Object getEntityCaps(Object entityCaps) {		if (modelType != modelType_LMM) return entityCaps;		if (entityCaps instanceof ModchuModel_IEntityCaps) {			ModchuModel_IEntityCaps entityCaps1 = (ModchuModel_IEntityCaps) entityCaps;			if (entityTypeIsLMMCheck(entityCaps1)) {				return entityCaps1.getCapsValue(entityCaps1.caps_subEntityCaps);			}			if (Modchu_EntityCapsHelper.getCapsValueByte(baseModel, entityCaps1, entityCaps1.caps_EntityType) == entityCaps1.entityType_PFLM) {				return ModchuModel_ModelDataMaster.instance.getLMMCaps(entityCaps1);			}		}		return entityCaps;	}	public void worldEventLoad(Object event) {	}	private Object[] capsObjectCheck(Object[] pArg) {		if (modelType != modelType_LMM) return pArg;		if (pArg != null); else return pArg;		Class Modchu_ModelBase = Modchu_Main.getModchuCharacteristicClass("Modchu_ModelBase");		for (int i = 0; i < pArg.length; i++) {			if (pArg[i] instanceof ModchuModel_IEntityCaps					&& Modchu_ModelBase != null					&& !(Modchu_ModelBase.isInstance(pArg[i]))					&& !(pArg[i] instanceof Modchu_ModelBaseMaster)) pArg[i] = getEntityCaps(pArg[i]);		}		return pArg;	}	private byte checkModelType(Object model) {		if (mainModel != null); else return modelType_PFLM;		if (ModchuModel_Main.isLMMModel(mainModel)) return modelType_LMM;		return modelType_PFLM;	}	private boolean isMaidModel() {		return modelType == modelType_PFLM				| modelType == modelType_LMM;	}	private boolean entityTypeIsLMMCheck(ModchuModel_IEntityCaps entityCaps) {		return entityCaps != null ? Modchu_EntityCapsHelper.getCapsValueByte(baseModel, entityCaps, entityCaps.caps_EntityType) == entityCaps.entityType_LMM : false;	}	private boolean entityTypeIsModchuLMMCheck(ModchuModel_IEntityCaps entityCaps) {		return entityCaps != null ? Modchu_EntityCapsHelper.getCapsValueByte(baseModel, entityCaps, entityCaps.caps_EntityType) == entityCaps.entityType_ModchuLMM : false;	}	public void headMountRenderItems(ModchuModel_IEntityCaps entityCaps, Object itemstack, int addSupport) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			 ((MultiModelCustom) model).superHeadMountRenderItems(entityCaps, itemstack, addSupport);			return;		}		if (model instanceof MultiModelBaseBiped) ((MultiModelBaseBiped) model).headMountRenderItems(entityCaps, itemstack, addSupport);	}	public Object getRightArm(ModchuModel_IEntityCaps entityCaps) {		return getBipedRightArm(entityCaps);	}	public boolean armSwingFlag(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			 return ((MultiModelCustom) model).superArmSwingFlag(entityCaps);		}		if (model instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) model).armSwingFlag(entityCaps);		return false;	}	public void armsinit(float f, float f1) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superArmsinit(f, f1);			return;		}		if (model instanceof MultiModelBaseBiped) ((MultiModelBaseBiped) model).armsinit(f, f1);	}	public void defaultAddChildSetting() {		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superDefaultAddChildSetting();			return;		}		if (model instanceof MultiModel) ((MultiModel) model).defaultAddChildSetting();	}	public void skirtFloats(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superSkirtFloats(f, f1, f2, f3, f4, f5, entityCaps);			return;		}		if (model instanceof MultiModelSkirtFloats) ((MultiModelSkirtFloats) model).skirtFloats(f, f1, f2, f3, f4, f5, entityCaps);	}	public void setMotionDefaultPause(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superSetMotionDefaultPause(f, f1, f2, f3, f4, f5, entityCaps);			return;		}		if (model instanceof MultiModelAction) ((MultiModelAction) model).setMotionDefaultPause(f, f1, f2, f3, f4, f5, entityCaps);	}	public void armSwing(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superArmSwing(f, f1, f2, f3, f4, f5, entityCaps);			return;		}		if (model instanceof MultiModel) ((MultiModel) model).armSwing(f, f1, f2, f3, f4, f5, entityCaps);	}	public ModchuModel_ModelRenderer getArms(int i) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			return ((MultiModelCustom) model).superGetArms(i);		}		if (model instanceof MultiModelBaseBiped) ((MultiModelBaseBiped) model).getArms(i);		return null;	}	public ModchuModel_ModelRenderer getHeadMount() {		Object model = getModel();		if (model instanceof MultiModelCustom) {			return ((MultiModelCustom) model).superGetHeadMount();		}		if (model instanceof MultiModelBaseBiped) ((MultiModelBaseBiped) model).getHeadMount();		return null;	}	public void motionModelCorrectionBefore(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superMotionModelCorrectionBefore(f, f1, f2, f3, f4, f5, entityCaps);			return;		}		if (model instanceof MultiModelAction) ((MultiModelAction) model).motionModelCorrectionBefore(f, f1, f2, f3, f4, f5, entityCaps);	}	public void motionModelCorrectionAfter(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superMotionModelCorrectionAfter(f, f1, f2, f3, f4, f5, entityCaps);			return;		}		if (model instanceof MultiModelAction) ((MultiModelAction) model).motionModelCorrectionAfter(f, f1, f2, f3, f4, f5, entityCaps);	}	public float getLeashOffset(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			return ((MultiModelCustom) model).superGetLeashOffset(entityCaps);		}		if (model instanceof MultiModelBaseBiped) ((MultiModelBaseBiped) model).getLeashOffset(entityCaps);		return 0.4F;	}	public boolean isItemHolder(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			return ((MultiModelCustom) model).superIsItemHolder(entityCaps);		}		if (model instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) model).isItemHolder(entityCaps);		return false;	}	public void afterInit(float f, float f1) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superAfterInit(f, f1);			return;		}		if (model instanceof MultiModelAction) ((MultiModelAction) model).afterInit(f, f1);	}	public void bonesInit(float f, float f1) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superBonesInit(f, f1);			return;		}		if (model instanceof MultiModelAction) ((MultiModelAction) model).bonesInit(f, f1);	}	public void actionInit(ModchuModel_IEntityCaps entityCaps, int i) {		Modchu_Debug.mDebug("ModchuModel_CustomModel	actionInit");		Modchu_Reflect.invokeMethod(getClass(), "actionInit"+i, new Class[]{ ModchuModel_IEntityCaps.class }, this, new Object[]{ entityCaps }, -1);		settingModelRendererFieldsMap();		defaultCustomAddChild();	}	public void actionInit1(ModchuModel_IEntityCaps entityCaps) {		Modchu_Debug.mDebug("ModchuModel_CustomModel	actionInit1");		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superActionInit1(entityCaps);			return;		}		if (model instanceof MultiModelAction) {			((MultiModelAction) model).actionInit1(entityCaps);			Modchu_Debug.mDebug("ModchuModel_CustomModel	actionInit1 bipedRightArm.showModel="+((MultiModelAction) model).bipedRightArm.showModel);		}	}	public void actionInit2(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superActionInit2(entityCaps);			return;		}		if (model instanceof MultiModelAction) ((MultiModelAction) model).actionInit2(entityCaps);	}	public void actionInit3(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superActionInit3(entityCaps);			return;		}		if (model instanceof MultiModelAction) ((MultiModelAction) model).actionInit3(entityCaps);	}	public void actionInit4(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superActionInit4(entityCaps);			return;		}		if (model instanceof MultiModelAction) ((MultiModelAction) model).actionInit4(entityCaps);	}	public void actionInit5(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superActionInit5(entityCaps);			return;		}		if (model instanceof MultiModelAction) ((MultiModelAction) model).actionInit5(entityCaps);	}	public void actionInit6(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superActionInit6(entityCaps);			return;		}		if (model instanceof MultiModelAction) ((MultiModelAction) model).actionInit6(entityCaps);	}	public void actionInit7(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superActionInit7(entityCaps);			return;		}		if (model instanceof MultiModelAction) ((MultiModelAction) model).actionInit7(entityCaps);	}	public void actionInit8(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superActionInit8(entityCaps);			return;		}		if (model instanceof MultiModelAction) ((MultiModelAction) model).actionInit8(entityCaps);	}	public void actionInit9(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superActionInit9(entityCaps);			return;		}		if (model instanceof MultiModelAction) ((MultiModelAction) model).actionInit9(entityCaps);	}	public void actionInit30(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superActionInit9(entityCaps);			return;		}		if (model instanceof MultiModelAction) ((MultiModelAction) model).actionInit9(entityCaps);	}	public void actionRelease(ModchuModel_IEntityCaps entityCaps, int i) {		Modchu_Debug.mDebug("ModchuModel_CustomModel	actionRelease");		baseModel.superActionRelease(entityCaps, i);		allShowModelSetting(false);		allShowModelMemoryRead();		customModelShowModelMemoryRead();		Modchu_Reflect.invokeMethod(getClass(), "actionRelease"+i, new Class[]{ ModchuModel_IEntityCaps.class }, this, new Object[]{ entityCaps }, -1);		defaultCustomAddChild();		//changeModel(entityCaps);	}	public void actionRelease1(ModchuModel_IEntityCaps entityCaps) {		Modchu_Debug.mDebug("ModchuModel_CustomModel	actionRelease1");		clearAllAddChild();		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superActionRelease1(entityCaps);		} else if (model instanceof MultiModelAction) {			((MultiModelAction) model).actionRelease1(entityCaps);		}		//defaultAddChild();		//init(cfgName, initF, initF1);		//entityCaps.setCapsValue(entityCaps.caps_runActionNumber, 2);		//setLivingAnimationsLM(entityCaps, 0.0F, 0.0F, 0);		//Modchu_Debug.mDebug("ModchuModel_CustomModel	actionRelease1 end.");	}	public void actionRelease2(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superActionRelease2(entityCaps);			return;		}		if (model instanceof MultiModelAction) ((MultiModelAction) model).actionRelease2(entityCaps);	}	public void actionRelease3(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superActionRelease3(entityCaps);			return;		}		if (model instanceof MultiModelAction) ((MultiModelAction) model).actionRelease3(entityCaps);	}	public void actionRelease4(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superActionRelease4(entityCaps);			return;		}		if (model instanceof MultiModelAction) ((MultiModelAction) model).actionRelease4(entityCaps);	}	public void actionRelease5(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superActionRelease5(entityCaps);			return;		}		if (model instanceof MultiModelAction) ((MultiModelAction) model).actionRelease5(entityCaps);	}	public void actionRelease6(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superActionRelease6(entityCaps);			return;		}		if (model instanceof MultiModelAction) ((MultiModelAction) model).actionRelease6(entityCaps);	}	public void actionRelease7(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superActionRelease7(entityCaps);			return;		}		if (model instanceof MultiModelAction) ((MultiModelAction) model).actionRelease7(entityCaps);	}	public void actionRelease8(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superActionRelease8(entityCaps);			return;		}		if (model instanceof MultiModelAction) ((MultiModelAction) model).actionRelease8(entityCaps);	}	public void actionRelease9(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superActionRelease9(entityCaps);			return;		}		if (model instanceof MultiModelAction) ((MultiModelAction) model).actionRelease9(entityCaps);	}	public void actionRelease30(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superActionRelease30(entityCaps);			return;		}		if (model instanceof MultiModelAction) ((MultiModelAction) model).actionRelease30(entityCaps);	}	public void action(float f, float f1, float f2, float f3, float f4, float f5, int i, ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superAction(f, f1, f2, f3, f4, f5, i, entityCaps);			return;		}		if (model instanceof MultiModelAction) ((MultiModelAction) model).action(f, f1, f2, f3, f4, f5, i, entityCaps);		Modchu_Reflect.invokeMethod(getClass(), "action"+i, new Class[]{ float.class, float.class, float.class, float.class, float.class, float.class, int.class, ModchuModel_IEntityCaps.class }, this, new Object[]{ f, f1, f2, f3, f4, f5, i, entityCaps }, -1);	}	public void action1(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IEntityCaps entityCaps) {		Modchu_Debug.mDebug("ModchuModel_CustomModel	action1");	}	public void action1Reset(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superAction1Reset(f, f1, f2, f3, f4, f5, entityCaps);			return;		}		if (model instanceof MultiModelAction) ((MultiModelAction) model).action1Reset(f, f1, f2, f3, f4, f5, entityCaps);	}	public void action2(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IEntityCaps entityCaps) {	}	public void action3(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IEntityCaps entityCaps) {	}	public void action4(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IEntityCaps entityCaps) {	}	public void action5(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IEntityCaps entityCaps) {	}	public void action6(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IEntityCaps entityCaps) {	}	public void action7(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IEntityCaps entityCaps) {	}	public void action8(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IEntityCaps entityCaps) {	}	public void action9(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IEntityCaps entityCaps) {	}	public void action30(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IEntityCaps entityCaps) {	}	public void setArmorBipedOtherShowModel(ModchuModel_IEntityCaps entityCaps, boolean b) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			((MultiModelCustom) model).superSetArmorBipedOtherShowModel(entityCaps, b);			return;		}		if (model instanceof MultiModelAction) ((MultiModelAction) model).setArmorBipedOtherShowModel(entityCaps, b);	}	public int[] getMotionModelRendererSettingInt(String s) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			 return ((MultiModelCustom) model).superGetMotionModelRendererSettingInt(s);		}		if (model instanceof MultiModelAction) return ((MultiModelAction) model).getMotionModelRendererSettingInt(s);		return null;	}	public HashMap<String, String> getMotionRenameMap() {		Object model = getModel();		if (model instanceof MultiModelCustom) {			 return ((MultiModelCustom) model).superGetMotionRenameMap();		}		if (model instanceof MultiModelAction) return ((MultiModelAction) model).getMotionRenameMap();		return null;	}	public void setMotionRenameMap(HashMap map) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			 ((MultiModelCustom) model).superSetMotionRenameMap(map);			 return;		}		if (model instanceof MultiModelAction) ((MultiModelAction) model).setMotionRenameMap(map);	}	public String getMotionRenameMap(String s) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			 return ((MultiModelCustom) model).superGetMotionRenameMap(s);		}		if (model instanceof MultiModelAction) return ((MultiModelAction) model).getMotionRenameMap(s);		return null;	}	public void putMotionRenameMap(String s, String s1) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			 ((MultiModelCustom) model).superPutMotionRenameMap(s, s1);			 return;		}		if (model instanceof MultiModelAction) ((MultiModelAction) model).putMotionRenameMap(s, s1);	}	public void motionRenameMapClear() {		Object model = getModel();		if (model instanceof MultiModelCustom) {			 ((MultiModelCustom) model).superMotionRenameMapClear();			 return;		}		if (model instanceof MultiModelAction) ((MultiModelAction) model).motionRenameMapClear();	}	public ModchuModel_ModelRenderer getStringModelRendererMap(String s) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			 return ((MultiModelCustom) model).superGetStringModelRendererMap(s);		}		if (model instanceof MultiModelAction) return ((MultiModelAction) model).getStringModelRendererMap(s);		return null;	}	public void putStringModelRendererMap(String s, ModchuModel_ModelRenderer modchu_ModelRenderer) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			 ((MultiModelCustom) model).superPutStringModelRendererMap(s, modchu_ModelRenderer);			 return;		}		if (model instanceof MultiModelAction) ((MultiModelAction) model).putStringModelRendererMap(s, modchu_ModelRenderer);	}	public void renderEars(float par1) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			 ((MultiModelCustom) model).superRenderEars(par1);			 return;		}		if (model instanceof MultiModelBaseBiped) ((MultiModelBaseBiped) model).renderEars(par1);	}	public void renderCloak(float par1) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			 ((MultiModelCustom) model).superRenderCloak(par1);			 return;		}		if (model instanceof MultiModelBaseBiped) ((MultiModelBaseBiped) model).renderCloak(par1);	}	public void renderItemsLM(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			 ((MultiModelCustom) model).superRenderItemsLM(entityCaps);			 return;		}		if (model instanceof MultiModelBaseBiped) ((MultiModelBaseBiped) model).renderItemsLM(entityCaps);	}	public void renderItemsHead(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			 ((MultiModelCustom) model).superRenderItemsHead(entityCaps);			 return;		}		if (model instanceof MultiModelBaseBiped) ((MultiModelBaseBiped) model).renderItemsHead(entityCaps);	}	public void renderItemsArmorHead(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			 ((MultiModelCustom) model).superRenderItemsArmorHead(entityCaps);			 return;		}		if (model instanceof MultiModelBaseBiped) ((MultiModelBaseBiped) model).renderItemsArmorHead(entityCaps);	}	public int addSupportChecks(ModchuModel_IEntityCaps entityCaps, Object itemstack) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			 return ((MultiModelCustom) model).superAddSupportChecks(entityCaps, itemstack);		}		if (model instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) model).addSupportChecks(entityCaps, itemstack);		return -1;	}	public int addSupportChecks(ModchuModel_IEntityCaps entityCaps, Object itemstack, int type) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			 return ((MultiModelCustom) model).superAddSupportChecks(entityCaps, itemstack, type);		}		if (model instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) model).addSupportChecks(entityCaps, itemstack, type);		return -1;	}	public float Physical_Hammer(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			 return ((MultiModelCustom) model).superPhysical_Hammer(entityCaps);		}		if (model instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) model).Physical_Hammer(entityCaps);		return -1;	}	public void setRotationAnglesGulliverBefore(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			 ((MultiModelCustom) model).superSetRotationAnglesGulliverBefore(f, f1, f2, f3, f4, f5, entityCaps);			 return;		}		if (model instanceof MultiModelBaseBiped) ((MultiModelBaseBiped) model).setRotationAnglesGulliverBefore(f, f1, f2, f3, f4, f5, entityCaps);	}	public void setRotationAnglesGulliverAfter(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			 ((MultiModelCustom) model).superSetRotationAnglesGulliverAfter(f, f1, f2, f3, f4, f5, entityCaps);			 return;		}		if (model instanceof MultiModelBaseBiped) ((MultiModelBaseBiped) model).setRotationAnglesGulliverAfter(f, f1, f2, f3, f4, f5, entityCaps);	}	public void setLivingAnimationsAfter(ModchuModel_IEntityCaps entityCaps, float f, float f1, float f2) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			 ((MultiModelCustom) model).superSetLivingAnimationsAfter(entityCaps, f, f1, f2);			 return;		}		if (model instanceof MultiModelBaseBiped) ((MultiModelBaseBiped) model).setLivingAnimationsAfter(entityCaps, f, f1, f2);	}	public boolean preRender(ModchuModel_IEntityCaps entityCaps, float par2, float par3, float par4, float par5, float par6, float par7) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			 return ((MultiModelCustom) model).superPreRender(entityCaps, par2, par3, par4, par5, par6, par7);		}		if (model instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) model).preRender(entityCaps, par2, par3, par4, par5, par6, par7);		return false;	}	public void renderExtention(ModchuModel_IEntityCaps entityCaps, float par2, float par3, float par4, float par5, float par6, float par7) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			 ((MultiModelCustom) model).superRenderExtention(entityCaps, par2, par3, par4, par5, par6, par7);			 return;		}		if (model instanceof MultiModelBaseBiped) ((MultiModelBaseBiped) model).renderExtention(entityCaps, par2, par3, par4, par5, par6, par7);	}	public float[] getTextureLightColor(ModchuModel_IEntityCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			 return ((MultiModelCustom) model).superGetTextureLightColor(entityCaps);		}		if (model instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) model).getTextureLightColor(entityCaps);		return null;	}	public void renderBody(ModchuModel_IEntityCaps entityCaps, float f, float f1, float f2, float f3, float f4, float f5, boolean b) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			 ((MultiModelCustom) model).superRenderBody(entityCaps, f, f1, f2, f3, f4, f5, b);			 return;		}		if (model instanceof MultiModelBaseBiped) ((MultiModelBaseBiped) model).renderBody(entityCaps, f, f1, f2, f3, f4, f5, b);	}	public void renderFace(ModchuModel_IEntityCaps entityCaps, float f, float f1, float f2, float f3, float f4, float f5, boolean b) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			 ((MultiModelCustom) model).superRenderFace(entityCaps, f, f1, f2, f3, f4, f5, b);			 return;		}		if (model instanceof MultiModelBaseBiped) ((MultiModelBaseBiped) model).renderFace(entityCaps, f, f1, f2, f3, f4, f5, b);	}	public int setFaceTexture(int pIndex) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			 return ((MultiModelCustom) model).superSetFaceTexture(pIndex);		}		if (model instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) model).setFaceTexture(pIndex);		return -1;	}	public ModchuModel_ModelRenderer getRandomModelBox(Random random) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			 return ((MultiModelCustom) model).superGetRandomModelBox(random);		}		if (model instanceof MultiModelBaseBiped) return (ModchuModel_ModelRenderer) ((MultiModelBaseBiped) model).getRandomModelBox(random);		return null;	}	public boolean canSpawnHear(Object world, int pX, int pY, int pZ) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			 return ((MultiModelCustom) model).superCanSpawnHear(world, pX, pY, pZ);		}		if (model instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) model).canSpawnHear(world, pX, pY, pZ);		return false;	}	public void IKProcessing(ModchuModel_ModelRenderer modchu_ModelRenderer) {		Object model = getModel();		if (model instanceof MultiModelCustom) {			 ((MultiModelCustom) model).superIKProcessing(modchu_ModelRenderer);			 return;		}		if (model instanceof MultiModelAction) ((MultiModelAction) model).IKProcessing(modchu_ModelRenderer);	}	private Object reflectOther(Object model, String s, Class[] c, Object[] o) {		if (c != null				&& model != null				&& o != null) {			Method method = Modchu_Reflect.getMethod(model.getClass(), s, c, -1);			if (method != null) return Modchu_Reflect.invoke(method, model, o);		}		return null;	}	public double getSkirtFloatsMotionY(ModchuModel_ModelRenderer modelRenderer) {		Object model = getModel();		if (model instanceof MultiModelSkirtFloats) {			 return Modchu_CastHelper.Double(((MultiModelSkirtFloats) model).getCapsValue(((MultiModelSkirtFloats) model).caps_skirtFloatsMotionY, modelRenderer));		}		return 0.0D;	}	public double getBreastFloatsMotionY(ModchuModel_ModelRenderer modelRenderer) {		Object model = getModel();		if (model instanceof MultiModelSkirtFloats) {			 return Modchu_CastHelper.Double(((MultiModelSkirtFloats) model).getCapsValue(((MultiModelSkirtFloats) model).caps_breastFloatsMotionY, modelRenderer));		}		return 0.0D;	}/*	public static void sampleZipCopy(Class c) {		try {			File mcDataDir = Modchu_AS.getFile(Modchu_AS.minecraftMcDataDir);			File cfgdir = new File(mcDataDir, "/config/CustomModel/");			if (!cfgdir.exists()) cfgdir.mkdir();			String s1 = new StringBuilder().append("CustomModel_1.cfg").toString();			File file = new File(cfgdir, s1);			if (file.exists()) return;			Modchu_Debug.lDebug("----------------------------------------------------");			Modchu_Debug.lDebug("ModchuModel_CustomModel	CustomModel_1.cfg !file.exists()");			ZipFile zipFile = null;			File copyDir = null;			String name = "CustomModelCfg_Sample.zip";			if (Modchu_Main.isRelease()) {				if (c != null) {					zipFile = Modchu_FileManager.getZipFile(c);				} else {					File dir = new File(mcDataDir, "/mods/");					//Modchu_Debug.mDebug("ModchuModel_CustomModel	dir.getAbsolutePath()="+dir.getAbsolutePath());					dir = Modchu_FileManager.getFile(dir.getAbsolutePath(), null, "MultiModelSet");					if (dir != null) zipFile = new ZipFile(dir);				}				Modchu_Debug.lDebug("ModchuModel_CustomModel	zipFile="+zipFile);				if (zipFile != null); else return;				copyDir = new File(mcDataDir, "/config/");				if (!copyDir.exists()) return;				Modchu_Debug.lDebug("Modchu_Config copyDir="+copyDir);				Modchu_FileManager.copyZipResource(c, zipFile, name, copyDir);			} else {				try {					File dir = new File(mcDataDir, "/mods/");					//Modchu_Debug.mDebug("ModchuModel_CustomModel	dir.getAbsolutePath()="+dir.getAbsolutePath());					dir = Modchu_FileManager.getFile(dir.getAbsolutePath(), null, "MultiModelSet");					if (dir != null) {						zipFile = new ZipFile(dir);						Modchu_Debug.lDebug("ModchuModel_CustomModel	zipFile="+zipFile);						copyDir = new File(""+mcDataDir.toString().replace("\\.", "")+"/config/");						Modchu_Debug.lDebug("Modchu_Config copyDir="+copyDir);						Modchu_FileManager.copyZipResource(c, zipFile, name, copyDir);					} else {						Modchu_Debug.lDebug("ModchuModel_CustomModel	dir == null !!");					}				} catch (Exception e) {					e.printStackTrace();				}			}		} catch(Exception e) {			e.printStackTrace();		}		Modchu_Debug.lDebug("----------------------------------------------------");	}*/}