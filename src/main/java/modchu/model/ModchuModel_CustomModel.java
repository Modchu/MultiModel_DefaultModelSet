package modchu.model;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.File;import java.io.FileReader;import java.io.FileWriter;import java.lang.reflect.Field;import java.util.ArrayList;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map.Entry;import java.util.concurrent.ConcurrentHashMap;import java.util.zip.ZipFile;import modchu.lib.Modchu_Config;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_FileManager;import modchu.lib.Modchu_Main;import modchu.lib.Modchu_Reflect;import modchu.lib.characteristic.Modchu_AS;import modchu.lib.characteristic.Modchu_CastHelper;import modchu.lib.characteristic.Modchu_ModelRenderer;import modchu.lib.replacepoint.Modchu_ModelMultiReplacePoint;import modchu.model.multimodel.MultiModelAction;import modchu.model.multimodel.MultiModelBaseBiped;import modchu.model.multimodel.MultiModelCustom;import modchu.model.multimodel.MultiModelSkirtFloats;public class ModchuModel_CustomModel {	public Object mainModel;	public MultiModelBaseBiped baseModel;	public String mainModeltextureName;	public Object mainModeltexture;	public HashMap<String, Modchu_ModelRenderer> partsMap = new HashMap();	public static final byte normal = 0;	public static final byte eyeR = 1;	public static final byte eyeL = 2;	public static final byte ear = 3;	public static final byte tail = 4;	public static final byte LMM = 0;	public static final byte PFLM = 1;	public static final int maxTypeMode = 5;	public static final int maxboxType = 3;	public byte entityType = LMM;	public ArrayList<Object[]> textureAndModelRendererList = new ArrayList();	public boolean isLMMModel = false;	private boolean changeModelInit;	private boolean allRendering = false;	private boolean partsRendering = false;	private HashMap<Modchu_ModelRenderer, Boolean> showModelMemoryMap = new HashMap();	private HashMap<Modchu_ModelRenderer, Boolean> customModelShowModelMemoryMap = new HashMap();	private HashMap<Integer, Field> modelRendererFieldsMap = new HashMap();	private File cfgdir;	private static HashMap<String, Object> mainTextureMap = new HashMap();	private static HashMap<String, ArrayList> textureListMap = new HashMap();	private String cfgName;	private int showArmorPartsNumber;	private int tempColor;	private boolean guiTextureSelectFlag;	private boolean colorSettingForcingFlag;	private Object tempSelectPanel;	private Object tempGuiEntitySelectEntity;	private Object currentScreen;	private boolean debug = true;	public ModchuModel_CustomModel(MultiModelBaseBiped multiModelBaseBiped, String s, List list, float f, float f1) {		baseModel = multiModelBaseBiped;		if (s != null) {			cfgName = s;			init(s, list, f, f1);			Modchu_Debug.cDebug("ModchuModel_CustomModel init end.");		}	}	public ModchuModel_CustomModel(MultiModelBaseBiped multiModelBaseBiped, Object modelBiped, String s, float f, float f1) {		baseModel = multiModelBaseBiped;		mainModel = modelBiped;		mainModeltextureName = s;		partsRendering = false;		isLMMModel = !Modchu_ModelMultiReplacePoint.class.isInstance(mainModel.getClass());	}	public void init(String s, List reLoadList, float f, float f1) {		boolean cfgReLoad = false;		if (s != null) ;else {			s = cfgName;			cfgReLoad = true;		}		File mcDataDir = Modchu_AS.getFile(Modchu_AS.minecraftMcDataDir);		cfgdir = new File(mcDataDir, "/config/CustomModel/");		String s1 = new StringBuilder().append("CustomModel_").append(s).append(".cfg").toString();		Modchu_Debug.cDebug("ModchuModel_CustomModel cfg["+s1+"] loadInit");		File file = new File(cfgdir, s1);		if (!file.exists()) {			Modchu_Debug.lDebug("----------------------------------------------------");			Modchu_Debug.lDebug("ModchuModel_CustomModel !file.exists()");			ZipFile zipFile = null;			File copyDir = null;			String name = "CustomModelCfg_Sample.zip";			Class c = baseModel.getClass();			if (Modchu_Main.isRelease()) {				zipFile = Modchu_FileManager.getZipFile(baseModel.getClass());				Modchu_Debug.lDebug("ModchuModel_CustomModel zipFile="+zipFile);				copyDir = new File(mcDataDir, "/config/");				Modchu_Debug.lDebug("Modchu_Config cfgdir="+copyDir);				Modchu_FileManager.copyZipResource(c, zipFile, name, copyDir);			} else {				try {					File dir = new File(mcDataDir, "/mods/");					//Modchu_Debug.mDebug("ModchuModel_CustomModel dir.getAbsolutePath()="+dir.getAbsolutePath());					dir = Modchu_FileManager.getFile(dir.getAbsolutePath(), null, "MultiModelSet");					if (dir != null) {						zipFile = new ZipFile(dir);						Modchu_Debug.lDebug("ModchuModel_CustomModel zipFile="+zipFile);						copyDir = new File(""+mcDataDir.toString().replace("\\.", "")+"/config/");						Modchu_Debug.lDebug("Modchu_Config cfgdir="+copyDir);						Modchu_FileManager.copyZipResource(c, zipFile, name, copyDir);					} else {						Modchu_Debug.lDebug("ModchuModel_CustomModel dir == null !!");					}				} catch (Exception e) {					e.printStackTrace();				}			}			file = new File(copyDir, s1);			Modchu_Debug.lDebug("ModchuModel_CustomModel last file="+file);		} else {			Modchu_Debug.lDebug("ModchuModel_CustomModel file.exists() ok.");		}		loadInit(file, reLoadList, cfgReLoad);		newInitSetting();		Modchu_Debug.cDebug("ModchuModel_CustomModel cfg load");		load(file, reLoadList, cfgReLoad, f, f1);		Modchu_Debug.cDebug("ModchuModel_CustomModel cfg load end");		partsRendering = true;		defaultAddChild();		//syncNameListSetting();		//PFLM_ModelData = Modchu_Reflect.loadClass(Modchu_Main.getClassName("PFLM_ModelData"));		Modchu_Debug.cDebug("ModchuModel_CustomModel init() end.");	}	public void newInitSetting() {		newMainModelInit();		Modchu_Debug.cDebug("ModchuModel_CustomModel customInitModel end");	}	public void deleteParts(int i) {		if (i < 0				| i >= partsMap.size()) return;		partsMap.remove(Modchu_Main.getHashMapKey(partsMap, i));		//partsTextureAndModelRendererList		textureAndModelRendererList.remove(i);	}	public void deleteBox(int i) {		deleteBox(i, 0);	}	public void deleteBox(int i, int i2) {		if (partsMap != null				&& !partsMap.isEmpty()) ;else return;		Modchu_ModelRenderer modelRenderer = partsMap.get(Modchu_Main.getHashMapKey(partsMap, i));		if (modelRenderer != null) ;else return;		modelRenderer.removeFreeVariable("partsBoxData"+i2);		modelRenderer.cubeList.remove(i2);	}	public void addBox(int i) {		addBox(i, 0);	}	public void addBox(int i, int i2) {		//Modchu_Debug.mDebug("addBox i="+i+" i2="+i2);		if (partsMap != null				&& !partsMap.isEmpty()) ;else return;		Modchu_ModelRenderer modelRenderer = partsMap.get(Modchu_Main.getHashMapKey(partsMap, i));		if (modelRenderer != null) ;else return;		Object o = modelRenderer.getFreeVariable("partsBoxData"+i2);		float[] f0 = o != null				&& o instanceof float[] ? (float[])o : null;		addBox(modelRenderer, f0);	}	private void addBox(Modchu_ModelRenderer modelRenderer, float[] f0) {		addBox(modelRenderer, f0, 1.0F);	}	private void addBox(Modchu_ModelRenderer modelRenderer, float[] f0, float f) {		if (f0 != null) ;else return;		float[] f1 = copyBoxDataFloat(f0);		modelRenderer.addBox(f1[0], f1[1], f1[2], (int)f1[3], (int)f1[4], (int)f1[5], f * f1[6] + f1[7]);	}	private void addPlate(Modchu_ModelRenderer modelRenderer, float[] f0) {		addPlate(modelRenderer, f0, 1.0F);	}	private void addPlate(Modchu_ModelRenderer modelRenderer, float[] f0, float f) {		if (f0 != null) ;else return;		float[] f1 = copyBoxDataFloat(f0);		modelRenderer.addPlate(f1[0], f1[1], f1[2], (int)f1[3], (int)f1[4], (int)f1[5], f * f1[6] + f1[7]);	}	private void addBall(Modchu_ModelRenderer modelRenderer, float[] f0) {		addBall(modelRenderer, f0, 1.0F);	}	private void addBall(Modchu_ModelRenderer modelRenderer, float[] f0, float f) {		if (f0 != null) ;else return;		float[] f1 = copyBoxDataFloat(f0);		modelRenderer.addBall(f1[0], f1[1], f1[2], f1[3], f1[4], f1[5]);	}	private float[] copyBoxDataFloat(float[] f0) {		float[] f1;		if (f0.length < 8) {			f1 = new float[] {					0.0F, 0.0F, 0.0F,					1, 1, 1,					1.0F, 0.0F			};			for (int i = 0; i < f0.length; i++) {				f1[i] = f0[i];			}		} else {			f1 = f0;		}		return f1;	}	public void addParts(String s) {		if (partsMap != null				&& !partsMap.isEmpty()) ;else return;		Object model = getModel();		Modchu_ModelRenderer modelRenderer = new Modchu_ModelRenderer((Modchu_ModelMultiReplacePoint) model, s);		partsMap.put(s, modelRenderer);	}	private void partsAddChildSetting(String s, Modchu_ModelRenderer modelRenderer) {		if (s != null) {			Object model = getModel();			String addChildName = obfuscationNameCheck(s);			Modchu_ModelRenderer tempModelRenderer = (Modchu_ModelRenderer) Modchu_Reflect.getFieldObject(model.getClass(), addChildName, model, -1);			if (tempModelRenderer != null) {				tempModelRenderer.addChild(modelRenderer);				Modchu_Reflect.setFieldObject(model.getClass(), addChildName, model, tempModelRenderer);				Modchu_Debug.cDebug("ModchuModel_CustomModel "+modelRenderer.getBoxName()+" addChild s="+s);			} else {				Modchu_Debug.cDebug("ModchuModel_CustomModel addChild else");				tempModelRenderer = partsMap.get(s);				if (tempModelRenderer != null) {					tempModelRenderer.addChild(modelRenderer);					Modchu_Debug.cDebug("ModchuModel_CustomModel else "+modelRenderer.getBoxName()+" addChild s="+s);				} else {					Modchu_Debug.cDebug("ModchuModel_CustomModel addChild else null !! "+modelRenderer.getBoxName()+" s="+s);				}			}		}	}	public boolean render(ModchuModel_IModelCaps entityCaps, float f, float f1, float ticksExisted, float pheadYaw, float pheadPitch, float f5, boolean pIsRender) {		Object model = getModel();		if (model != null				&& !(model instanceof MultiModelCustom)) ;else return model instanceof MultiModelCustom;		Object entity = baseModel.getCapsValue(entityCaps, entityCaps.caps_Entity);		int armorType = getArmorType();		currentScreen = Modchu_AS.get(Modchu_AS.minecraftCurrentScreen);		if (currentScreen == null) {			if (tempSelectPanel != null) tempSelectPanel = null;		}		boolean colorSettingFlag = mainModeltexture == null;		//Modchu_Debug.lDebug("render currentScreen="+currentScreen);		//Modchu_Debug.lDebug("render ModchuModel_Main.MMM_GuiTextureSelect="+ModchuModel_Main.MMM_GuiTextureSelect);		//Modchu_Debug.lDebug("render ModchuModel_Main.MMM_GuiTextureSelect.isInstance(currentScreen)="+ModchuModel_Main.MMM_GuiTextureSelect.isInstance(currentScreen));		Class MMM_GuiTextureSelect = Modchu_Reflect.loadClass("MMM_GuiTextureSelect");		if (MMM_GuiTextureSelect != null				&& MMM_GuiTextureSelect.isInstance(currentScreen)) {			colorSettingFlag = true;			guiTextureSelectFlag = true;			if (tempSelectPanel != null) ;else {				tempSelectPanel = Modchu_Reflect.getFieldObject("MMM_GuiTextureSelect", "selectPanel", currentScreen);				tempGuiEntitySelectEntity = null;			}		} else {			if (tempSelectPanel != null) tempSelectPanel = null;			if (guiTextureSelectFlag) {				colorSettingForcingFlag = true;				guiTextureSelectFlag = false;			}		}		if (entityType == LMM) {			colorSettingFlag = true;		}		if (!changeModelInit) changeModel(entityCaps);		if (partsRendering) {			allShowModelMemory();			customModelShowModelMemory();			customModelShowModelSetting(entityCaps, (List)null, false);		}		if (mainModeltexture != null) ;else colorSettingForcingFlag = true;		//Modchu_Debug.lDebug("render colorSettingFlag="+colorSettingFlag);		if (colorSettingFlag) changeColor(entityCaps);		//Modchu_Debug.mDebug("ModchuModel_CustomModel mainModeltexture="+mainModeltexture);		Object render = Modchu_AS.get(Modchu_AS.render, model);		if (render != null) ;else {			render = Modchu_AS.get(Modchu_AS.render, baseModel);			if (render != null) ;else render = Modchu_AS.get(Modchu_AS.renderManagerGetEntityRenderObject, entity);			Modchu_AS.set(Modchu_AS.setRender, model, render);		}		boolean flag1 = armorType < 1;		if (flag1) {			if (mainModeltexture != null) {				if (render != null						&& mainModeltexture != null) {					Modchu_AS.set(Modchu_AS.renderBindTexture, render, mainModeltexture);					//Modchu_Debug.mDebug("ModchuModel_CustomModel render mainModeltexture="+mainModeltexture);					//Modchu_Debug.mDebug("ModchuModel_CustomModel render mainModel.getClass()="+(model.getClass()));					//Modchu_Debug.mDebug("ModchuModel_CustomModel render entityCaps.getClass()="+(entityCaps.getClass()));					Modchu_Reflect.invokeMethod(isLMMModel ?							Modchu_Reflect.loadClass("MMM_ModelBase") : Modchu_ModelMultiReplacePoint.class,							"render", new Class[]{ getIModelCapsClass(), float.class, float.class, float.class, float.class, float.class, float.class, boolean.class }, model, new Object[]{ entityCaps, f, f1, ticksExisted, pheadYaw, pheadPitch, f5, getIsRendering(entityCaps, 0) });				} else {					//Modchu_Debug.cDebug("ModchuModel_CustomModel render render == null !!");				}			}		} else {			String s;			String armorName = (String) baseModel.getCapsValue(baseModel.caps_textureArmorName);			Object inventory = baseModel.getCapsValue(baseModel.caps_Inventory);			Object itemStack;			if (inventory != null) {				//for(int i = 0; i < 4; i++) {					itemStack = Modchu_AS.get(Modchu_AS.inventoryPlayerArmorItemInSlot, inventory, showArmorPartsNumber);					s = (String) baseModel.getCapsValue(baseModel.caps_armorTexture, armorName, armorType, itemStack);					Object resourceLocations = armorType == 1 ? ModchuModel_Main.textureManagerGetArmorTexture(s, 64, itemStack) :						ModchuModel_Main.textureManagerGetArmorTexture(s, 80, itemStack);					Modchu_Debug.mDebug("ModchuModel_CustomModel armor resourceLocations="+resourceLocations);					armorRender(entityCaps, resourceLocations, armorType, itemStack, model, showArmorPartsNumber, entity, f, f1, ticksExisted, pheadYaw, pheadPitch, f5);				//}			}		}		if (entityType == LMM) baseModel.setCapsValue(baseModel.caps_armorType, 0);		String s1 = null;		if (partsRendering) {			if (textureAndModelRendererList != null				&& textureAndModelRendererList.size() > 0) {				allShowModelSetting(false);				String s2 = null;				String s3 = null;				//Modchu_Debug.mDebug("partsTextureNameMap.size()="+partsTextureNameMap.size());				for(int i = 0; i < textureAndModelRendererList.size() ;i++) {					boolean flag = false;					Object[] o = textureAndModelRendererList.get(i);					if (o != null							&& o.length > 0							&& o[0] != null							&& o[1] != null) ;else continue;					Object texture = o[0];					if (texture != null) {						//Modchu_Debug.mDebug("parts texture="+texture);						if (render != null) Modchu_AS.set(Modchu_AS.renderBindTexture, render, texture);					}					List<Modchu_ModelRenderer> list = (List) o[1];					if (list != null							&& !list.isEmpty()) {						for(Modchu_ModelRenderer modelRenderer : list) {							if (customModelShowModelMemoryMapGet(modelRenderer)) customModelShowModelSetting(entityCaps, modelRenderer, true);						}						Modchu_Reflect.invokeMethod(Modchu_ModelMultiReplacePoint.class, "render", new Class[]{ getIModelCapsClass(), float.class, float.class,							float.class, float.class, float.class, float.class, boolean.class }, model, new Object[]{ entityCaps, f, f1, ticksExisted, pheadYaw, pheadPitch, f5, getIsRendering(entityCaps, armorType) });						customModelShowModelSetting(entityCaps, (List)null, false);					}				}			}			allShowModelMemoryRead();			customModelShowModelMemoryRead();		}		//Modchu_Debug.mDebug("render end.");		return false;	}	private void armorRender(ModchuModel_IModelCaps entityCaps, Object resourceLocation, int armorType, Object itemstack, Object model, int i, Object entity, float f, float f1, float ticksExisted, float pheadYaw, float pheadPitch, float f5) {		if (resourceLocation != null) ;else return;/*		if (setArmorModelMethodType == 0) return;		switch(setArmorModelMethodType) {		case 1:			Modchu_Reflect.invoke(setArmorModelMethod, render, new Object[]{ ((MultiModelBaseBiped) model), ((EntityPlayer) entity), i, f });			break;		case 2:		case 3:			Modchu_Reflect.invoke(setArmorModelMethod, render, new Object[]{ entity, i, f });			break;		}*/		if (setArmorModel(entityCaps, (Object) model, itemstack, entity, i, f) > -1) {			Object render = Modchu_Reflect.getFieldObject(Modchu_ModelMultiReplacePoint.class, "render", model);			if (resourceLocation != null) {				Modchu_AS.set(Modchu_AS.renderBindTexture, render, resourceLocation);			}			Modchu_Reflect.invokeMethod(Modchu_ModelMultiReplacePoint.class, "render", new Class[]{ getIModelCapsClass(), float.class, float.class,					float.class, float.class, float.class, float.class, boolean.class }, model, new Object[]{ entityCaps, f, f1, ticksExisted, pheadYaw, pheadPitch, f5, getIsRendering(entityCaps, armorType) });			//model.render(entityCaps, f, f1, ticksExisted, pheadYaw, pheadPitch, f5, getIsRendering(entityCaps, armorType));		}	}	private int setArmorModel(ModchuModel_IModelCaps entityCaps, Object model, Object itemstack, Object entity, int i, float f) {		byte byte0 = -1;		if (model != null				&& !(model instanceof MultiModelCustom)) ;else return byte0;		int armorType = getArmorType();		if (armorType > 1) ;else return byte0;		int i2 = armorType == 2 ? 0 : 1;		if (Modchu_AS.getInt(Modchu_AS.itemStackStackSize, itemstack) > 0) {			if (model instanceof MultiModelBaseBiped) {				((MultiModelBaseBiped) model).showArmorParts(entityCaps, i, i2);			} else {				Modchu_Reflect.invokeMethod(Modchu_ModelMultiReplacePoint.class, "showArmorParts", new Class[]{ int.class, int.class }, model, new Object[]{ i, i2 });				//model.showArmorParts(i, i2);			}//-@-b181			byte0 = (byte) (Modchu_AS.getBoolean(Modchu_AS.itemStackIsItemEnchanted, itemstack) ? 15 : 1);//@-@b181		}		return byte0;	}	public void setLivingAnimations(ModchuModel_IModelCaps entityCaps, float f, float f1, float renderPartialTicks) {		Object model = getModel();		if (model != null				&& !(model instanceof MultiModelCustom)) {			Modchu_Reflect.invokeMethod(Modchu_ModelMultiReplacePoint.class, "setLivingAnimations", new Class[]{					getIModelCapsClass(), float.class, float.class, float.class },					model, new Object[]{ entityCaps, f, f1, renderPartialTicks });			//model.setLivingAnimations(entityCaps, f, f1, renderPartialTicks);		}	}	public void setLivingAnimationsLM(ModchuModel_IModelCaps entityCaps, float f, float f1, float renderPartialTicks) {		//Modchu_Debug.mDebug("ModchuModel_CustomModel setLivingAnimationsLM");		Object entity = baseModel.getCapsValue(entityCaps, entityCaps.caps_Entity);		Object model = getModel();		if (entity != null) ;else return;		if (partsMap != null				&& !partsMap.isEmpty()) {			Modchu_ModelRenderer modelRenderer;			Iterator<Entry<String, Modchu_ModelRenderer>> iterator = partsMap.entrySet().iterator();			Entry<String, Modchu_ModelRenderer> entry;			String key;			byte partsType;			int i = 0;			while(iterator.hasNext()) {				entry = iterator.next();				key = entry.getKey();				modelRenderer = partsMap.get(key);				partsType = Modchu_CastHelper.Byte(modelRenderer.getFreeVariable("partsType"));				//Modchu_Debug.mDebug("ModchuModel_CustomModel setLivingAnimationsLM partsType="+partsType);				if (partsType == eyeR						| partsType == eyeL) {					//Modchu_Debug.mDebug("ModchuModel_CustomModel setLivingAnimationsLM getBoxName()="+modelRenderer.getBoxName());					// 目パチ					float ticksExisted = Modchu_AS.getFloat(Modchu_AS.entityTicksExisted, entity);					float entityIdFactor = ModchuModel_ModelCapsHelper.getCapsValueFloat(entityCaps, entityCaps.caps_entityIdFactor);					float f3 = (float)ticksExisted + renderPartialTicks + entityIdFactor;					//Modchu_Debug.mDebug("ticksExisted="+ticksExisted);					//Modchu_Debug.mDebug("renderPartialTicks="+renderPartialTicks);					//Modchu_Debug.mDebug("entityIdFactor="+ModchuModel_ModelCapsHelper.getCapsValueFloat(entityCaps, baseModel.caps_entityIdFactor));					//Modchu_Debug.dDebug("f3="+f3+" 0 > ? "+(Modchu_AS.getFloat(Modchu_AS.mathHelperSin, f3 * 0.05F) + Modchu_AS.getFloat(Modchu_AS.mathHelperSin, f3 * 0.13F) + Modchu_AS.getFloat(Modchu_AS.mathHelperSin, f3 * 0.7F) + 2.55F));					if( 0 > Modchu_AS.getFloat(Modchu_AS.mathHelperSin, f3 * 0.05F) + Modchu_AS.getFloat(Modchu_AS.mathHelperSin, f3 * 0.13F) + Modchu_AS.getFloat(Modchu_AS.mathHelperSin, f3 * 0.7F) + 2.55F) {						customModelShowModelSetting(entityCaps, modelRenderer, true);						customModelShowModelMemoryMapPut(modelRenderer, modelRenderer.showModel);						//Modchu_Debug.dDebug("true  showModel="+modelRenderer.showModel, 1);					} else {						customModelShowModelSetting(entityCaps, modelRenderer, false);						customModelShowModelMemoryMapPut(modelRenderer, modelRenderer.showModel);						//Modchu_Debug.dDebug("false showModel="+modelRenderer.showModel, 1);					}				}				i++;			}		}	}	public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IModelCaps entityCaps) {		Object model = getModel();		if (model != null				&& !(model instanceof MultiModelCustom)) ;else return;		Modchu_Reflect.invokeMethod(Modchu_ModelMultiReplacePoint.class, "setRotationAngles", new Class[]{				float.class, float.class, float.class, float.class, float.class, float.class, getIModelCapsClass()  },				model, new Object[]{ f, f1, f2, f3, f4, f5, entityCaps });		//Modchu_Debug.mDebug("mainModel.isWait="+mainModel.isWait+" baseModel.isWait="+baseModel.isWait+" caps_isWait="+baseModel.entityCaps.getCapsValue(baseModel.caps_isWait));	}	public boolean setRotationAnglesLM(float f, float f1, float ticksExisted, float pheadYaw, float pheadPitch, float f5, ModchuModel_IModelCaps entityCaps) {		Object model = getModel();		if (model != null) ;else return false;		if (partsMap != null				&& !partsMap.isEmpty()) {			Modchu_ModelRenderer modelRenderer;			Iterator<Entry<String, Modchu_ModelRenderer>> iterator = partsMap.entrySet().iterator();			Entry<String, Modchu_ModelRenderer> entry;			String key;			byte partsType;			int i = 0;			while(iterator.hasNext()) {				entry = iterator.next();				key = entry.getKey();				modelRenderer = partsMap.get(key);				partsType = Modchu_CastHelper.Byte(modelRenderer.getFreeVariable("partsType"));				if (ModchuModel_ModelCapsHelper.getCapsValueBoolean(model, entityCaps.caps_aimedBow)) {					if (partsType == eyeR) {						customModelShowModelSetting(entityCaps, modelRenderer, false);						customModelShowModelMemoryMapPut(modelRenderer, modelRenderer.showModel);						//Modchu_Debug.mDebug("caps_aimedBow eyeR modelRenderer.showModel="+modelRenderer.showModel);					}					if (partsType == eyeL) {						customModelShowModelSetting(entityCaps, modelRenderer, true);						customModelShowModelMemoryMapPut(modelRenderer, modelRenderer.showModel);						//Modchu_Debug.mDebug("caps_aimedBow eyeL modelRenderer.showModel="+modelRenderer.showModel);					}				}				if (partsType == ear						| partsType == tail) {					float partsTypeFactor = Modchu_CastHelper.Float(modelRenderer.getFreeVariable("partsTypeFactor"));					float partsTypeCorrection = Modchu_CastHelper.Float(modelRenderer.getFreeVariable("partsTypeCorrection"));					if (partsType == ear) {						float f6 = (Float) Modchu_Reflect.invokeMethod(Modchu_ModelMultiReplacePoint.class, "mh_sin", new Class[]{ float.class }, model, new Object[]{ ticksExisted * 0.05F });						modelRenderer.rotateAngleX = f6 * partsTypeFactor + partsTypeCorrection;					}					if (partsType == tail) {						float f7 = (Float) Modchu_Reflect.invokeMethod(Modchu_ModelMultiReplacePoint.class, "mh_cos", new Class[]{ float.class }, model, new Object[]{ ticksExisted * 0.2F });						modelRenderer.rotateAngleY = modelRenderer.rotateAngleZ = f7 * partsTypeFactor + partsTypeCorrection;					}				}			}		}		return model instanceof MultiModelCustom;	}	public void skirtFloatsInit(float f, float f1) {		Object model = getModel();		if (model instanceof MultiModelSkirtFloats				&& model != null						&& !(model instanceof MultiModelCustom)) ((MultiModelSkirtFloats) model).skirtFloatsInit(f, f1);	}	public boolean setRotationAnglesfirstPerson(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IModelCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelBaseBiped				&& model != null						&& !(model instanceof MultiModelCustom)) ((MultiModelBaseBiped) model).setRotationAnglesfirstPerson(f, f1, f2, f3, f4, f5, entityCaps);		return model instanceof MultiModelCustom;	}	public Object getCapsValue(int pIndex, Object[] pArg) {		Object model = getModel();		Object o = null;		if (model != null				&& !(model instanceof MultiModelCustom)) {			o = Modchu_Reflect.invokeMethod(model.getClass(), "getCapsValue", new Class[]{ int.class, Object[].class }, model, new Object[]{ pIndex, pArg });		}		return o;	}	public boolean setCapsValue(int pIndex, Object[] pArg) {		Object model = getModel();		boolean b = false;		if (model != null				&& !(model instanceof MultiModelCustom)) {			b = Modchu_CastHelper.Boolean(Modchu_Reflect.invokeMethod(model.getClass(), "setCapsValue", new Class[]{ int.class, Object[].class }, model, new Object[]{ pIndex, pArg }));		}		return b;	}	public boolean renderItems(ModchuModel_IModelCaps entityCaps) {		Object model = getModel();		if (model != null				&& !(model instanceof MultiModelCustom)) {			Modchu_Reflect.invokeMethod(Modchu_ModelMultiReplacePoint.class, "renderItems", new Class[]{ getIModelCapsClass() }, model, new Object[]{ entityCaps });		}		return model instanceof MultiModelCustom;	}	public boolean defaultPartsSettingBefore(ModchuModel_IModelCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelBaseBiped				&& model != null						&& !(model instanceof MultiModelCustom)) ((MultiModelBaseBiped) model).defaultPartsSettingBefore(entityCaps);		return model instanceof MultiModelCustom;	}	public boolean defaultPartsSettingAfter(ModchuModel_IModelCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelBaseBiped				&& model != null						&& !(model instanceof MultiModelCustom)) ((MultiModelBaseBiped) model).defaultPartsSettingAfter(entityCaps);		return model instanceof MultiModelCustom;	}	public boolean showModelSettingReflects(ModchuModel_IModelCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelBaseBiped				&& model != null						&& !(model instanceof MultiModelCustom)) ((MultiModelBaseBiped) model).showModelSettingReflects(entityCaps);		return model instanceof MultiModelCustom;	}	public boolean actionInit(ModchuModel_IModelCaps entityCaps, int i) {		Object model = getModel();		if (model instanceof MultiModelAction				&& model != null						&& !(model instanceof MultiModelCustom)) ((MultiModelAction) model).actionInit(entityCaps, i);		return model instanceof MultiModelCustom;	}	public boolean actionRelease(ModchuModel_IModelCaps entityCaps, int i) {		Object model = getModel();		if (model instanceof MultiModelAction				&& model != null						&& !(model instanceof MultiModelCustom)) ((MultiModelAction) model).actionRelease(entityCaps, i);		defaultCustomAddChild();		return model instanceof MultiModelCustom;	}	public boolean action(float f, float f1, float f2, float f3, float f4, float f5, int i, ModchuModel_IModelCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelAction				&& model != null						&& !(model instanceof MultiModelCustom)) ((MultiModelAction) model).action(f, f1, f2, f3, f4, f5, i, entityCaps);		return model instanceof MultiModelCustom;	}	public float getHeight(ModchuModel_IModelCaps entityCaps) {		Object model = getModel();		float f = 0.0F;		if (model != null				&& !(model instanceof MultiModelCustom)) f = Modchu_CastHelper.Float(Modchu_Reflect.invokeMethod(Modchu_ModelMultiReplacePoint.class, "getHeight", new Class[]{ getIModelCapsClass() }, model, new Object[]{ entityCaps }));		return f;	}	public float getWidth(ModchuModel_IModelCaps entityCaps) {		Object model = getModel();		float f = 0.0F;		if (model != null				&& !(model instanceof MultiModelCustom)) f = Modchu_CastHelper.Float(Modchu_Reflect.invokeMethod(Modchu_ModelMultiReplacePoint.class, "getWidth", new Class[]{ getIModelCapsClass() }, model, new Object[]{ entityCaps }));		return f;	}	public float getyOffset(ModchuModel_IModelCaps entityCaps) {		Object model = getModel();		float f = -100.0F;		if (model != null				&& !(model instanceof MultiModelCustom)) f = Modchu_CastHelper.Float(Modchu_Reflect.invokeMethod(Modchu_ModelMultiReplacePoint.class, "getyOffset", new Class[]{ getIModelCapsClass() }, model, new Object[]{ entityCaps }));		return f;	}	public float getRidingHeight(ModchuModel_IModelCaps entityCaps) {		Object model = getModel();		float f = 0.0F;		if (model instanceof MultiModelBaseBiped				&& model != null						&& !(model instanceof MultiModelCustom)) f = ((MultiModelBaseBiped) model).getRidingHeight(entityCaps);		return f;	}	public float getRidingWidth(ModchuModel_IModelCaps entityCaps) {		Object model = getModel();		float f = 0.0F;		if (model instanceof MultiModelBaseBiped				&& model != null						&& !(model instanceof MultiModelCustom)) f = ((MultiModelBaseBiped) model).getRidingWidth(entityCaps);		return f;	}	public float getRidingyOffset(ModchuModel_IModelCaps entityCaps) {		Object model = getModel();		float f = -100.0F;		if (model instanceof MultiModelBaseBiped				&& model != null						&& !(model instanceof MultiModelCustom)) f = ((MultiModelBaseBiped) model).getRidingyOffset(entityCaps);		return f;	}	public float getMountedYOffset(ModchuModel_IModelCaps entityCaps) {		Object model = getModel();		float f = -100.0F;		if (model instanceof MultiModelBaseBiped				&& model != null						&& !(model instanceof MultiModelCustom)) f = ((MultiModelBaseBiped) model).getMountedYOffset(entityCaps);		return f;	}	public double getSittingyOffset(ModchuModel_IModelCaps entityCaps) {		Object model = getModel();		double d = -100.0D;		if (model instanceof MultiModelBaseBiped				&& model != null						&& !(model instanceof MultiModelCustom)) d = ((MultiModelBaseBiped) model).getSittingyOffset(entityCaps);		return d;	}	public float ridingViewCorrection(ModchuModel_IModelCaps entityCaps) {		Object model = getModel();		float f = -100.0F;		if (model instanceof MultiModelBaseBiped				&& model != null						&& !(model instanceof MultiModelCustom)) f = ((MultiModelBaseBiped) model).ridingViewCorrection(entityCaps);		return f;	}	public float getModelScale(ModchuModel_IModelCaps entityCaps) {		Object model = getModel();		float f = 0.0F;		if (model instanceof MultiModelBaseBiped				&& model != null						&& !(model instanceof MultiModelCustom)) f = ((MultiModelBaseBiped) model).getModelScale(entityCaps);		return f;	}	public boolean setArmorBipedHeadShowModel(ModchuModel_IModelCaps entityCaps, boolean b) {		Object model = getModel();		if (model instanceof MultiModelBaseBiped				&& model != null						&& !(model instanceof MultiModelCustom)) ((MultiModelBaseBiped) model).setArmorBipedHeadShowModel(entityCaps, b);		return model instanceof MultiModelCustom;	}	public boolean setArmorBipedBodyShowModel(ModchuModel_IModelCaps entityCaps, boolean b) {		Object model = getModel();		if (model instanceof MultiModelBaseBiped				&& model != null						&& !(model instanceof MultiModelCustom)) ((MultiModelBaseBiped) model).setArmorBipedBodyShowModel(entityCaps, b);		return model instanceof MultiModelCustom;	}	public boolean setArmorBipedRightArmShowModel(ModchuModel_IModelCaps entityCaps, boolean b) {		Object model = getModel();		if (model instanceof MultiModelBaseBiped				&& model != null						&& !(model instanceof MultiModelCustom)) ((MultiModelBaseBiped) model).setArmorBipedRightArmShowModel(entityCaps, b);		return model instanceof MultiModelCustom;	}	public boolean setArmorBipedLeftArmShowModel(ModchuModel_IModelCaps entityCaps, boolean b) {		Object model = getModel();		if (model instanceof MultiModelBaseBiped				&& model != null						&& !(model instanceof MultiModelCustom)) ((MultiModelBaseBiped) model).setArmorBipedLeftArmShowModel(entityCaps, b);		return model instanceof MultiModelCustom;	}	public boolean setArmorBipedRightLegShowModel(ModchuModel_IModelCaps entityCaps, boolean b) {		Object model = getModel();		if (model instanceof MultiModelBaseBiped				&& model != null						&& !(model instanceof MultiModelCustom)) ((MultiModelBaseBiped) model).setArmorBipedRightLegShowModel(entityCaps, b);		return model instanceof MultiModelCustom;	}	public boolean setArmorBipedLeftLegShowModel(ModchuModel_IModelCaps entityCaps, boolean b) {		Object model = getModel();		if (model instanceof MultiModelBaseBiped				&& model != null						&& !(model instanceof MultiModelCustom)) ((MultiModelBaseBiped) model).setArmorBipedLeftLegShowModel(entityCaps, b);		return model instanceof MultiModelCustom;	}	public boolean setArmorSkirtShowModel(ModchuModel_IModelCaps entityCaps, boolean b) {		Object model = getModel();		if (model instanceof MultiModelBaseBiped				&& model != null						&& !(model instanceof MultiModelCustom)) ((MultiModelBaseBiped) model).setArmorSkirtShowModel(entityCaps, b);		return model instanceof MultiModelCustom;	}	public void allShowModelMemory() {		Object model = getModel();		Modchu_ModelRenderer modelRenderer;		for (int i = 0; i < modelRendererFieldsMap.size(); i++) {			try {				modelRenderer = (Modchu_ModelRenderer) modelRendererFieldsMap.get(i).get(model);				if (modelRenderer != null) {					showModelMemoryMapPut(modelRenderer, modelRenderer.showModel);					//Modchu_Debug.mDebug("allShowModelMemory modelRendererFieldsMap.get("+i+").getName() = "+modelRendererFieldsMap.get(i).getName()+" modelRenderer.showModel="+modelRenderer.showModel);				}			} catch (Exception e) {				e.printStackTrace();			}		}	}	public void customModelShowModelMemory() {		if (partsMap != null				&& !partsMap.isEmpty()) {			Modchu_ModelRenderer modelRenderer;			boolean b1 = false;			Iterator<Entry<String, Modchu_ModelRenderer>> iterator = partsMap.entrySet().iterator();			Entry<String, Modchu_ModelRenderer> entry;			String key;			while(iterator.hasNext()) {				entry = iterator.next();				key = entry.getKey();				modelRenderer = partsMap.get(key);				customModelShowModelMemoryMapPut(modelRenderer, modelRenderer.showModel);				//Modchu_Debug.mDebug("customModelShowModelMemory get("+key+") showModel="+modelRenderer.showModel);			}		}	}	public void allShowModelMemoryRead() {		Object model = getModel();		Modchu_ModelRenderer modelRenderer;		for (int i = 0; i < modelRendererFieldsMap.size(); i++) {			try {				modelRenderer = (Modchu_ModelRenderer) modelRendererFieldsMap.get(i).get(model);				if (modelRenderer != null) {					((Modchu_ModelRenderer) modelRendererFieldsMap.get(i).get(model)).showModel = showModelMemoryMapGet(modelRenderer);					//Modchu_Debug.mDebug("allShowModelMemory modelRendererFieldsMap.get("+i+").getName() = "+modelRendererFieldsMap.get(i).getName()+" ((ModchuModel_ModelRenderer) modelRendererFieldsMap.get(i).get(model)).showModel="+((ModchuModel_ModelRenderer) modelRendererFieldsMap.get(i).get(model)).showModel);				}			} catch (Exception e) {				e.printStackTrace();			}		}	}	public void customModelShowModelMemoryRead() {		if (partsMap != null				&& !partsMap.isEmpty()) {			Modchu_ModelRenderer modelRenderer;			boolean b1 = false;			Iterator<Entry<String, Modchu_ModelRenderer>> iterator = partsMap.entrySet().iterator();			Entry<String, Modchu_ModelRenderer> entry;			String key;			while(iterator.hasNext()) {				entry = iterator.next();				key = entry.getKey();				modelRenderer = partsMap.get(key);				modelRenderer.showModel = customModelShowModelMemoryMapGet(modelRenderer);				//Modchu_Debug.mDebug("customModelShowModelMemoryRead parts["+key+"].showModel="+modelRenderer.showModel);			}		}	}	public boolean changeModel(ModchuModel_IModelCaps entityCaps) {		Object model = getModel();		if (model != null) ;else return false;		Object entity = baseModel.getCapsValue(entityCaps, entityCaps.caps_Entity);		changeModelInit = true;		changeColor(entityCaps);		Field[] fields = model.getClass().getFields();		Object o;		Modchu_ModelRenderer modelRenderer;		int k = 0;		modelRendererFieldsMap.clear();		for (int i = 0; i < fields.length; i++) {			//Modchu_Debug.mDebug("changeModel fields["+i+"].getType() = "+fields[i].getType());			try {				o = fields[i].get(model);				if (Modchu_ModelRenderer.class.isInstance(o)) {					modelRenderer = (Modchu_ModelRenderer) fields[i].get(model);					if (modelRenderer != null) {						modelRendererFieldsMap.put(k, fields[i]);						k++;					}				}			} catch (Exception e1) {				e1.printStackTrace();			}		}		return model instanceof MultiModelCustom;	}	public boolean changeColor(ModchuModel_IModelCaps entityCaps) {		//Modchu_Debug.mDebug("changeColor");		Object entity = baseModel.getCapsValue(entityCaps, entityCaps.caps_Entity);		Object model = getModel();		if (model != null			&& entityCaps != null) ;else {				if (entityCaps != null) ;else Modchu_Debug.mDebug("ModchuModel_CustomModel colorSetting entityCaps == null !!");				if (model != null) ;else Modchu_Debug.mDebug("ModchuModel_CustomModel colorSetting entityCaps == null !!");				return false;		}		int color = getMaidColor(entityCaps);		//Modchu_Debug.mDebug("tempColor="+tempColor+" color="+color+" colorSettingForcingFlag="+colorSettingForcingFlag);		if (tempColor != color				| guiTextureSelectFlag				| colorSettingForcingFlag) ;else return model instanceof MultiModelCustom;		//Modchu_Debug.mDebug("tempColor="+tempColor+" color="+color+" colorSettingForcingFlag="+colorSettingForcingFlag);		colorSettingForcingFlag = false;		colorSetting(entityCaps, color);		return model instanceof MultiModelCustom;	}	public boolean setDefaultPause(float f, float f1, float f2, float f3, float f4,			float f5, ModchuModel_IModelCaps entityCaps) {		Object model = getModel();		if (model instanceof MultiModelBaseBiped				&& model != null						&& !(model instanceof MultiModelCustom)) ((MultiModelBaseBiped) model).setDefaultPause(f, f1, f2, f3, f4, f5, entityCaps);		return model instanceof MultiModelCustom;	}	public float[] getArmorModelsSize() {		Object model = getModel();		if (model != null				&& !(model instanceof MultiModelCustom)) {			Modchu_Debug.mDebug("getArmorModelsSize model.getClass()="+model.getClass());			return (float[]) Modchu_Reflect.invokeMethod(Modchu_ModelMultiReplacePoint.class, "getArmorModelsSize", model);		}		return null;	}	public boolean renderFirstPersonHand(ModchuModel_IModelCaps entityCaps, float f) {		Object render = Modchu_AS.get(Modchu_AS.renderManagerGetEntityRenderObject);		if (mainModeltexture != null) Modchu_AS.set(Modchu_AS.renderBindTexture, render, mainModeltexture);		Object model = getModel();		if (model != null				&& !(model instanceof MultiModelCustom)) {			if (model instanceof MultiModelBaseBiped) ((MultiModelBaseBiped) model).renderFirstPersonHand(entityCaps, f);			else Modchu_Reflect.invokeMethod(Modchu_ModelMultiReplacePoint.class, "renderFirstPersonHand", new Class[]{ getIModelCapsClass() }, model, new Object[]{ entityCaps });		}		return model instanceof MultiModelCustom;	}	private void loadInit(File file, List list, boolean b) {		List list2 = list != null ? list : !b ? (ArrayList) Modchu_Config.cfgData.get(file) : null;		if (list2 == null) {			list2 = new ArrayList();			BufferedReader breader = null;			try {				breader = new BufferedReader(new FileReader(file));				String rl;				for (int i = 0; (rl = breader.readLine()) != null ; i++) {					int i1;					list2.add(rl);					if (rl.startsWith("#")							| rl.startsWith("/")) continue;					initCheckData(rl.toString());				}				Modchu_Config.cfgData.put(file, list2);			} catch (Exception e) {				//Modchu_Debug.cDebug("ModchuModel_CustomModel loadInit load "+ file.toString() +" load fail.");				e.printStackTrace();			 } finally {				 try {					 if (breader != null) breader.close();				 } catch (Exception e) {				 }			 }		} else {			String s2;			for (int i = 0; i < list2.size() ; i++) {				s2 = (String) list2.get(i);				if (s2.startsWith("#")						| s2.startsWith("/")) continue;				initCheckData(s2.toString());			}		}	}	private void initCheckData(String s) {		s = s.replaceAll(" ", "");		s = s.replaceAll("	", "");		int i1;		if (s.startsWith("name")) {			i1 = s.indexOf('=');			if (i1 > -1) {				return;			}		}		if (s.startsWith("mainModeltextureName")) {			i1 = s.indexOf('=');			if (i1 > -1) {				mainModeltextureName = s.substring(i1 + 1);				//Modchu_Debug.mDebug("ModchuModel_CustomModel initCheckData mainModelName="+s.substring(i1 + 1));				return;			}		}	}	public void save(File file) {		if (!file.exists()) {			try {				BufferedWriter bwriter = new BufferedWriter(new FileWriter(						file));				StringBuilder sb = new StringBuilder();				List list = new ArrayList();				bwriter.write("");				bwriter.newLine();				bwriter.close();				Modchu_Debug.lDebug("ModchuModel_CustomModel "+ file.toString() +" new file create.");			} catch (Exception e) {				Modchu_Debug.lDebug(""+getClass().getName(), "save file="+ file.toString() +" file writer fail.", 2, e);				e.printStackTrace();			}		}		if (file.exists() && file.canRead() && file.canWrite()) {			List lines = getSaveList();			try {			// 保存				if (!lines.isEmpty()						&& (file.exists() || file.createNewFile())						&& file.canWrite()) {					BufferedWriter bwriter = new BufferedWriter(							new FileWriter(file));					String t;					for (int i = 0 ; i < lines.size() ; i++) {						t = (String) lines.get(i);						bwriter.write(t);						bwriter.newLine();					}					bwriter.close();				}			} catch (Exception er) {				Modchu_Debug.lDebug("ModchuModel_CustomModel save file save fail.");				er.printStackTrace();			}		}	}	public List getSaveList() {		List lines = new ArrayList();		String s;		String s1;		StringBuilder sb = new StringBuilder();		sb = sb.append("mainModeltextureName").append("=").append(mainModeltextureName);		lines.add(sb.toString());		lines.add("");		sb.delete(0, sb.length());		if (partsMap != null				&& !partsMap.isEmpty()) {			Modchu_ModelRenderer modelRenderer;			Iterator<Entry<String, Modchu_ModelRenderer>> iterator = partsMap.entrySet().iterator();			Entry<String, Modchu_ModelRenderer> entry;			String key;			int i = 0;			int partsTextureColor;			int partsTextureWidth;			int partsTextureHeight;			float initRotateAngleX;			float initRotateAngleY;			float initRotateAngleZ;			float initRotationPointX;			float initRotationPointY;			float initRotationPointZ;			byte partsType;			byte boxType;			float[] f0;			float[] f1;			Object o;			while(iterator.hasNext()) {				entry = iterator.next();				key = entry.getKey();				modelRenderer = partsMap.get(key);				sb = sb.append("name").append("=").append(key);				lines.add(sb.toString());				sb.delete(0, sb.length());				sb = sb.append("textureName").append("=").append(modelRenderer.getFreeVariable("textureName"));				partsTextureColor = Modchu_CastHelper.Int(modelRenderer.getFreeVariable("partsTextureColor"));				if (partsTextureColor != -1)  sb = sb.append(";").append(partsTextureColor);				lines.add(sb.toString());				sb.delete(0, sb.length());				partsTextureWidth = Modchu_CastHelper.Int(modelRenderer.getFreeVariable("partsTextureWidth"));				sb = sb.append("textureWidth").append("=").append(partsTextureWidth);				lines.add(sb.toString());				sb.delete(0, sb.length());				partsTextureHeight = Modchu_CastHelper.Int(modelRenderer.getFreeVariable("partsTextureHeight"));				sb = sb.append("textureHeight").append("=").append(partsTextureHeight);				lines.add(sb.toString());				sb.delete(0, sb.length());				sb = sb.append("textureOffset").append("=").append(modelRenderer.getTextureOffsetX()).append(",").append(modelRenderer.getTextureOffsetY());				lines.add(sb.toString());				sb.delete(0, sb.length());				for (int i1 = 0; i1 < modelRenderer.cubeList.size(); i1++) {					boxType = Modchu_CastHelper.Byte(modelRenderer.getFreeVariable("boxType"+i1));					o = modelRenderer.getFreeVariable("partsBoxData"+i1);					f0 = o != null							&& o instanceof float[] ? (float[])o : null;					f1 = copyBoxDataFloat(f0);					if (i1 > 0) {						ConcurrentHashMap textureOffsetMap = Modchu_AS.getConcurrentHashMap(Modchu_AS.modelRendererGetTextureOffsetMap, modelRenderer);						String key2 = (String)Modchu_Main.getConcurrentHashMapKey(textureOffsetMap, i1 - 1);						Object textureOffset = textureOffsetMap.get(key2);						sb = sb.append("textureOffset").append("=").append(key2).append(",").append(Modchu_AS.getInt(Modchu_AS.textureOffsetTextureOffsetX, textureOffset)).append(",").append(Modchu_AS.getInt(Modchu_AS.textureOffsetTextureOffsetY, textureOffset));						lines.add(sb.toString());						sb.delete(0, sb.length());					}					switch(boxType) {					case 0:						sb = sb.append("addBox");						break;					case 1:						sb = sb.append("addPlate");						break;					case 2:						sb = sb.append("addBall");						break;					}					sb = sb.append("(").append(f1[0]).append("F,").append(f1[1]).append("F,").append(f1[2]).append("F,").append(f1[3]).append(",").append(f1[4]).append(",").append(f1[5]);					if (boxType != 2) sb = sb.append(",").append(f1[6]).append("F,").append(f1[7]).append("F");					sb = sb.append(")");					lines.add(sb.toString());					sb.delete(0, sb.length());					i++;				}				initRotateAngleX = Modchu_CastHelper.Float(modelRenderer.getFreeVariable("initRotateAngleX"));				initRotateAngleY = Modchu_CastHelper.Float(modelRenderer.getFreeVariable("initRotateAngleY"));				initRotateAngleZ = Modchu_CastHelper.Float(modelRenderer.getFreeVariable("initRotateAngleZ"));				sb = sb.append("setRotateAngle").append("(").append(initRotateAngleX).append("F,").append(initRotateAngleY).append("F,").append(initRotateAngleZ).append("F)");				lines.add(sb.toString());				sb.delete(0, sb.length());				initRotationPointX = Modchu_CastHelper.Float(modelRenderer.getFreeVariable("initRotationPointX"));				initRotationPointY = Modchu_CastHelper.Float(modelRenderer.getFreeVariable("initRotationPointY"));				initRotationPointZ = Modchu_CastHelper.Float(modelRenderer.getFreeVariable("initRotationPointZ"));				sb = sb.append("setRotationPoint").append("(").append(initRotationPointX).append("F,").append(initRotationPointY).append("F,").append(initRotationPointZ).append("F)");				lines.add(sb.toString());				sb.delete(0, sb.length());				ArrayList list = getPartsAddChildLiat(modelRenderer);				if (list != null						&& !list.isEmpty()) {					String s2 = null;					for (int i1 = 0; i1 < list.size(); i1++) {						s2 = (String) list.get(i1);						if (s2 != null) {							sb = sb.append(s2).append(".addChild");							lines.add(sb.toString());							sb.delete(0, sb.length());						}					}				}				partsType = Modchu_CastHelper.Byte(modelRenderer.getFreeVariable("partsType"));				float partsTypeFactor = Modchu_CastHelper.Float(modelRenderer.getFreeVariable("partsTypeFactor"));				float partsTypeCorrection = Modchu_CastHelper.Float(modelRenderer.getFreeVariable("partsTypeCorrection"));				sb = sb.append("type").append("=").append(getPartsTypeString(partsType)).append(";").append(partsTypeFactor).append("F;").append(partsTypeCorrection).append("F");				lines.add(sb.toString());				sb.delete(0, sb.length());				lines.add("");			}		}		return lines;	}	private void load(File file, List list, boolean b, float f, float f1) {		List list2 = list != null ? list : !b ? (ArrayList) Modchu_Config.cfgData.get(file) : null;		String tempPartsName = null;		if (list2 == null) {			list2 = new ArrayList();			BufferedReader breader = null;			try {				breader = new BufferedReader(new FileReader(file));				String rl;				for (int i = 0; (rl = breader.readLine()) != null ; i++) {					int i1;					list2.add(rl);					if (rl.startsWith("#")							| rl.startsWith("/")) continue;					tempPartsName = settingData(tempPartsName, rl.toString(), f, f1);				}				Modchu_Config.cfgData.put(file, list2);				breader.close();			} catch (Exception e) {				//Modchu_Debug.cDebug("Modchu_Config load "+ file.toString() +" load fail.");				e.printStackTrace();			 } finally {				 try {					 if (breader != null) breader.close();				 } catch (Exception e) {				 }			 }		} else {			String s2;			//Modchu_Debug.mDebug("1 file="+file.toString()+" list.size()="+list.size());			for (int i = 0; i < list2.size() ; i++) {				s2 = (String) list2.get(i);				//Modchu_Debug.mDebug("s2="+s2);				if (s2.startsWith("#")						| s2.startsWith("/")) continue;				tempPartsName = settingData(tempPartsName, s2, f, f1);			}		}	}	private String settingData(String tempPartsName, String s, float f, float f1) {		Object model = getModel();		s = s.replaceAll(" ", "");		s = s.replaceAll("	", "");		int i1 = 0;		boolean flag = partsMap != null				&& !partsMap.isEmpty();		if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel tempPartsName="+tempPartsName);		Modchu_ModelRenderer tempModelRenderer = flag ? partsMap.get(tempPartsName) : null;		flag = flag 				&& tempModelRenderer != null;		if (s.startsWith("name")) {			i1 = s.indexOf('=');			if (i1 > -1) {				tempPartsName = s.substring(i1 + 1);				Modchu_ModelRenderer modelRenderer = new Modchu_ModelRenderer((Modchu_ModelMultiReplacePoint) model, tempPartsName);				Modchu_Debug.cDebug("boxName="+modelRenderer.getBoxName());				if (flag) modelRenderer.setFreeVariable("textureName", Modchu_CastHelper.String(tempModelRenderer.getFreeVariable("textureName")));				modelRenderer.setFreeVariable("partsTextureColor", flag ? Modchu_CastHelper.Int(tempModelRenderer.getFreeVariable("partsTextureColor"), -1) : -1);				modelRenderer.setFreeVariable("partsType", flag ? Modchu_CastHelper.Byte(tempModelRenderer.getFreeVariable("partsType"), normal) : normal);				modelRenderer.setFreeVariable("partsTypeCorrection", flag ? Modchu_CastHelper.Float(tempModelRenderer.getFreeVariable("partsTypeCorrection"), 1.0F) : 1.0F);				modelRenderer.setFreeVariable("partsTypeFactor", flag ? Modchu_CastHelper.Float(tempModelRenderer.getFreeVariable("partsTypeFactor"), 0.0F) : 0.0F);				modelRenderer.setTextureSize(flag ? (int)tempModelRenderer.textureWidth : 64, flag ? (int)tempModelRenderer.textureHeight : 32);				modelRenderer.setTextureOffset(flag ? tempModelRenderer.getTextureOffsetX() : 0, flag ? tempModelRenderer.getTextureOffsetY() : 0);				partsMap.put(tempPartsName, modelRenderer);				if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel ------------------- partsName="+tempPartsName);				return tempPartsName;			}		}		if (!flag) return tempPartsName;		if (s.startsWith("textureName")) {			i1 = s.indexOf('=');			if (i1 > -1) {				int i2 = s.indexOf(';');				if (i2 > -1) {					tempModelRenderer.setFreeVariable("partsTextureColor", Byte.valueOf(s.substring(i2 + 1)));					//s = s.substring(0, i2);				}				String textureName = s.substring(i1 + 1);				tempModelRenderer.setFreeVariable("textureName", textureName);				partsMap.put(tempPartsName, tempModelRenderer);				if (debug) Modchu_Debug.mDebug("textureName="+textureName);				return tempPartsName;			}		}		if (s.startsWith("textureWidth")) {			i1 = s.indexOf('=');			if (i1 > -1) {				tempModelRenderer.textureWidth = Integer.valueOf(s.substring(i1 + 1));				if (debug) Modchu_Debug.mDebug("partsTextureWidth="+tempModelRenderer.textureWidth);				partsMap.put(tempPartsName, tempModelRenderer);				return tempPartsName;			}		}		if (s.startsWith("textureHeight")) {			i1 = s.indexOf('=');			if (i1 > -1) {				tempModelRenderer.textureHeight = Integer.valueOf(s.substring(i1 + 1));				if (debug) Modchu_Debug.mDebug("partsTextureHeight="+tempModelRenderer.textureHeight);				partsMap.put(tempPartsName, tempModelRenderer);				return tempPartsName;			}		}		if (s.startsWith("textureOffset")) {			i1 = s.indexOf('=');			if (i1 > -1) {				s = s.substring(i1 + 1);				String[] s0 = s.split(",");				if (s0 != null						&& s0.length > 1) {					int x = 0;					int y = 0;					if (s0.length == 2) {						x = Modchu_Main.integerCheck(s0[0]) ? Integer.valueOf(s0[0]) : 0;						y = Modchu_Main.integerCheck(s0[1]) ? Integer.valueOf(s0[1]) : 0;						tempModelRenderer.setTextureOffset(x, y);					} else if (s0.length > 2) {						String s1 = ""+s0[0];						x = Modchu_Main.integerCheck(s0[1]) ? Integer.valueOf(s0[1]) : 0;						y = Modchu_Main.integerCheck(s0[2]) ? Integer.valueOf(s0[2]) : 0;						tempModelRenderer.setTextureOffset(s1, x, y);					}					if (debug) Modchu_Debug.mDebug("textureOffsetX="+x+" y="+y);					partsMap.put(tempPartsName, tempModelRenderer);					return tempPartsName;				}			}		}		if (s.startsWith("mirror")) {			i1 = s.indexOf('=');			if (i1 > -1) {				tempModelRenderer.mirror = Boolean.valueOf(s.substring(i1 + 1));				if (debug) Modchu_Debug.mDebug("partsMirror="+tempModelRenderer.mirror);				partsMap.put(tempPartsName, tempModelRenderer);				return tempPartsName;			}		}		if (s.startsWith("addBox")				| s.startsWith("addPlate")				| s.startsWith("addBall")) {			byte boxType = (byte) (s.startsWith("addBox") ? 0 : s.startsWith("addPlate") ? 1 : s.startsWith("addBall") ? 2 : 0);			//Modchu_Debug.mDebug("boxType="+boxType);			i1 = s.indexOf('(');			int i2 = s.indexOf(')');			if (i1 > -1					&& i2 > -1) ; else return tempPartsName;			String[] s0 = s.substring(i1 + 1, i2).split(",");			float[] f0 = new float[s0.length];			for (int i = 0; i < f0.length; i++) {				f0[i] = Modchu_Main.floatCheck(s0[i]) ? Float.valueOf(s0[i]) : 0.0F;			}			i1 = tempModelRenderer.cubeList.size();			boolean flag2 = false;			switch (boxType) {			case 0:				Modchu_Debug.cDebug(new StringBuilder().append("ModchuModel_CustomModel addBox(")						.append(f0[0]).append("F,").append(f0[1]).append("F,").append(f0[2]).append("F,")						.append(f0[3]).append(",").append(f0[4]).append(",").append(f0[5]).append(",")						.append(f).append("F*").append(f0[6]).append("F+").append(f0[7]).append("F)").toString());				addBox(tempModelRenderer, f0, f);				flag2 = true;				break;			case 1:				Modchu_Debug.cDebug(new StringBuilder().append("ModchuModel_CustomModel addPlate(")						.append(f0[0]).append("F,").append(f0[1]).append("F,").append(f0[2]).append("F,")						.append(f0[3]).append(",").append(f0[4]).append(",").append(f0[5]).append(",")						.append(f).append("F*").append(f0[6]).append("F+").append(f0[7]).append("F)").toString());				addPlate(tempModelRenderer, f0, f);				flag2 = true;				break;			case 2:				Modchu_Debug.cDebug(new StringBuilder().append("ModchuModel_CustomModel addBall(")						.append(f0[0]).append("F,").append(f0[1]).append("F,").append(f0[2]).append("F,")						.append(f0[3]).append(",").append(f0[4]).append(",").append(f0[5])						.append(")").toString());				addBall(tempModelRenderer, f0, f);				flag2 = true;				break;			}			if (flag2) {				tempModelRenderer.setFreeVariable("boxType"+i1, boxType);				tempModelRenderer.setFreeVariable("partsBoxData"+i1, f0);			}			partsMap.put(tempPartsName, tempModelRenderer);			return tempPartsName;		}		if (s.startsWith("setRotationPoint")) {			i1 = s.indexOf('(');			if (i1 > -1) {				String s1 = null;				float rotationPointX = 0.0F;				float rotationPointY = 0.0F;				float rotationPointZ = 0.0F;				for(int i2 = 0; i2 < 8						&& i1 > -1; i2++) {					s = s.substring(i1 + 1);					i1 = s.indexOf(',');					if (i1 > -1) {						switch (i2) {						case 0:							rotationPointX = Float.valueOf(s.substring(0, i1));							tempModelRenderer.setRotationPointX(rotationPointX);							//Modchu_Debug.mDebug("ModchuModel_CustomModel partsRotationPointX["+partsCount+"]="+partsRotationPointX[partsCount]);							break;						case 1:							rotationPointY = Float.valueOf(s.substring(0, i1));							tempModelRenderer.setRotationPointY(rotationPointY);							//Modchu_Debug.mDebug("ModchuModel_CustomModel partsRotationPointY["+partsCount+"]="+partsRotationPointY[partsCount]);							break;						}					} else {						i1 = s.indexOf(')');						if (i1 > -1) {							rotationPointZ = Float.valueOf(s.substring(0, i1));							tempModelRenderer.setRotationPointZ(rotationPointZ);						}					}				}				tempModelRenderer.setFreeVariable("initRotationPointX", rotationPointX);				tempModelRenderer.setFreeVariable("initRotationPointY", rotationPointY);				tempModelRenderer.setFreeVariable("initRotationPointZ", rotationPointZ);				partsMap.put(tempPartsName, tempModelRenderer);				if (debug) Modchu_Debug.mDebug("ModchuModel_CustomModel partsRotationPoint("+rotationPointX+", "+rotationPointY+", "+rotationPointZ+")");				return tempPartsName;			}		}		if (s.startsWith("setRotateAngle")) {			i1 = s.indexOf('(');			if (i1 > -1) {				String s1 = null;				float rotateAngleX = 0.0F;				float rotateAngleY = 0.0F;				float rotateAngleZ = 0.0F;				for(int i2 = 0; i2 < 8						&& i1 > -1; i2++) {					s = s.substring(i1 + 1);					i1 = s.indexOf(',');					if (i1 > -1) {						switch (i2) {						case 0:							rotateAngleX = Float.valueOf(s.substring(0, i1));							tempModelRenderer.setRotateAngleX(rotateAngleX);							//Modchu_Debug.mDebug("partsRotateAngleX="+rotateAngleX);							break;						case 1:							rotateAngleY = Float.valueOf(s.substring(0, i1));							tempModelRenderer.setRotateAngleY(rotateAngleY);							//Modchu_Debug.mDebug("partsRotateAngleY="+rotateAngleY);							break;						}					} else {						i1 = s.indexOf(')');						if (i1 > -1) {							rotateAngleZ = Float.valueOf(s.substring(0, i1));							tempModelRenderer.setRotateAngleZ(rotateAngleZ);							//Modchu_Debug.mDebug("partsRotateAngleZ="+rotateAngleZ);						}					}				}				tempModelRenderer.setFreeVariable("initRotateAngleX", rotateAngleX);				tempModelRenderer.setFreeVariable("initRotateAngleY", rotateAngleY);				tempModelRenderer.setFreeVariable("initRotateAngleZ", rotateAngleZ);				partsMap.put(tempPartsName, tempModelRenderer);				if (debug) Modchu_Debug.mDebug("RotateAngle("+rotateAngleX+", "+rotateAngleY+", "+rotateAngleZ+")");				return tempPartsName;			}		}		if (s.indexOf("addChild") > -1) {			i1 = s.indexOf('.');			if (i1 > -1) {				s = s.substring(0, i1);				if (!s.equals("null")) {					addPartsAddChildList(s, tempModelRenderer);					partsMap.put(tempPartsName, tempModelRenderer);				}				if (debug) {					Modchu_Debug.mDebug("addChild s="+s);					ArrayList list = getPartsAddChildLiat(tempModelRenderer);					Modchu_Debug.cDebug("addChild name="+tempPartsName);					Modchu_Debug.cDebug("addChild list.size()="+list.size());				}				return tempPartsName;			}		}		if (s.startsWith("type")) {			i1 = s.indexOf('=');			if (i1 > -1) {				s = s.substring(i1 + 1);				i1 = s.indexOf(';');				if (i1 > -1) {					String[] s0 = s.split(";");					s = s0[0];					float ff1 = s0 != null							&& s0.length > 1							&& Modchu_Main.floatCheck(s0[1]) ? Float.valueOf(s0[1]) : 1.0F;					float ff2 = s0 != null							&& s0.length > 2							&& Modchu_Main.floatCheck(s0[2]) ? Float.valueOf(s0[2]) : 0.1F;					tempModelRenderer.setFreeVariable("partsTypeFactor", ff1);					tempModelRenderer.setFreeVariable("partsTypeCorrection", ff2);					//Modchu_Debug.mDebug("ModchuModel_CustomModel partsTypeFactor ff1="+ff1);					//Modchu_Debug.mDebug("ModchuModel_CustomModel partsTypeCorrection ff2="+ff2);				}				byte by = 0;				if (s.equalsIgnoreCase("normal")) by = normal;				else if (s.equalsIgnoreCase("eyeR")) by = eyeR;				else if (s.equalsIgnoreCase("eyeL")) by = eyeL;				else if (s.equalsIgnoreCase("ear")) by = ear;				else if (s.equalsIgnoreCase("tail")) by = tail;				tempModelRenderer.setFreeVariable("partsType", by);				partsMap.put(tempPartsName, tempModelRenderer);				if (debug) Modchu_Debug.mDebug("partsType="+getPartsTypeString(by));				return tempPartsName;			}		}		return tempPartsName;	}	private List<Object[]> partsTextureAndModelRendererListAdd(List<Object[]> textureAndModelRendererList, Modchu_ModelRenderer modelRenderer, Object texture) {		Object[] o = null;		List<Modchu_ModelRenderer> list = null;		int i = 0;		if (!textureAndModelRendererList.isEmpty()) {			for(Object[] o2 : textureAndModelRendererList) {				if (o2[0].equals(texture)) {					o = o2;					list = (List<Modchu_ModelRenderer>) o[1];					break;				}				i++;			}		}		if (o != null) ;else {			list = new ArrayList();			o = new Object[] {					texture, list			};		}		if (!list.contains(modelRenderer)) {			list.add(modelRenderer);			o[1] = list;		}		if (textureAndModelRendererList.size() > i) textureAndModelRendererList.set(i, o);		else textureAndModelRendererList.add(o);		return textureAndModelRendererList;	}	private ArrayList getPartsAddChildLiat(Modchu_ModelRenderer modelRenderer) {		Object o = modelRenderer.getFreeVariable("partsAddChildList");		return o != null				&& o instanceof ArrayList ? (ArrayList)o : new ArrayList();	}	private void addPartsAddChildList(String s, Modchu_ModelRenderer modelRenderer) {		ArrayList list = getPartsAddChildLiat(modelRenderer);		if (!list.contains(s)) {			list.add(s);			modelRenderer.setFreeVariable("partsAddChildList", list);		}	}	public void newMainModelInit() {		String name = mainModeltextureName;		Modchu_Debug.cDebug("newMainModelInit mainModeltextureName="+mainModeltextureName);		if (mainModeltextureName != null) ;else return;		Object[] o = ModchuModel_Main.modelNewInstance(null, mainModeltextureName, true, false);		if (o != null				&& o[0] != null) mainModel = (Object) o[0];		Modchu_Debug.mDebug("newMainModelInit mainModel != null ?"+(mainModel != null)+" getClass()="+(mainModel != null ? mainModel.getClass() : null));	}	private void colorSetting(ModchuModel_IModelCaps entityCaps, int color) {		//Modchu_Debug.mDebug("ModchuModel_CustomModel colorSetting");		Object entity = baseModel.getCapsValue(entityCaps, entityCaps.caps_Entity);		tempColor = color;		String mapKey = cfgName + color;		mainModeltexture = getTexture(entityCaps, baseModel, entity, mainModeltextureName, color);		if (textureListMap.containsKey(mapKey)) {			textureAndModelRendererList = textureListMap.get(mapKey);			//Modchu_Debug.mDebug("textureListMap.get ["+mapKey+"]="+(textureList.get(0)));		} else {			ArrayList<Object[]> tempTextureAndModelRendererList = new ArrayList();			if (partsMap != null					&& !partsMap.isEmpty()) {				Modchu_ModelRenderer modelRenderer;				Iterator<Entry<String, Modchu_ModelRenderer>> iterator = partsMap.entrySet().iterator();				Entry<String, Modchu_ModelRenderer> entry;				String key;				int i = 0;				int partsTextureColor;				while(iterator.hasNext()) {					entry = iterator.next();					key = entry.getKey();					modelRenderer = partsMap.get(key);					partsTextureColor = Modchu_CastHelper.Int(modelRenderer.getFreeVariable("partsTextureColor"));					String s1 = Modchu_CastHelper.String(modelRenderer.getFreeVariable("textureName"));					if (s1 != null) {						int i2 = s1.indexOf(';');						if (i2 > -1) s1 = s1.substring(0, i2);						Object s2 =  baseModel.getCapsValue(entityCaps, baseModel.caps_texture, s1, partsTextureColor == -1 ? color : (int) partsTextureColor);						Modchu_Debug.cDebug("ModchuModel_CustomModel colorSetting add "+s1+" color="+(partsTextureColor == -1 ? color : (int) partsTextureColor)+" texture="+s2);						partsTextureAndModelRendererListAdd(tempTextureAndModelRendererList, modelRenderer, s2);					}					i++;				}				if (!tempTextureAndModelRendererList.isEmpty()) {					textureListMap.put(mapKey, tempTextureAndModelRendererList);					//Modchu_Debug.mDebug("textureListMap.put ["+mapKey+"]="+(tempTextureList.get(0)));				}				textureAndModelRendererList = tempTextureAndModelRendererList;			}		}		//Modchu_Debug.cDebug("ModchuModel_CustomModel colorSetting mainModeltextureName="+mainModeltextureName+" color="+color+" mainModeltexture="+mainModeltexture);	}	private void allShowModelSetting(boolean b) {		Object model = getModel();		Modchu_ModelRenderer modelRenderer;		for (int i = 0; i < modelRendererFieldsMap.size(); i++) {			try {				modelRenderer = (Modchu_ModelRenderer) modelRendererFieldsMap.get(i).get(model);				if (modelRenderer != null) {					if (b) b = showModelMemoryMapGet(modelRenderer);					((Modchu_ModelRenderer) modelRendererFieldsMap.get(i).get(model)).showModel = b;					//Modchu_Debug.mDebug("allShowModelSetting modelRendererFieldsMap.get("+i+").getName() = "+modelRendererFieldsMap.get(i).getName()+" b="+b);				}			} catch (Exception e) {				e.printStackTrace();			}		}	}	private void customModelShowModelSetting(ModchuModel_IModelCaps entityCaps, List<Modchu_ModelRenderer> list, boolean b) {		if (partsMap != null				&& !partsMap.isEmpty()) {			Modchu_ModelRenderer modelRenderer;			Iterator<Entry<String, Modchu_ModelRenderer>> iterator = partsMap.entrySet().iterator();			Entry<String, Modchu_ModelRenderer> entry;			String key;			int i = 0;			boolean b1;			while(iterator.hasNext()) {				entry = iterator.next();				key = entry.getKey();				modelRenderer = partsMap.get(key);				b1 = false;				if (b) b = !getCustomModelShowModelMemoryMap().isEmpty() ? customModelShowModelMemoryMapGet(modelRenderer) : true;				if (list != null						&& !list.isEmpty()) {					for(Modchu_ModelRenderer tempModelRenderer : list) {						if (tempModelRenderer.equals(modelRenderer)) {							b1 = b;							break;						}					}				} else {					b1 = b;				}				//Modchu_Debug.cDebug("customModelShowModelSetting "+partsTextureNameMap.get(i)+" customModelshowModelMemoryListGet(parts["+i+"])="+(customModelshowModelMemoryListGet(modelRenderer))+" s="+s+" b="+b+" b1="+b1);				modelRenderer.showModel = b1;				i++;			}		}	}	private void customModelShowModelSetting(ModchuModel_IModelCaps entityCaps, Modchu_ModelRenderer modelRenderer, boolean b) {		if (modelRenderer != null) {			boolean b1 = false;			if (b) {				b1 = ModchuModel_ModelCapsHelper.getCapsValueInt(entityCaps, entityCaps.caps_showModelSettingBoolean, modelRenderer, ModchuModel_ModelCapsHelper.getCapsValueInt(baseModel, baseModel.caps_armorType)) != 0 ? true : false;				//Modchu_Debug.mDebug("customModelShowModelSetting b1="+b1);			}			modelRenderer.showModel = b1;		}	}	public int showArmorParts(ModchuModel_IModelCaps entityCaps, int i, int i2) {		if (entityCaps != null) ;else {			baseModel.setCapsValue(baseModel.caps_armorType, i == 1 ? 2 : 1);		}		showArmorPartsNumber = i;		Object model = getModel();		return model != null				&& !(model instanceof MultiModelCustom) ?						(Integer) (model != null ? Modchu_Reflect.invokeMethod(Modchu_ModelMultiReplacePoint.class, "showArmorParts", new Class[]{ int.class, int.class }, model, new Object[]{ i, i2 }) : -1) :							model instanceof MultiModelCustom ? -2 : -1;	}	public String getUsingTexture() {		return null;	}	public boolean defaultSkirtFloatsAddChild() {		Object model = getModel();		if (model != null				&& model instanceof MultiModelSkirtFloats				&& !(model instanceof MultiModelCustom)) ((MultiModelSkirtFloats) model).defaultSkirtFloatsAddChild();		return model instanceof MultiModelCustom;	}	public boolean defaultAddChild() {		Object model = getModel();		clearAllAddChild();		boolean b = model != null				&& model instanceof MultiModelCustom;		if (model != null				&& model instanceof MultiModelBaseBiped				&& !(model instanceof MultiModelCustom)) {			((MultiModelBaseBiped) model).defaultAddChild();			b = false;		}		defaultCustomAddChild();		return b;	}	private void clearAllAddChild() {		Modchu_ModelRenderer modelRenderer;		Iterator<Entry<String, Modchu_ModelRenderer>> iterator = partsMap.entrySet().iterator();		Entry<String, Modchu_ModelRenderer> entry;		String key;		boolean b1;		while(iterator.hasNext()) {			entry = iterator.next();			key = entry.getKey();			modelRenderer = entry.getValue();			modelRenderer.clearChildModels();			modelRenderer.clearBoneChildModels();			modelRenderer.clearBoneSpecialChildModels();;		}	}	private void defaultCustomAddChild() {		Modchu_Debug.cDebug("defaultCustomAddChild");		Modchu_ModelRenderer modelRenderer;		Iterator<Entry<String, Modchu_ModelRenderer>> iterator = partsMap.entrySet().iterator();		Entry<String, Modchu_ModelRenderer> entry;		String key;		boolean b1;		ArrayList list;		Modchu_Debug.cDebug("defaultCustomAddChild partsMap.size()="+partsMap.size());		while(iterator.hasNext()) {			entry = iterator.next();			modelRenderer = entry.getValue();			list = getPartsAddChildLiat(modelRenderer);			Modchu_Debug.cDebug("defaultCustomAddChild name="+entry.getKey());			Modchu_Debug.cDebug("defaultCustomAddChild boxName="+modelRenderer.getBoxName());			Modchu_Debug.cDebug("defaultCustomAddChild list.size()="+list.size());			if (list != null					&& !list.isEmpty()) {				for (int i = 0; i < list.size(); i++) {					key = (String) list.get(i);					partsAddChildSetting(key, modelRenderer);				}			}		}	}	public boolean actionPartsAddChild() {		Object model = getModel();		if (model != null				&& model instanceof MultiModelAction				&& !(model instanceof MultiModelCustom)) ((MultiModelAction) model).actionPartsAddChild();		return model instanceof MultiModelCustom;	}	public boolean boneProcessing(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IModelCaps entityCaps) {		Object model = getModel();		if (model != null				&& model instanceof MultiModelAction				&& !(model instanceof MultiModelCustom)) ((MultiModelAction) model).boneProcessing(f, f1, f2, f3, f4, f5, entityCaps);		return model instanceof MultiModelCustom;	}	public Object getModel() {		return mainModel != null ? mainModel : baseModel;	}	private String obfuscationNameCheck(String s) {/*		if (!Modchu_Main.isRelease()				| Modchu_Main.isForge) return s;		String[] s1 = {				"bipedHead", "bipedHeadwear", "bipedBody",				"bipedRightArm", "bipedLeftArm", "bipedRightLeg", "bipedLeftLeg", "bipedCloak",				"bipedEars"		};		String[] s2 = {				"c", "d", "e",				"f", "g", "h", "i", "j",				"k"		};		for(int i = 0; i < s1.length; i++) {			if (s.equalsIgnoreCase(s1[i])) return s2[i];		}*/		return s;	}	public static String getPartsTypeString(byte by) {		String s = null;		switch (by) {		case 0:			s = "normal";			break;		case 1:			s = "eyeR";			break;		case 2:			s = "eyeL";			break;		case 3:			s = "ear";			break;		case 4:			s = "tail";			break;		}		return s;	}	private Class getIModelCapsClass() {		return isLMMModel ? Modchu_Reflect.loadClass("MMM_IModelCaps") : ModchuModel_IModelCaps.class;	}	private int getArmorType() {		return ModchuModel_ModelCapsHelper.getCapsValueInt(baseModel, baseModel.caps_armorType);	}	private boolean getIsRendering(ModchuModel_IModelCaps entityCaps, int i) {		Object entity = baseModel.getCapsValue(entityCaps, entityCaps.caps_Entity);		if (ModchuModel_ModelCapsHelper.getCapsValueByte(entityCaps, entityCaps.caps_EntityType) == entityCaps.entityType_LMM) {			boolean isInvisible = (Boolean) Modchu_Reflect.invokeMethod(entity.getClass(), "func_82150_aj", "isInvisible", entity);			if (i == 0					&& (!ModchuModel_Main.useInvisibilityBody					| (ModchuModel_Main.useInvisibilityBody					&& !isInvisible))) return true;			if (i > 0					&& (!ModchuModel_Main.useInvisibilityArmor					| (ModchuModel_Main.useInvisibilityArmor					&& !isInvisible))) return true;			return false;		}		return allRendering ? true : ModchuModel_ModelCapsHelper.getCapsValueBoolean(entityCaps, entityCaps.caps_isRendering);	}	private Object getTexture(ModchuModel_IModelCaps entityCaps, Object model, Object entity, String s, int i) {		int armorType = getArmorType();		String mapKey = cfgName +","+ s +"," + i +"," + armorType;		if (mainTextureMap.containsKey(mapKey)) return mainTextureMap.get(mapKey);		Object s1 = armorType < 1 ?				baseModel.getCapsValue(entityCaps, baseModel.caps_texture, s, i) :					baseModel.getCapsValue(entityCaps, baseModel.caps_armorTexture, s, armorType == 1 ? 64 : 80);		//Modchu_Debug.mDebug("getTexture s="+s+" i="+i+" armorType="+armorType+" s1="+s1);		if (s1 != null) mainTextureMap.put(mapKey, s1);		return s1;	}	private int getMaidColor(ModchuModel_IModelCaps entityCaps) {		Object entity = baseModel.getCapsValue(entityCaps, entityCaps.caps_Entity);		Object o = null;		Object currentScreen = Modchu_AS.get(Modchu_AS.minecraftCurrentScreen);		if (guiTextureSelectFlag) {			if (tempSelectPanel != null) {				if (tempGuiEntitySelectEntity != null) ;else tempGuiEntitySelectEntity = Modchu_Reflect.getFieldObject("MMM_GuiTextureSlot", "entity", tempSelectPanel);				if (tempGuiEntitySelectEntity != null) {					allRendering = true;					o = (Integer) Modchu_Reflect.invokeMethod("MMM_EntitySelect", "getColor", tempGuiEntitySelectEntity);					//Modchu_Debug.Debug("getMaidColor MMM_GuiTextureSelect o="+o);				}			}		} else if (entityType == LMM) {			if (Modchu_Main.getMinecraftVersion() > 159) {				o = Modchu_Reflect.getFieldObject("LMM_EntityLittleMaid", "textureData", entity);				if (o != null) o = (Integer) Modchu_Reflect.invokeMethod("MMM_TextureData", "getColor", o);			} else{				o = (Integer) Modchu_Reflect.getFieldObject("LMM_EntityLittleMaid", "maidColor", entity);			}			//allRendering = true;			//Modchu_Debug.Debug("getMaidColor mod_LMM_littleMaidMob");		} else {			//Modchu_Debug.Debug("getMaidColor !LMM ?"+(entity.getClass()));			o = ModchuModel_ModelCapsHelper.getCapsValueInt(baseModel, entityCaps, baseModel.caps_maidColor, entity);		}		if (o != null) {			//Modchu_Debug.Debug("getMaidColor o="+o);			return (Integer) o;		}		return 0;	}	private HashMap<Modchu_ModelRenderer, Boolean> getShowModelMemoryMap() {		return showModelMemoryMap;	}	private boolean showModelMemoryMapGet(Modchu_ModelRenderer modelRenderer) {		return showModelMemoryMap.containsKey(modelRenderer) ? showModelMemoryMap.get(modelRenderer) : false;	}	private void showModelMemoryMapPut(Modchu_ModelRenderer modelRenderer, boolean b) {		showModelMemoryMap.put(modelRenderer, b);	}	private HashMap<Modchu_ModelRenderer, Boolean> getCustomModelShowModelMemoryMap() {		return customModelShowModelMemoryMap;	}	private boolean customModelShowModelMemoryMapGet(Modchu_ModelRenderer modelRenderer) {		return customModelShowModelMemoryMap.containsKey(modelRenderer) ? customModelShowModelMemoryMap.get(modelRenderer) : false;	}	private void customModelShowModelMemoryMapPut(Modchu_ModelRenderer modelRenderer, boolean b) {		customModelShowModelMemoryMap.put(modelRenderer, b);	}}