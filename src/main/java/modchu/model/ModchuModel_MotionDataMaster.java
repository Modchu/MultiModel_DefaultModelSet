package modchu.model;import java.io.BufferedReader;import java.io.File;import java.io.FileInputStream;import java.io.LineNumberReader;import java.io.UnsupportedEncodingException;import java.lang.reflect.Method;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map.Entry;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_FileManager;import modchu.lib.Modchu_Main;import modchu.lib.characteristic.Modchu_AS;public class ModchuModel_MotionDataMaster {	public static ArrayList<ModchuModel_MotionData> motionDataList = new ArrayList();	private static ArrayList<File> motionList = new ArrayList();	private static int tempI = 0;	private static boolean debug = false;	public static boolean debugD = true;	private static boolean debugC = false;	private static boolean debugReload = false;	//private static String[] tempData;	public static ModchuModel_MotionData loadMotionData(int i, String[] nameArray, Object methodObject, Method method) {		//if (debug) Modchu_Debug.mDebug("ModchuModel_MotionDataMaster loadMotionData");		ModchuModel_MotionData motionData = getMotionData(i);		if (motionData != null) return motionData;		if (ModchuModel_ThreadMotionDataRead.instance != null); else {			ModchuModel_ThreadMotionDataRead.instance = new ModchuModel_ThreadMotionDataRead();			ModchuModel_ThreadMotionDataRead.instance.regster(methodObject, method);			ModchuModel_ThreadMotionDataRead.instance.regster(i, nameArray);			ModchuModel_ThreadMotionDataRead.instance.start();		}		return null;	}	public static ModchuModel_MotionData threadLoadMotionData(int i, String[] nameArray) {		ModchuModel_MotionData motionData = getMotionData(i);		if (motionData != null) return motionData;		motionData = new ModchuModel_MotionData();		BufferedReader breader = null;		LineNumberReader fin = null;		File file = null;		tempI = 0;		if (motionList.isEmpty()				| debugReload) loadMotionFileInit();		try {			file = motionList.get(i);			if (debug) Modchu_Debug.mDebug("ModchuModel_MotionDataMaster file="+file);			if (file != null) {				ModchuModel_FileInputStreamReader reader = new ModchuModel_FileInputStreamReader(new FileInputStream(file));			    String version = new String(cutDataBytes(reader.readBytes(0, 30)));			    String modelName = new String(cutDataBytes(reader.readBytes(0, 20)));				long maxFrame = reader.readInt();				byte[][] by = new byte[(int)maxFrame][64];				float f;				if (debug) Modchu_Debug.mDebug("ModchuModel_MotionDataMaster maxFrame="+maxFrame);				for (int i1 = 0; i1 < maxFrame; i1++) {					if (debugD) Modchu_Debug.dDebug("MotionData Load ("+i1+" / "+maxFrame+" )", 1);					String name = new String(cutDataBytes(reader.readBytes(0, 15)));					if (debug) Modchu_Debug.mDebug("ModchuModel_MotionDataMaster name="+name);					int frame = (int)reader.readIntL();					if (debug) Modchu_Debug.mDebug("ModchuModel_MotionDataMaster frame="+frame);					float[] dataF = new float[6];					for (int i2 = 0; i2 < dataF.length; i2++) {						int deba = reader.readInt();						if (debug) Modchu_Debug.mDebug("ModchuModel_MotionDataMaster deba="+deba);						f = Float.intBitsToFloat(deba);						//f = reader.readFloat();						if (debug) Modchu_Debug.mDebug("ModchuModel_MotionDataMaster i2="+i2+" f="+f);						dataF[i2] = floatMaxCheck(f * (i2 > 2 ? 1.57F : 1.0F));						if (debug) Modchu_Debug.mDebug("ModchuModel_MotionDataMaster dataF["+i2+"]="+dataF[i2]);					}					int deba = reader.readInt();					if (debug) Modchu_Debug.mDebug("ModchuModel_MotionDataMaster f deba="+deba);					f = Float.intBitsToFloat(deba);					//f = reader.readFloat();					if (debug) Modchu_Debug.mDebug("ModchuModel_MotionDataMaster f="+f);					//if (f < 0) dataF[dataF.length - 1] = -dataF[dataF.length - 1];					by[i1] = reader.readBytes(0, 64);					motionData = addMotionData(motionData, nameArray, name, frame, dataF);				}				motionData.setMaxMotionFrame(tempI);				if (debugD) Modchu_Debug.dDebug(null, 1);			}		} catch (Exception e) {			if (debug) Modchu_Debug.lDebug("ModchuModel_MotionDataMaster loadMotionFile load fail. file ="+(file != null ? file.toString() : null)+" i="+i, 2, e);			e.printStackTrace();		} finally {			try {				if (breader != null) breader.close();			} catch (Exception e) {			}			try {				if (fin != null) fin.close();			} catch (Exception e) {			}		}		setMotionDataMap(i, motionData);		if (debug) Modchu_Debug.mDebug("ModchuModel_MotionDataMaster end.");//return null;		return motionData;	}/*	public static ModchuModel_MotionData threadLoadMotionData(int i, String[] nameArray) {		ModchuModel_MotionData motionData = getMotionData(i);		if (motionData != null) return motionData;		motionData = new ModchuModel_MotionData();		BufferedReader breader = null;		LineNumberReader fin = null;		File file = null;		tempI = 0;		if (motionList.isEmpty()				| debugReload) loadMotionFileInit();		try {			file = motionList.get(i);			if (debug) Modchu_Debug.mDebug("ModchuModel_MotionDataMaster file="+file);			if (file != null) {				breader = new BufferedReader(new InputStreamReader(new FileInputStream(file), "Shift_JIS"));				String rl;				boolean initFrameCheck = false;				String[] s0 = null;				if (debugD) {					fin = new LineNumberReader(new InputStreamReader(new FileInputStream(file), "Shift_JIS"));					String aLine;					while( null != (aLine = fin.readLine()) ){					}				}				for (int i1 = 0; (rl = breader.readLine()) != null ; i1++) {					if (debug) Modchu_Debug.mDebug("ModchuModel_MotionDataMaster rl="+rl);					if (debugD) Modchu_Debug.dDebug("MotionData Load ("+i1+" / "+fin.getLineNumber()+" )", 1);					if (motionStringFrameCheck(rl)) {						if (!initFrameCheck) {							if (debug) Modchu_Debug.mDebug("ModchuModel_MotionDataMaster setMotionDataFrame rl="+rl);							motionData = setMotionDataFrame(motionData, rl);							initFrameCheck = true;						} else {							if (debug) Modchu_Debug.mDebug("ModchuModel_MotionDataMaster addMotionData initFrameCheck motion data end break. rl="+rl);							break;						}					}					if (motionStringCheck(rl)) {						if (debug) Modchu_Debug.mDebug("ModchuModel_MotionDataMaster addMotionData rl="+rl);						motionData = addMotionData(motionData, nameArray, rl);					}					//Thread.sleep(10L);				}				motionData.setMaxMotionFrame(tempI);				if (debugD) Modchu_Debug.dDebug(null, 1);			}		} catch (Exception e) {			if (debug) Modchu_Debug.lDebug("ModchuModel_MotionDataMaster", "loadMotionFile load fail. file ="+(file != null ? file.toString() : null)+" i="+i, 2, e);			e.printStackTrace();		} finally {			try {				if (breader != null) breader.close();			} catch (Exception e) {			}			try {				if (fin != null) fin.close();			} catch (Exception e) {			}		}		setMotionDataMap(i, motionData);		return motionData;	}*/	public static ModchuModel_MotionData getMotionData(int i) {		ModchuModel_MotionData modelData = motionDataList != null				&& !motionDataList.isEmpty() ? motionDataList.get(i) : null;		//Modchu_Debug.mDebug("getMotionData modelData="+modelData);		if (debugReload) motionDataList.remove(i);		return modelData;	}	public static void setMotionDataMap(int i, ModchuModel_MotionData motionData) {		if (motionDataList != null				&& !motionDataList.isEmpty()				&& motionDataList.get(i) != null) motionDataList.set(i, motionData);		else motionDataList.add(i, motionData);	}	public static void loadMotionFileInit() {		File cfgdir = new File(Modchu_AS.getFile(Modchu_AS.minecraftMcDataDir), "/motion/");		//Modchu_Debug.lDebug("loadMotionFileInit() cfgdir.getAbsolutePath()="+cfgdir.getAbsolutePath());		motionList = Modchu_FileManager.listFiles(cfgdir.getAbsolutePath(), "*.vmd");		//Modchu_Debug.lDebug("loadMotionFileInit() motionList.size()="+motionList.size());		//Modchu_Debug.lDebug("loadMotionFileInit() motionList.get(0)="+motionList.get(0));	}/*	private static boolean motionStringCheck(String s) {		if (s != null); else return false;		//int cnt = rl.replaceAll("[^,]", "").length();		return s.replaceAll("[^,]", "").length() > 7;	}	private static boolean motionStringFrameCheck(String s) {		if (s != null); else return false;		return s.indexOf(",") < 0				&& Modchu_Main.integerCheck(s) ? true : false;	}*/	private static ModchuModel_MotionData addMotionData(ModchuModel_MotionData motionData, String[] nameArray, String name, int frame, float[] dataF) {		if (name != null				&& dataF != null				&& frame > -1); else return motionData;		boolean flag = true;		if (nameArray != null) {			flag = false;			for (int i1 = 0; i1 < nameArray.length; i1++) {				if (nameArray[i1].equalsIgnoreCase(name)) {					if (debug) Modchu_Debug.mDebug("ModchuModel_MotionDataMaster addMotionData nameArray check ok.");					flag = true;					break;				}			}		}		if (!flag) {			if (debug) Modchu_Debug.mDebug("ModchuModel_MotionDataMaster addMotionData nameArray check NG return.");			return motionData;		}		motionData.addNameList(name);		motionData.putFrameStringMap(name);		//List list = motionData.getFrameStringList(name);		motionData.putDataMap(frame, new Object[]{ name, dataF });		if (debug) Modchu_Debug.mDebug("ModchuModel_MotionDataMaster addMotionData putDataList="+(name + "," + frame));		//list.add(frame);		if (frame > tempI) tempI = frame;		//motionData.putFrameStringMap(name, list);		if (debug) Modchu_Debug.mDebug("ModchuModel_MotionDataMaster addMotionData end frame="+frame);		//tempData = name;		return motionData;	}/*	private static ModchuModel_MotionData addMotionData(ModchuModel_MotionData motionData, String[] nameArray, String s) {		int i = 0;		i = s.indexOf(",");		if (i < 0) {			if (debug) Modchu_Debug.mDebug("ModchuModel_MotionDataMaster addMotionData 1 error s="+s);			return motionData;		}		String[] s0 = s.split(",");		String s1 = null;		s1 = s0[0];		if (debug) Modchu_Debug.mDebug("ModchuModel_MotionDataMaster addMotionData 1 s1="+s1);		if (s1 != null); else return null;		boolean flag = true;		if (nameArray != null) {			flag = false;			for (int i1 = 0; i1 < nameArray.length; i1++) {				if (nameArray[i1].equalsIgnoreCase(s1)) {					if (debug) Modchu_Debug.mDebug("ModchuModel_MotionDataMaster addMotionData nameArray check ok.");					flag = true;					break;				}			}		}		if (!flag) {			if (debug) Modchu_Debug.mDebug("ModchuModel_MotionDataMaster addMotionData nameArray check NG return.");			return motionData;		}		motionData.addNameList(s1);		motionData.putFrameStringMap(s1);		//List list = motionData.getFrameStringList(s1);		float[] dataF = new float[s0.length - 3];		String s2 = null;		if (s0.length < 2) {			if (debug) Modchu_Debug.mDebug("ModchuModel_MotionDataMaster addMotionData 2 error s0.length="+s0.length);			return motionData;		}		for (int i2 = 0; i2 < dataF.length; i2++) {			s2 = s0[i2 + 2];			dataF[i2] = Modchu_CastHelper.Float(s2);			dataF[i2] = floatMaxCheck(dataF[i2]);		}		if (debug) {			String debaS = "";			for (int i2 = 0; i2 < dataF.length; i2++) {				debaS = debaS.concat(","+dataF[i2]);			}			Modchu_Debug.mDebug("ModchuModel_MotionDataMaster addMotionData 2 "+debaS);		}		int frame = Modchu_CastHelper.Int(""+s0[1]);		if (frame < 0) {			if (debug) Modchu_Debug.mDebug("ModchuModel_MotionDataMaster addMotionData  frame < 0 return.");			return motionData;		}		motionData.putDataMap(frame, new Object[]{ s1, dataF });		if (debug) Modchu_Debug.mDebug("ModchuModel_MotionDataMaster addMotionData putDataList="+(s1 + "," + frame));		//list.add(frame);		if (frame > tempI) tempI = frame;		//motionData.putFrameStringMap(s1, list);		if (debug) Modchu_Debug.mDebug("ModchuModel_MotionDataMaster addMotionData end frame="+frame);		//tempData = s0;		return motionData;	}*/	private static float floatMaxCheck(float f) {		while(f >= 180F				| f < -180F) {			if (f >= 180F) f = f - 180F;			if (f < -180F) f = f + 180F;		}		return f;	}	private static ModchuModel_MotionData setMotionDataFrame(ModchuModel_MotionData motionData, String s) {		motionData.setFrame(Integer.valueOf(s));		return motionData;	}	public static ModchuModel_MotionData completionMotionData(ModchuModel_MotionData motionData) {		//Modchu_Debug.mDebug("MotionData completionMotionData 1");		if (motionData != null); else return motionData;		List<Object[]> dataList;		int count = 0;		Object[] data = null;		Object[] tempData = null;		HashMap<Integer, List<Object[]>> dataMap = Modchu_Main.cloneHashMap(motionData.getDataMap());		//Modchu_Debug.mDebug("MotionData completionMotionData 2");		int max = Modchu_Main.hashMapKeyCount(dataMap);		//Modchu_Debug.mDebug("MotionData completionMotionData 3");		List<String> nameList = motionData.getNameList();		if (nameList != null				&& !nameList.isEmpty()); else {			if (debugC) Modchu_Debug.mDebug("MotionData completionMotionData nameList null !! return.");			return motionData;		}		String s1;		int tempI0 = 0;		int completeDataCount = motionData.getCompleteDataCount();		int maxMotionFrame = motionData.getMaxMotionFrame();		if (completeDataCount >= maxMotionFrame) {			motionData.setCompleteData(true);			return motionData; 		}		int readAmount = 60;		int readMax = completeDataCount + readAmount > maxMotionFrame ? completeDataCount + readAmount : maxMotionFrame;		for (int i0 = 0; i0 < nameList.size(); i0++) {			s1 = nameList.get(i0);			tempData = null;			tempI0 = 0;			if (debugD) count = 0;			for (int i = completeDataCount; i < readMax; i++) {				if (dataMap.containsKey(i)); else continue;				dataList = dataMap.get(i);				if (!dataList.isEmpty()) {					for (int i1 = 0; i1 < dataList.size(); i1++) {						data = dataList.get(i1);						if (data != null								&& data instanceof Object[]); else {							if (debugC) Modchu_Debug.mDebug("MotionData completionMotionData data error data="+data);							continue;						}						String s0 = (String)data[0];						if (s1.equalsIgnoreCase(s0)) {							motionData = completionMotionData(motionData, i, tempI0, data, tempData);							tempData = data;							tempI0 = i;						}					}				}				motionData.setCompleteDataCount(i);				//Modchu_Debug.mDebug("MotionData completionMotionData ( "+i0+" / "+nameList.size()+" ) ( "+count+" / "+max+" )");				if (debugD) {					Modchu_Debug.dDebug("MotionData completionMotionData ( "+i0+" / "+nameList.size()+" ) ( "+count+" / "+max+" )", 1);					count++;				}			}		}		if (debugD) Modchu_Debug.dDebug(null, 1);		if (debugC) Modchu_Debug.mDebug("MotionData completionMotionData end.");		completeDataCount = motionData.getCompleteDataCount();		if (completeDataCount >= maxMotionFrame) {			motionData.setCompleteData(true);			return motionData; 		}		return motionData;	}	public static ModchuModel_MotionData debugMotionData(ModchuModel_MotionData motionData) {		//Modchu_Debug.mDebug("MotionData debugMotionData 1");		if (motionData != null); else return motionData;		int count = 0;		Object[] data = null;		Object[] tempData = null;		HashMap<Integer, List<Object[]>> dataMap = Modchu_Main.cloneHashMap(motionData.getDataMap());		//Modchu_Debug.mDebug("MotionData debugMotionData 2");		int max = Modchu_Main.hashMapKeyCount(dataMap);		Entry entry;		//Modchu_Debug.mDebug("MotionData debugMotionData 3");		List<String> nameList = motionData.getNameList();		if (nameList != null				&& !nameList.isEmpty()); else {			return motionData;		}		String s1;		tempData = null;		for (Entry<Integer, List<Object[]>> en : dataMap.entrySet()) {			int i = en.getKey();			List<Object[]> dataList = en.getValue();			if (debugD) count = 0;				if (!dataList.isEmpty()) {					for (int i1 = 0; i1 < dataList.size(); i1++) {						data = dataList.get(i1);						if (data != null								&& data instanceof Object[]); else {							Modchu_Debug.lDebug("MotionData debugMotionData data error data="+data, 0, null);							continue;						}						String s0 = (String)data[0];						float[] dataF = (float[])data[1];						String ds = ""+data[0]+",";						for (int i2 = 0; i2 < dataF.length; i2++) {							ds += ""+dataF[i2]+",";						}						Modchu_Debug.lDebug("MotionData debugMotionData "+count+":"+ds, 0, null);					}				}				Modchu_Debug.dDebug("MotionData debugMotionData", 1);				count++;			}		Modchu_Debug.dDebug(null, 1);		Modchu_Debug.mDebug("MotionData debugMotionData end.");		return motionData;	}	private static ModchuModel_MotionData completionMotionData(ModchuModel_MotionData motionData, int frame, int tempFrame, Object[] data, Object[] tempData) {		if (tempFrame + 1 < frame); else {			if (debugC) Modchu_Debug.mDebug("ModchuModel_MotionDataMaster completionMotionData 1 frame else return. frame="+frame+" tempFrame="+tempFrame);			return motionData;		}		if (data != null				&& tempData != null); else return motionData;		String s0 = (String)data[0];		String s1 = (String)tempData[0];		float[] dataF = (float[])data[1];		float[] tempDataF = (float[])tempData[1];		if (s1.equalsIgnoreCase(s0)				&& tempDataF.length > 5); else {			if (debugC) {				Modchu_Debug.mDebug("ModchuModel_MotionDataMaster completionMotionData 1 else return. s1="+s1);				if (dataF != null) {					Modchu_Debug.mDebug("ModchuModel_MotionDataMaster completionMotionData 1 else return. s0="+s0);					Modchu_Debug.mDebug("ModchuModel_MotionDataMaster completionMotionData 1 else return. dataF="+dataF);				} else {					Modchu_Debug.mDebug("ModchuModel_MotionDataMaster completionMotionData 1 else return. dataF == null !!");				}			}			return motionData;		}		if (debugC) 			Modchu_Debug.mDebug("ModchuModel_MotionDataMaster completionMotionData 1 frame="+frame+" tempFrame="+tempFrame);		//List list = motionData.getFrameStringList(s0[0]);		float f1;		float f2;		int frameDifference = frame - tempFrame;		if (debugC) Modchu_Debug.mDebug("ModchuModel_MotionDataMaster completionMotionData frameDifference="+frameDifference);		int i = tempFrame;		//Modchu_Debug.mDebug("completionMotionData s0="+s0+" i="+i, 1);		for (int i4 = frameDifference - 1; i4 > 0; i4--) {			i++;			//Modchu_Debug.mDebug("completionMotionData ("+i4+" / "+frameDifference+")", 1);			float[] completionDataF = new float[dataF.length];			for (int i3 = 0; i3 < dataF.length; i3++) {				f1 = dataF[i3];				f2 = tempDataF[i3];				completionDataF[i3] = f1 - ((f1- f2) / ((float)frameDifference / (float)i4));				if (f1 > 180F) Modchu_Debug.mDebug("ModchuModel_MotionDataMaster completionMotionData 2 over !!!!!!!!!!!!!!!!!!!!!!!! f1="+f1);				if (debugC) Modchu_Debug.mDebug("ModchuModel_MotionDataMaster completionMotionData 2 f1="+f1+" ~ f2="+f2+" i2["+i3+"]="+completionDataF[i3]);			}			motionData.putDataMap(i, new Object[]{ s0, completionDataF });			if (debugC) Modchu_Debug.mDebug("ModchuModel_MotionDataMaster completionMotionData putDataList s0="+s0+" i="+i);			//list.add(i);		}		//motionData.putFrameStringMap(s0[0], list);		return motionData;	}	private static String cutDataBytes(byte[] s) throws UnsupportedEncodingException {		int i1 = 0;		for (int i = 0; i < s.length; i++) {			if (s[i] == 0) {				i1 = i;				break;			}		}		byte[] by = new byte[i1];		for (int i = 0; i < i1; i++) {			by[i] = s[i];		}		String s0 = new String(by, "shift-jis");		return new String(s0.getBytes("utf-8"), "utf-8");	}}