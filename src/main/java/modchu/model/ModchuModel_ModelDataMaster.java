package modchu.model;import java.awt.image.BufferedImage;import java.io.File;import java.io.IOException;import java.io.InputStream;import java.util.LinkedList;import java.util.List;import java.util.Map;import java.util.concurrent.ConcurrentHashMap;import javax.imageio.ImageIO;import modchu.lib.Modchu_AS;import modchu.lib.Modchu_CastHelper;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_IEntityCapsBase;import modchu.lib.Modchu_LMMManager;import modchu.lib.Modchu_Main;import modchu.lib.Modchu_Reflect;import modchu.model.multimodel.base.MultiModel;import modchu.model.multimodel.base.MultiModelBaseBiped;public class ModchuModel_ModelDataMaster {	public static ModchuModel_ModelDataMaster instance = new ModchuModel_ModelDataMaster();	protected ConcurrentHashMap<Object, ModchuModel_ModelDataBase> dataMap = new ConcurrentHashMap();	protected ConcurrentHashMap dataLMMCapsMap = new ConcurrentHashMap();	public Object steveTexture;	private int steveTextureWidth;	private int steveTextureHeight;	public boolean resetFlag = false;	public ModchuModel_ModelDataBase dummyData;	//public Date timeDate;	public ModchuModel_ModelDataMaster() {		instance = this;		steveTexture = Modchu_Main.getMinecraftVersion() > 159 ? Modchu_Reflect.newInstance("ResourceLocation", new Class[]{ String.class }, new Object[]{ "textures/entity/steve.png" }) : "/mob/char.png";		File url;		BufferedImage bufferedimage = null;/*		if (Modchu_Main.getMinecraftVersion() > 159) {			Object textureManager = Modchu_AS.get(Modchu_AS.minecraftTextureManager);			Modchu_AS.set(Modchu_AS.textureManagerBindTexture, textureManager, steveTexture);		}*/		//Object texture = Modchu_AS.get(Modchu_AS.textureManagerGetTexture, textureManager, steveTexture);		Object iresource = Modchu_AS.get(Modchu_AS.resourceManagerGetResource, steveTexture);		InputStream inputstream = null;		if (iresource != null) {			inputstream = Modchu_AS.getInputStream(Modchu_AS.resourceGetInputStream, iresource);			if (inputstream != null) {				try {					bufferedimage = ImageIO.read(inputstream);				} catch (IOException e) {					e.printStackTrace();				}			}		}		steveTextureWidth = bufferedimage != null ? bufferedimage.getWidth() : 64;		steveTextureHeight = bufferedimage != null ? bufferedimage.getHeight() : 32;	}	public ModchuModel_ModelDataBase getPlayerData(Object o) {		try {			if (o != null); else {				//Modchu_Debug.Debug("ModchuModel_ModelDataMaster o == null return !!");				return null;			}			//Modchu_Debug.Debug("ModchuModel_ModelDataMaster 1");			Object entity = null;			ModchuModel_ModelDataBase data = null;			Class EntityLittleMaid = Modchu_LMMManager.getLMMEntityLittleMaidClass();			if (EntityLittleMaid != null					&& EntityLittleMaid.isInstance(o)) {				o = Modchu_Reflect.getFieldObject(o.getClass(), "maidCaps", o);				if (o !=null); else {					Modchu_Debug.Debug("ModchuModel_ModelDataMaster getPlayerData EntityLittleMaid maidCaps == null !!");					return null;				}			}			Class IModelCaps = Modchu_LMMManager.getLMMIModelCapsClass();			//Modchu_Debug.Debug("ModchuModel_ModelDataMaster 2 IModelCaps ="+IModelCaps);			boolean iModelCapsFlag = IModelCaps != null							&& IModelCaps.isInstance(o);			//Modchu_Debug.Debug("ModchuModel_ModelDataMaster 3 ModchuModel_IEntityCapsFlag ="+ModchuModel_IEntityCapsFlag);			//Modchu_Debug.mDebug1("ModchuModel_ModelDataMaster ModchuModel_IEntityCapsFlag="+ModchuModel_IEntityCapsFlag);			if (iModelCapsFlag) {				Map<String, Integer> caps = (Map<String, Integer>) Modchu_Reflect.invokeMethod(o.getClass(), "getModelCaps", o);				//Modchu_Debug.mDebug1("ModchuModel_ModelDataMaster ModchuModel_IEntityCapsFlag o.getClass()="+o.getClass());				//Modchu_Debug.mDebug1("ModchuModel_ModelDataMaster ModchuModel_IEntityCapsFlag caps="+caps);				//Modchu_Debug.mDebug1("ModchuModel_ModelDataMaster ModchuModel_IEntityCapsFlag caps.get(Entity)="+caps.get("Entity"));				//Modchu_Debug.mDebug1("ModchuModel_ModelDataMaster ModchuModel_IEntityCapsFlag getMethod="+Modchu_Reflect.getMethod(ModchuModel_IEntityCaps, "getCapsValue", new Class[]{ int.class, Object[].class }));				entity = Modchu_Reflect.getFieldObject(o.getClass(), "owner", o, -1);				if (entity != null); else entity = Modchu_Reflect.invokeMethod(IModelCaps, "getCapsValue", new Class[]{ int.class, Object[].class }, o, new Object[]{ caps.get("Entity"), (Object[]) null });				//Modchu_Debug.mDebug1("ModchuModel_ModelDataMaster ModchuModel_IEntityCapsFlag entity="+entity);				if (entity != null) data = getDataMap(entity);			} else data = getDataMap(o);			//Modchu_Debug.Debug("ModchuModel_ModelDataMaster 5 data ="+data);			boolean b = false;			if (data != null) {				int initFlag = data.getCapsValueInt(data.caps_initFlag);				if (initFlag < 2) {					Modchu_Debug.lDebug1("ModchuModel_ModelDataMaster getPlayerData dataMap.get caps_initFlag < 2 initFlag="+initFlag);					initFlag++;					data.setCapsValue(data.caps_initFlag, initFlag);					b = true;				}			} else {				Modchu_Debug.lDebug1("ModchuModel_ModelDataMaster getPlayerData dataMap.get data == null");				b = true;			}			//Modchu_Debug.Debug("ModchuModel_ModelDataMaster 5-1 b ="+b);			if (b					| resetFlag) {				if (resetFlag) {					resetFlag = false;					clearDataMap();					data = null;				}				//Modchu_Debug.Debug("ModchuModel_ModelDataMaster 6");				data = newPlayerData(o, data);				Modchu_Debug.Debug("ModchuModel_ModelDataMaster 7 data ="+data);				if (data != null) {					//Modchu_Debug.mDebug("ModchuModel_ModelDataMaster getPlayerData dataMap.put o="+o);					if (data.getCapsValueInt(data.caps_initFlag) == 1) data.setCapsValue(data.caps_initFlag, 2);					if (iModelCapsFlag) {						if (entity != null) {							dataMap.put(entity, data);							Modchu_Debug.lDebug1("ModchuModel_ModelDataMaster getPlayerData ModchuModel_IEntityCapsFlag data.put ok.");						} else {							Modchu_Debug.lDebug1("ModchuModel_ModelDataMaster getPlayerData dataMap.put entity == null !!");						}					} else {						dataMap.put(o, data);						Modchu_Debug.lDebug("ModchuModel_ModelDataMaster getPlayerData data.put ok. o="+o);					}				}			}			//Modchu_Debug.Debug("ModchuModel_ModelDataMaster end. return data="+data);			return data;		} catch(Error e) {			e.printStackTrace();		} catch(Exception e) {			e.printStackTrace();		}		//Modchu_Debug.Debug("ModchuModel_ModelDataMaster end. return null !!");		return null;	}	private ModchuModel_ModelDataBase getDataMap(Object entity) {		if (dummyData != null) return dummyData;		return dataMap.get(entity);/*		ModchuModel_ModelDataBase data = dataMap.get(entity);		if (data != null); else {			Modchu_Debug.Debug("ModchuModel_ModelDataMaster getDataMap data == null !! dataMap.containsKey="+dataMap.containsKey(entity));			Modchu_Debug.Debug("ModchuModel_ModelDataMaster getDataMap data == null !! dataMap="+dataMap);			Modchu_Debug.Debug("ModchuModel_ModelDataMaster getDataMap data == null !! entity="+entity);			Modchu_Debug.Debug("ModchuModel_ModelDataMaster getDataMap data == null !! entity.hashCode()="+entity.hashCode());		}		return data;*/	}	public ModchuModel_ModelDataBase newPlayerData(Object o) {		return newPlayerData(o, null);	}	public ModchuModel_ModelDataBase newPlayerData(Object o, ModchuModel_ModelDataBase data) {		boolean debug = false;		if (debug) Modchu_Debug.Debug("ModchuModel_ModelDataMaster newPlayerData");		if (o != null); else {			Modchu_Debug.Debug("ModchuModel_ModelDataMaster newPlayerData return null !!");			return null;		}		if (data != null); else data = new ModchuModel_ModelDataBase();		if (debug) Modchu_Debug.Debug("ModchuModel_ModelDataMaster newPlayerData 1 data="+data);		Class EntityLittleMaid = Modchu_LMMManager.getLMMEntityLittleMaidClass();		Class IModelCaps = Modchu_LMMManager.getLMMIModelCapsClass();		if (debug) Modchu_Debug.Debug("ModchuModel_ModelDataMaster newPlayerData ModchuModel_IEntityCaps="+IModelCaps);		if (EntityLittleMaid != null				&& EntityLittleMaid.isInstance(o)) {			o = Modchu_Reflect.getFieldObject(o.getClass(), "maidCaps", o);			if (o !=null); else {				Modchu_Debug.Debug("ModchuModel_ModelDataMaster newPlayerData EntityLittleMaid maidCaps == null !!");				return null;			}			data.setCapsValue(data.caps_subEntityCaps, o);		} else if (IModelCaps != null				&& IModelCaps.isInstance(o)) {			data.setCapsValue(data.caps_subEntityCaps, o);			//Modchu_Debug.mDebug("ModchuModel_ModelDataMaster newPlayerData set o");		} else if (Modchu_Reflect.loadClass("EntityLivingBase").isInstance(o)) {			if (debug) Modchu_Debug.Debug("ModchuModel_ModelDataMaster newPlayerData 2 EntityLivingBase.isInstance");			data.setCapsValue(data.caps_Entity, o);		} else {			Modchu_Debug.lDebug1("ModchuModel_ModelDataMaster newPlayerData 2 !ModchuModel_IEntityCaps && !isEntityLivingBase o="+o);		}		data = newPlayerDataDefaultSetting(o, data);		if (debug) Modchu_Debug.Debug("ModchuModel_ModelDataMaster newPlayerData 3 data="+data);		data.setCapsValue(data.caps_initFlag, 2);		if (debug) Modchu_Debug.Debug("ModchuModel_ModelDataMaster newPlayerData end return data="+data);		return data;	}	public ModchuModel_ModelDataBase newPlayerDataDefaultSetting(Object o, ModchuModel_ModelDataBase data) {		data.setCapsValue(data.caps_freeVariable, "showMainModel", true);		data.setCapsValue(data.caps_freeVariable, "showArmor", true);		data.setCapsValue(data.caps_localFlag, true);		data.setCapsValue(data.caps_skinMode, ModchuModel_IEntityCaps.skinMode_offline);		return data;	}	public float getActionSpeed(ModchuModel_ModelDataBase modelData, float f) {/*		World theWorld = Modchu_Main.getTheWorld();		float f = (float)(theWorld.getWorldTime() - modelData.getCapsValueInt(modelData.caps_actionTime));		modelData.setCapsValue(modelData.caps_actionTime, (int) theWorld.getWorldTime());*//*		long timeDate = new Date().getTime();		float f1 = (float)(timeDate - Modchu_CastHelper.Long(modelData.getCapsValue(modelData.caps_actionTime)));		//Modchu_Debug.mDebug("getActionSpeed f="+f);		modelData.setCapsValue(modelData.caps_actionTime, timeDate);		//Modchu_Debug.mDebug("getActionSpeed timeDate="+timeDate+" f="+f);*/		float f1 = f - Modchu_CastHelper.Float(modelData.getCapsValue(modelData.caps_actionTime));		modelData.setCapsValue(modelData.caps_actionTime, f);		//Modchu_Debug.mDebug("getActionSpeed f="+f+" f1="+f1);		return f1;	}	public void modelInit(Object entity, String s) {		ModchuModel_ModelDataBase modelData = getPlayerData(entity);		modelInit(entity, modelData, s, false);	}	public void modelInit(Object entity, ModchuModel_ModelDataBase modelData, String s) {		modelInit(entity, modelData, s, false);	}	public void modelInit(Object entity, ModchuModel_ModelDataBase modelData, String s, boolean debug) {		modelInit(entity, modelData, s, debug, true);	}	public void modelInit(Object entity, ModchuModel_ModelDataBase modelData, String s, boolean debug, boolean errorDefault) {		if (debug) {			Modchu_Debug.mDebug("modelInit 1 s="+s);			Modchu_Debug.mDebug("modelInit 1 entity="+entity);		}		if (modelData != null				&& entity != null); else {			if (modelData != null); else Modchu_Debug.lDebug("modelInit modelData == null !!");			if (entity != null); else Modchu_Debug.lDebug("modelInit entity == null !!");			return;		}		Object[] option = null;		int skinMode = modelData.getCapsValueInt(modelData.caps_skinMode);		if (isSkinModeOnline(skinMode)) {			boolean newOnlineSkinFlag = getNewOnlineSkinFlag(modelData);			s = newOnlineSkinFlag ? "_Player" : "_Biped";			if (newOnlineSkinFlag) {				//option = new Object[]{ getSlimFlag(entity) };				option = new Object[]{ Modchu_Reflect.loadClass("EntityPlayer").isInstance(entity) ? Modchu_AS.getBoolean(Modchu_AS.renderPlayerSmallArms, Modchu_AS.get(Modchu_AS.renderManagerGetEntityRenderObject, entity)) : false };			}		}		else if (s == null				| (s != null				&& s.isEmpty())				| (ModchuModel_TextureManagerBase.instance.checkTexturePackege(s, modelData.getCapsValueInt(modelData.caps_maidColor)) == null)				&& (!isSkinModeOnline(skinMode)				&& !isSkinModePlayer(skinMode))) {			//if (debug)				Modchu_Debug.lDebug("modelInit textureNameDefaultSetting s="+s + " skinMode="+getSkinModeString(skinMode));			s = textureNameDefaultSetting(s, modelData, entity, errorDefault);		}		if (s == null				| (s != null				&& s.isEmpty())) {			if (!entityPlayerCheck(entity)) {				s = textureNameDefaultSetting(s, modelData, entity, errorDefault);				if (debug) Modchu_Debug.lDebug("modelInit s == null !! !entityPlayerCheck default");			} else {				//throw new RuntimeException("PFLM_RenderPlayerMaster textureName null error !!");			}		}		//Modchu_Debug.mDebug("ModchuModel_ModelDataMaster modelInit s="+s);		Object[] models = ModchuModel_TextureManagerBase.instance.modelNewInstance(entity, s, false, true, option, debug);		if (debug) {			Modchu_Debug.mlDebug("modelInit 2 s="+s);			Modchu_Debug.mlDebug("modelInit 2 skinMode="+getSkinModeString(skinMode));		}		if (models != null				&& models[0] instanceof MultiModelBaseBiped) {			if (debug) Modchu_Debug.lDebug("modelInit models[0] != null ? "+(models[0] != null));		} else {			//Modchu_Main.setRuntimeException("debug !");			String s1 = ModchuModel_TextureManagerBase.instance.getDefaultTextureName();			if (errorDefault) {				Modchu_Debug.systemLogDebug("modelInit models[0] !MultiModelBaseBiped !!", 2, null);				if (Modchu_CastHelper.String(modelData.getCapsValue(modelData.caps_textureName)).indexOf("_") > -1) modelData.setCapsValue(modelData.caps_textureName, s1);				models = ModchuModel_TextureManagerBase.instance.modelNewInstance(entity, Modchu_CastHelper.String(modelData.getCapsValue(modelData.caps_textureName)), false, true, option);				if (models != null); else {					if (debug) {						Modchu_Debug.lDebug("modelInit 2 default setting.");						Modchu_Debug.lDebug("modelInit 2 models = null !! textureName="+modelData.getCapsValue(modelData.caps_textureName));					}					modelData.setCapsValue(modelData.caps_textureName, s1);					models = ModchuModel_TextureManagerBase.instance.modelNewInstance(entity, (Modchu_CastHelper.String(modelData.getCapsValue(modelData.caps_textureName))), false, true, option);					if (models != null) ;					else if (debug) Modchu_Debug.lDebug("modelInit 3 models = null !! textureName="+modelData.getCapsValue(modelData.caps_textureName));				}			} else {				if (modelData.getCapsValueBoolean(modelData.caps_freeVariable, "defaultModelFlag")) {					models = ModchuModel_TextureManagerBase.instance.modelNewInstance(entity, s1, false, true, option);				}			}		}		Object o = models != null				&& models[0] != null ? models[0] : new MultiModel(0.0F);		if (o != null); else {			Modchu_Main.setRuntimeException("modelInit set Model == null !!");		}		modelData.models[0] = o instanceof MultiModelBaseBiped ? (MultiModelBaseBiped) o : null;		boolean b = modelData.setCapsValue(modelData.caps_Entity, entity);		//Modchu_Debug.mlDebug("modelInit caps_Entity b="+b);		modelTextureReset(entity, modelData, s);		debug = true;		if (debug) {			if (models != null && models[0] != null) Modchu_Debug.lDebug("modelInit models[0]="+models[0]);			Modchu_Debug.lDebug("modelInit s="+s);			Modchu_Debug.lDebug("modelInit textureName="+modelData.getCapsValue(modelData.caps_textureName));			Modchu_Debug.lDebug("modelInit color="+modelData.getCapsValueInt(modelData.caps_maidColor));		}		modelData.setCapsValue(modelData.caps_changeModelFlag, true);		//Modchu_Debug.mlDebug("modelInit end.s="+s);	}	public boolean isPlayerCheck(ModchuModel_ModelDataBase modelData, Object entity) {		return modelData.getCapsValueBoolean(modelData.caps_isPlayer);	}	public void modelArmorInit(Object entity, String s) {		ModchuModel_ModelDataBase modelData = (ModchuModel_ModelDataBase) getPlayerData(entity);		modelArmorInit(entity, modelData, s, false);	}	public void modelArmorInit(Object entity, String s, boolean debug) {		ModchuModel_ModelDataBase modelData = (ModchuModel_ModelDataBase) getPlayerData(entity);		modelArmorInit(entity, modelData, s, debug);	}	public void modelArmorInit(Object entity, ModchuModel_ModelDataBase modelData) {		modelArmorInit(entity, modelData, false);	}	public void modelArmorInit(Object entity, ModchuModel_ModelDataBase modelData, boolean debug) {		modelArmorInit(entity, modelData, Modchu_CastHelper.String(modelData.getCapsValue(modelData.caps_textureArmorName)), false);	}	public void modelArmorInit(Object entity, ModchuModel_ModelDataBase modelData, String s) {		modelArmorInit(entity, modelData, s, false);	}	public void modelArmorInit(Object entity, ModchuModel_ModelDataBase modelData, String s, boolean debug) {		modelArmorInit(entity, modelData, s, debug, true);	}	public void modelArmorInit(Object entity, ModchuModel_ModelDataBase modelData, String s, boolean debug, boolean errorDefault) {		if (modelData != null); else return;		int skinMode = modelData.getCapsValueInt(modelData.caps_skinMode);		boolean isBiped = false;		if (s != null				&& s.equals("NULL")) {			if (modelData.models != null					&& modelData.models.length > 2) {				modelData.models[1] = null;				modelData.models[2] = null;			}			return;		}		if (modelData.models != null				&& modelData.models[0] != null) {			isBiped = ModchuModel_Main.bipedCheck(modelData.models[0]);		}		if (!isBiped) s = ModchuModel_TextureManagerBase.instance.textureNameCheck(s);		if (skinMode == ModchuModel_IEntityCaps.skinMode_online				| skinMode == ModchuModel_IEntityCaps.skinMode_PlayerOnline) {			//s = getNewOnlineSkinFlag(modelData) ? "_Player" : "_Biped";			s = "_Biped";		}		else if (isBiped) {			s = "_Biped";		} else if (s == null				| (s != null && s.isEmpty())				| (ModchuModel_TextureManagerBase.instance.checkTextureArmorPackege(s) == null)				&& (skinMode != ModchuModel_IEntityCaps.skinMode_online				&& skinMode != ModchuModel_IEntityCaps.skinMode_PlayerOnline				&& skinMode != ModchuModel_IEntityCaps.skinMode_Player)) {			//if (debug) Modchu_Debug.mDebug("ModchuModel_ModelDataMaster textureArmorName null "+entityplayer.userName+" : "+"modelArmorInit s="+s+" modelData.getCapsValueInt(modelData.caps_skinMode)="+modelData.getCapsValueInt(modelData.caps_skinMode));			if (errorDefault) s = textureArmorNameDefaultSetting(modelData, entity);		}		Object[] option = null;		Object[] models = ModchuModel_TextureManagerBase.instance.modelNewInstance(entity, s, false, true, option, debug);		//float[] f1 = models != null && models.length > 0 ? ModchuModel_Main.getArmorModelsSize(models[0]) : null;		if (debug) Modchu_Debug.mlDebug("modelArmorInit s="+s + " models[1] != null ? "+(models != null && models.length > 0 ? models[1] != null : null));		modelData.models[1] = (MultiModelBaseBiped) (models != null && models.length > 1 ? models[1] : null);		modelData.models[2] = (MultiModelBaseBiped) (models != null && models.length > 2 ? models[2] : null);		//modelTextureArmorReset(modelData, s);	}	public String textureNameDefaultSetting(String s, ModchuModel_ModelDataBase modelData, Object entity, boolean errorDefault) {		if (errorDefault) {			s = ModchuModel_TextureManagerBase.instance.textureNameCheck(null);			modelData.setCapsValue(modelData.caps_textureName, s);		} else {			modelData.setCapsValue(modelData.caps_freeVariable, "defaultModelFlag", true);		}		return s;	}	public String textureArmorNameDefaultSetting(ModchuModel_ModelDataBase modelData, Object entity) {		String s = ModchuModel_TextureManagerBase.instance.textureNameCheck(null);		modelData.setCapsValue(modelData.caps_textureArmorName, s);		return s;	}	public void textureBipedDefaultSetting(ModchuModel_ModelDataBase modelData) {		textureBipedDefaultSetting(modelData, false);	}	public void textureBipedDefaultSetting(ModchuModel_ModelDataBase modelData, boolean b) {		//String s = b ? "_Player" :"_Biped";		//modelData.setCapsValue(modelData.caps_textureName, s);		//modelData.setCapsValue(modelData.caps_textureArmorName, s);		Modchu_Debug.lDebug("textureBipedDefaultSetting textureName ="+Modchu_CastHelper.String(modelData.getCapsValue(modelData.caps_textureName)));	}	public void allModelTextureReset(Object entity) {		ModchuModel_ModelDataBase modelData = (ModchuModel_ModelDataBase) getPlayerData(entity);		allModelTextureReset(entity, modelData);	}	public void allModelTextureReset(Object entity, ModchuModel_ModelDataBase modelData) {		modelTextureReset(entity, modelData);		//modelTextureArmorReset(modelData);	}	public void modelTextureReset(Object entity, ModchuModel_ModelDataBase modelData) {		modelTextureReset(entity, modelData, Modchu_CastHelper.String(modelData.getCapsValue(modelData.caps_textureName)));	}	public void modelTextureReset(Object entity, ModchuModel_ModelDataBase modelData, String s) {		//Modchu_Debug.mDebug("modelTextureReset s="+s+" entity="+entity);		Object o = null;		int version = Modchu_Main.getMinecraftVersion();		int skinMode = modelData.getCapsValueInt(modelData.caps_skinMode);		Class AbstractClientPlayer = Modchu_Reflect.loadClass("AbstractClientPlayer");		//Modchu_Debug.lDebug1("ModchuModel_ModelDataMaster modelTextureReset AbstractClientPlayer="+AbstractClientPlayer);		//Modchu_Debug.lDebug1("ModchuModel_ModelDataMaster modelTextureReset containsKey="+Modchu_Reflect.classNameMap.containsKey("AbstractClientPlayer"));		//Modchu_Debug.lDebug1("ModchuModel_ModelDataMaster modelTextureReset classNameMap.get="+Modchu_Reflect.classNameMap.get("AbstractClientPlayer"));		String userName = getUserName(modelData, entity);		if (skinMode == ModchuModel_IEntityCaps.skinMode_online				&& !modelData.getCapsValueBoolean(modelData.caps_localFlag)) {			//Modchu_Debug.mDebug("modelTextureReset skinMode_online && localFlag return.");			return;		}		//Modchu_Debug.mDebug("modelTextureReset skinMode="+(getSkinModeString(skinMode)));		//Modchu_Debug.mDebug("modelTextureReset localFlag="+(modelData.getCapsValueBoolean(modelData.caps_localFlag)));		if (modelData.getCapsValueBoolean(modelData.caps_freeVariable, "skinChar")) {			o = steveTexture;		} else if (AbstractClientPlayer.isInstance(entity)				&& (version > 159								| (!isPlayerCheck(modelData, entity)										&& (skinMode == ModchuModel_IEntityCaps.skinMode_online										| skinMode == ModchuModel_IEntityCaps.skinMode_PlayerOnline)))) {			Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);			o = Modchu_Reflect.invokeMethod(AbstractClientPlayer, "func_110311_f", "getLocationSkin", new Class[]{ String.class }, skinMode == ModchuModel_IEntityCaps.skinMode_PlayerOnline					| skinMode == ModchuModel_IEntityCaps.skinMode_Player ? thePlayer : entity, new Object[]{ userName });			if (!isPlayerCheck(modelData, entity)					&& (skinMode == ModchuModel_IEntityCaps.skinMode_online					| skinMode == ModchuModel_IEntityCaps.skinMode_PlayerOnline)) {				o = Modchu_Reflect.invokeMethod(AbstractClientPlayer, "func_110306_p", "getLocationSkin", skinMode == ModchuModel_IEntityCaps.skinMode_PlayerOnline						| skinMode == ModchuModel_IEntityCaps.skinMode_Player ? thePlayer : entity);			}			//Modchu_Debug.lDebug(""+userName + " : "+"modelTextureReset o="+o + " skinMode="+getSkinModeString(skinMode));		} else {			o = ModchuModel_TextureManagerBase.instance.textureManagerGetTexture(s, modelData.getCapsValueInt(modelData.caps_maidColor));			//Modchu_Debug.lDebug("modelTextureReset else o="+o);			//Modchu_Debug.lDebug("modelTextureReset else skinMode="+getSkinModeString(skinMode));			//Modchu_Debug.lDebug("modelTextureReset else entity.getClass()="+entity.getClass());			//Modchu_Debug.lDebug("modelTextureReset else s="+s+" maidColor="+modelData.getCapsValueInt(modelData.caps_maidColor));			//Modchu_Debug.mDebug(""+userName+" : "+"modelTextureReset entity == thePlayer ?"+(entity == thePlayer));		}		//Modchu_Debug.mDebug("modelTextureReset end o="+o);		setResourceLocation(modelData, entity, 0, o);	}	public ModchuModel_ModelDataBase checkModelData(ModchuModel_ModelDataBase modelData) {		//ぬるぽ及び問題が無いかのチェック		Modchu_Debug.lDebug("checkModelData userName="+Modchu_AS.getString(Modchu_AS.userName, modelData.getCapsValue(modelData.caps_Entity)));		Modchu_Debug.lDebug("checkModelData textureName="+modelData.getCapsValue(modelData.caps_textureName));		Modchu_Debug.lDebug("checkModelData textureArmorName="+modelData.getCapsValue(modelData.caps_textureArmorName));		Modchu_Debug.lDebug("checkModelData maidColor="+modelData.getCapsValueInt(modelData.caps_maidColor));		Modchu_Debug.lDebug("checkModelData modelScale="+modelData.getCapsValueFloat(modelData.caps_modelScale));		Modchu_Debug.lDebug("checkModelData skinMode="+getSkinModeString(modelData.getCapsValueInt(modelData.caps_skinMode)));		boolean err = false;		LinkedList<String> list = new LinkedList();		if (modelData.models != null) {			int i = 0;			for (Object o : modelData.models) {				Modchu_Debug.lDebug("checkModelData modelData.models["+i+"]="+o);				i++;			}		} else {			err = checkModelDataAddList(list, "checkModelData modelData.modelMain == null !!");		}		Modchu_Debug.lDebug("checkModelData getResourceLocation(0)="+getResourceLocation(modelData, null, 0));		list.add("checkModelData Error Reporting.");		if (getResourceLocation(modelData, null, 0) == null) err = checkModelDataAddList(list, "checkModelData ResourceLocation, 0 null !!");		if (err) {			list.add("checkModelData error textureName="+modelData.getCapsValue(modelData.caps_textureName));			list.add("checkModelData error textureArmorName="+modelData.getCapsValue(modelData.caps_textureArmorName));			list.add("checkModelData error color="+modelData.getCapsValue(modelData.caps_maidColor));			list.add("checkModelData error skinMode="+getSkinModeString(modelData.getCapsValueInt(modelData.caps_skinMode)));			for (String s : list) {				Modchu_Debug.lDebug(s);			}		} else {			Modchu_Debug.lDebug("checkModelData check ok.");		}		Modchu_Debug.lDebug("------ModchuModel_ModelDataMaster init end.------");		return modelData;	}	public boolean checkModelDataAddList(List list, String s) {		list.add(s);		return true;	}	public Object getResourceLocation(Object entityOrModelData) {		ModchuModel_ModelDataBase modelData = (ModchuModel_ModelDataBase) (entityCheck(entityOrModelData) ? getPlayerData(entityOrModelData) : entityOrModelData instanceof ModchuModel_ModelDataBase ? entityOrModelData : null);		return getResourceLocation(modelData, entityCheck(entityOrModelData) ? entityOrModelData : modelData.getCapsValue(modelData.caps_Entity), 0);	}	public Object getResourceLocation(ModchuModel_ModelDataBase modelData, Object entity) {		return getResourceLocation(modelData, entity, 0);	}	public Object getResourceLocation(Object entityOrModelData, int i) {		ModchuModel_ModelDataBase modelData = (ModchuModel_ModelDataBase) (entityCheck(entityOrModelData) ? getPlayerData(entityOrModelData) : entityOrModelData instanceof ModchuModel_ModelDataBase ? entityOrModelData : null);		return getResourceLocation(modelData, entityCheck(entityOrModelData) ? entityOrModelData : modelData.getCapsValue(modelData.caps_Entity), i);	}	public Object getResourceLocation(ModchuModel_ModelDataBase modelData, Object entity, int i) {		if (modelData != null); else return null;		if (modelData.getCapsValue(modelData.caps_ResourceLocation) != null); else {			modelData.setCapsValue(modelData.caps_ResourceLocation, new Object[3]);		}		return modelData.getCapsValue(modelData.caps_ResourceLocation, i);	}	public void setResourceLocation(Object entityOrModelData, Object resourceLocation) {		ModchuModel_ModelDataBase modelData = (ModchuModel_ModelDataBase) (entityCheck(entityOrModelData) ? getPlayerData(entityOrModelData) : entityOrModelData instanceof ModchuModel_ModelDataBase ? entityOrModelData : null);		if (modelData != null) setResourceLocation(modelData, entityCheck(entityOrModelData) ? entityOrModelData : modelData.getCapsValue(modelData.caps_Entity), 0, resourceLocation);		else {			Modchu_Debug.lDebug("ModchuModel_ModelDataMaster setResourceLocation 1 modelData == null error !! entityOrModelData="+entityOrModelData);		}	}	public void setResourceLocation(ModchuModel_ModelDataBase modelData, Object entity, Object resourceLocation) {		setResourceLocation(modelData, entity, 0, resourceLocation);	}	public void setResourceLocation(Object entityOrModelData, int i, Object resourceLocation) {		ModchuModel_ModelDataBase modelData = (ModchuModel_ModelDataBase) (entityCheck(entityOrModelData) ? getPlayerData(entityOrModelData) : entityOrModelData instanceof ModchuModel_ModelDataBase ? entityOrModelData : null);		if (modelData != null) setResourceLocation(modelData, entityCheck(entityOrModelData) ? entityOrModelData : modelData.getCapsValue(modelData.caps_Entity), i, resourceLocation);		else {			Modchu_Debug.lDebug("ModchuModel_ModelDataMaster setResourceLocation 2 modelData == null error !! entityOrModelData="+entityOrModelData);		}	}	public void setResourceLocation(ModchuModel_ModelDataBase modelData, Object entity, int i, Object resourceLocation) {		if (modelData != null); else {			Modchu_Debug.lDebug("ModchuModel_ModelDataMaster setResourceLocation 3 modelData == null error !! entity="+entity+" i="+i);			Modchu_Debug.lDebug("ModchuModel_ModelDataMaster setResourceLocation 3 modelData == null error !! resourceLocation="+resourceLocation);			return;		}		if (modelData.getCapsValue(modelData.caps_ResourceLocation) != null); else {			modelData.setCapsValue(modelData.caps_ResourceLocation, new Object[3]);		}		modelData.setCapsValue(modelData.caps_ResourceLocation, i, resourceLocation);	}	public String getUserName(Object entity) {		ModchuModel_ModelDataBase modelData = getPlayerData(entity);		return getUserName(modelData, entity);	}	public String getUserName(ModchuModel_ModelDataBase modelData, Object entity) {		int skinMode = modelData.getCapsValueInt(modelData.caps_skinMode);		Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftThePlayer);		String userName = Modchu_AS.getString(Modchu_AS.userName, entityPlayerCheck(entity) ? entity : thePlayer);		if (Modchu_Debug.debugPlayerName != null) {			userName = isPlayerCheck(modelData, entity) ? Modchu_Debug.debugPlayerName : skinMode == ModchuModel_IEntityCaps.skinMode_PlayerOnline ? Modchu_Debug.debugPlayerName : userName;		} else {			userName = skinMode == ModchuModel_IEntityCaps.skinMode_PlayerOnline ? Modchu_AS.getString(Modchu_AS.userName, thePlayer) : userName;		}		return userName;	}	public boolean entityCheck(Object entity) {		return Modchu_Reflect.loadClass("Entity").isInstance(entity);	}	public boolean entityPlayerCheck(Object entity) {		return Modchu_Reflect.loadClass("EntityPlayer").isInstance(entity);	}	public boolean entityPlayerDummyCheck(Object entity) {		Class Modchu_EntityPlayerDummy = Modchu_Main.getModchuCharacteristicClass("Modchu_EntityPlayerDummy");		return Modchu_EntityPlayerDummy.isInstance(entity);	}	public boolean isSkinModeOffline(int skinMode) {		return skinMode == ModchuModel_IEntityCaps.skinMode_offline				| skinMode == ModchuModel_IEntityCaps.skinMode_PlayerOffline;	}	public boolean isSkinModeOnline(int skinMode) {		return skinMode == ModchuModel_IEntityCaps.skinMode_online				| skinMode == ModchuModel_IEntityCaps.skinMode_PlayerOnline;	}	public boolean isSkinModePlayer(int skinMode) {		return skinMode == ModchuModel_IEntityCaps.skinMode_Player;	}	public boolean isSkinModeRandom(int skinMode) {		return skinMode == ModchuModel_IEntityCaps.skinMode_Random;	}	public boolean getNewOnlineSkinFlag(ModchuModel_ModelDataBase modelData) {		BufferedImage bufferedimage = Modchu_CastHelper.BufferedImage(modelData.getCapsValue(modelData.caps_freeVariable, "bufferedimage"));		return bufferedimage != null ? bufferedimage.getWidth() == bufferedimage.getHeight() : steveTextureWidth == steveTextureHeight;	}	public boolean getSlimFlag(Object abstractClientPlayer) {		String s = Modchu_Reflect.loadClass("AbstractClientPlayer").isInstance(abstractClientPlayer) ? Modchu_AS.getString(Modchu_AS.abstractClientPlayerGetSkinType, abstractClientPlayer) : null;		return s != null				&& !s.isEmpty() ? s.equals("slim") : false;	}	public String getSkinModeString(int i) {		String s = null;		switch (i) {		case ModchuModel_IEntityCaps.skinMode_online:			s = "skinMode_online";			break;		case ModchuModel_IEntityCaps.skinMode_local:			s = "skinMode_local";			break;		case ModchuModel_IEntityCaps.skinMode_offline:			s = "skinMode_offline";			break;		case ModchuModel_IEntityCaps.skinMode_Player:			s = "skinMode_Player";			break;		case ModchuModel_IEntityCaps.skinMode_OthersSettingOffline:			s = "skinMode_OthersSettingOffline";			break;		case ModchuModel_IEntityCaps.skinMode_PlayerOffline:			s = "skinMode_PlayerOffline";			break;		case ModchuModel_IEntityCaps.skinMode_PlayerOnline:			s = "skinMode_PlayerOnline";			break;		case ModchuModel_IEntityCaps.skinMode_PlayerLocalData:			s = "skinMode_PlayerLocalDat";			break;		case ModchuModel_IEntityCaps.skinMode_Random:			s = "skinMode_Random";			break;		case ModchuModel_IEntityCaps.skinMode_OthersIndividualSettingOffline:			s = "skinMode_OthersIndividualSettingOffline";			break;		}		return s;	}	public void clearDataMap() {		dataMap.clear();	}	public void removeDataMap(Object o) {		dataMap.remove(o);	}	public Object getLMMCaps(Object o) {		if (dataLMMCapsMap.containsKey(o)) return dataLMMCapsMap.get(o);		Modchu_IEntityCapsBase entityCaps = o instanceof Modchu_IEntityCapsBase ? (Modchu_IEntityCapsBase) o : null;		if (entityCaps != null); else return o;		Object caps = Modchu_Reflect.newInstance("modchu.lib.lmm.Modchu_LMMEntityCaps", new Class[]{ ModchuModel_ModelDataBase.class, Modchu_Reflect.loadClass("EntityLivingBase") }, new Object[]{ entityCaps, entityCaps.getCapsValue(entityCaps.caps_Entity) });		dataLMMCapsMap.put(entityCaps, caps);		return caps;	}}