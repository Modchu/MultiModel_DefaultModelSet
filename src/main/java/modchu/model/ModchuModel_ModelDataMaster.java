package modchu.model;import java.util.Date;import java.util.Map;import java.util.concurrent.ConcurrentHashMap;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_Reflect;public class ModchuModel_ModelDataMaster {	public static ModchuModel_ModelDataMaster instance = new ModchuModel_ModelDataMaster();	protected ConcurrentHashMap<Object, ModchuModel_ModelDataBase> dataMap = new ConcurrentHashMap();	protected ConcurrentHashMap dataLMMCapsMap = new ConcurrentHashMap();	public boolean resetFlag = false;	public Date timeDate;	public ModchuModel_ModelDataMaster() {	}	public ModchuModel_ModelDataBase getPlayerData(Object o) {		if (o != null) ;else return null;		Object entity = null;		ModchuModel_ModelDataBase data = null;		Class MMM_IModelCaps = Modchu_Reflect.loadClass("MMM_IModelCaps", -1);		Class IModelCaps = Modchu_Reflect.loadClass("mmm.lib.multiModel.model.mc162.IModelCaps", -1);		boolean mmm_IModelCapsFlag = (MMM_IModelCaps != null				&& MMM_IModelCaps.isInstance(o))				| (IModelCaps != null						&& IModelCaps.isInstance(o));		//Modchu_Debug.mDebug1("ModchuModel_ModelDataMaster mmm_IModelCapsFlag="+mmm_IModelCapsFlag);		if (mmm_IModelCapsFlag) {			Map<String, Integer> caps = (Map<String, Integer>) Modchu_Reflect.invokeMethod(o.getClass(), "getModelCaps", o);			//Modchu_Debug.mDebug1("ModchuModel_ModelDataMaster mmm_IModelCapsFlag o.getClass()="+o.getClass());			//Modchu_Debug.mDebug1("ModchuModel_ModelDataMaster mmm_IModelCapsFlag caps="+caps);			//Modchu_Debug.mDebug1("ModchuModel_ModelDataMaster mmm_IModelCapsFlag caps.get(Entity)="+caps.get("Entity"));			entity = Modchu_Reflect.invokeMethod(MMM_IModelCaps, "getCapsValue", new Class[]{ int.class, Object[].class }, o, new Object[]{ caps.get("Entity"), (Object[]) null });			//Modchu_Debug.mDebug1("ModchuModel_ModelDataMaster mmm_IModelCapsFlag entity="+entity);			if (entity != null) data = dataMap.get(entity);		} else data = dataMap.get(o);		boolean b = false;		if (data != null) {			if (data.getCapsValueInt(data.caps_initFlag) != 2) {				Modchu_Debug.mDebug("initFlag="+data.getCapsValueInt(data.caps_initFlag));				Modchu_Debug.lDebug("ModchuModel_ModelDataMaster getPlayerData dataMap.get caps_initFlag != 2");				b = true;			}		} else {			Modchu_Debug.lDebug("ModchuModel_ModelDataMaster getPlayerData dataMap.get data == null");			b = true;		}		if (b				| resetFlag) {			if (resetFlag) {				resetFlag = false;				clearDataMap();				data = null;			}			data = loadPlayerData(o, data);			if (data != null) {				//Modchu_Debug.mDebug("ModchuModel_ModelDataMaster getPlayerData dataMap.put o="+o);				data.setCapsValue(data.caps_initFlag, 2);				if (mmm_IModelCapsFlag) {					if (entity != null) dataMap.put(entity, data);					else Modchu_Debug.mDebug("ModchuModel_ModelDataMaster getPlayerData dataMap.put entity == null !!");				} else dataMap.put(o, data);			}		}		return data;	}	public ModchuModel_ModelDataBase loadPlayerData(Object o) {		return loadPlayerData(o, null);	}	public ModchuModel_ModelDataBase loadPlayerData(Object o, ModchuModel_ModelDataBase data) {		if (o != null) ;else return null;		if (data != null) ;else data = new ModchuModel_ModelDataBase();		Class MMM_IModelCaps = Modchu_Reflect.loadClass("MMM_IModelCaps", -1);		if (MMM_IModelCaps != null				&& MMM_IModelCaps.isInstance(o)) {			data.setCapsValue(data.caps_subEntityCaps, o);			//Modchu_Debug.mDebug("ModchuModel_ModelDataMaster loadPlayerData set o");		}		//Modchu_Debug.mDebug("ModchuModel_ModelDataMaster loadPlayerData end");		loadPlayerDataDefaultSetting(data);		return data;	}	public ModchuModel_ModelDataBase loadPlayerDataDefaultSetting(ModchuModel_ModelDataBase data) {		data.setCapsValue(data.caps_freeVariable, "showArmor", true);		data.setCapsValue(data.caps_localFlag, true);		return data;	}	public float getActionSpeed(ModchuModel_ModelDataBase modelData) {/*    	World theWorld = Modchu_Main.getTheWorld();    	float f = (float)(theWorld.getWorldTime() - modelData.getCapsValueInt(modelData.caps_actionTime));    	modelData.setCapsValue(modelData.caps_actionTime, (int) theWorld.getWorldTime());*/    	timeDate = new Date();    	float f = (float)((int) timeDate.getTime() - modelData.getCapsValueInt(modelData.caps_actionTime));    	//Modchu_Debug.mDebug("getActionSpeed f="+f);    	modelData.setCapsValue(modelData.caps_actionTime, (int) timeDate.getTime());    	//Modchu_Debug.mDebug("getActionSpeed (int) timeDate.getTime()="+(int) timeDate.getTime()+" f="+f);    	return f;    }	public void clearDataMap() {		dataMap.clear();	}	public void removeDataMap(Object o) {		dataMap.remove(o);	}	public Object getLMMCaps(ModchuModel_IModelCaps entityCaps) {		if (dataLMMCapsMap.containsKey(entityCaps)) return dataLMMCapsMap.get(entityCaps);		Object caps = Modchu_Reflect.newInstance("modchu.lib.lmm.characteristic.Modchu_LMMEntityCaps", new Class[]{ ModchuModel_ModelDataBase.class, Modchu_Reflect.loadClass("EntityLivingBase") }, new Object[]{ entityCaps, entityCaps.getCapsValue(entityCaps.caps_Entity) });		dataLMMCapsMap.put(entityCaps, caps);		return caps;	}}