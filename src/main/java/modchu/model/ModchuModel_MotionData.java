package modchu.model;import java.util.HashMap;import java.util.LinkedList;import java.util.List;import modchu.lib.Modchu_Debug;public class ModchuModel_MotionData {	private int maxFrame = 0;	private int maxMotionFrame = 0;	private int completeDataCount = 0;	private List<String> nameList = new LinkedList<String>();	private HashMap<Integer, List<Object[]>> dataMap = new HashMap();	private HashMap<String, List<Integer>> frameStringMap = new HashMap();	private boolean completeData = false;	private boolean debug = false;	public ModchuModel_MotionData() {	}	public int getFrame() {		return maxFrame;	}	public void setFrame(int i) {		maxFrame = i;	}	public HashMap<String, List<Integer>> getFrameStringMap() {		return frameStringMap;	}	public void setFrameStringMap(HashMap<String, List<Integer>> map) {		frameStringMap = map;	}	public void putFrameStringMap(String s) {		if (!frameStringMap.containsKey(s)) {			List list = new LinkedList();			putFrameStringMap(s, list);		}	}	public void putFrameStringMap(String s, List<Integer> list) {		frameStringMap.put(s, list);	}	public List<Integer> getFrameStringList(String s) {		return s != null				&& !s.isEmpty() ? frameStringMap.get(s) : null;	}	public List<String> getNameList() {		return nameList;	}	public void setNameList(List list) {		nameList = list;	}	public void addNameList(String s) {		if (debug) Modchu_Debug.mDebug("addNameList s="+s);		if (!nameList.contains(s)) nameList.add(s);	}	public void addNameList(int i, String s) {		if (nameList.get(i) != null) nameList.set(i, s);		else nameList.add(i, s);	}	public String getName(int i) {		//if (debug) Modchu_Debug.mDebug("getName nameList.get(i)="+nameList.get(i));		return i > -1 ? nameList.get(i) : null;	}	public void nameListClear() {		nameList.clear();	}	public HashMap<Integer, List<Object[]>> getDataMap() {		return dataMap;	}	public void setDataMap(HashMap map) {		dataMap = map;	}	public void putDataMap(int i, Object[] o) {		List<Object[]> list = getDataList(i);		if (!list.contains(o)) {			list.add(o);			dataMap.put(i, list);		}		if (debug) Modchu_Debug.mDebug("putDataList dataMap.get="+dataMap.get(i)+" i="+i);	}	public void putDataMap(int i, List<Object[]> list) {		dataMap.put(i, list);		if (debug) Modchu_Debug.mDebug("putDataList dataMap.get="+dataMap.get(i)+" i="+i);	}	public List<Object[]> getDataList(int i) {		//if (debug) Modchu_Debug.mDebug("getDataList i="+i);		if (!dataMap.containsKey(i)) {			List<Object[]> list = new LinkedList();			dataMap.put(i, list);		}		return dataMap.get(i);	}	public void dataMapClear() {		dataMap.clear();	}	public int getMaxMotionFrame() {		return maxMotionFrame;	}	public void setMaxMotionFrame(int i) {		maxMotionFrame = i;	}	public int getCompleteDataCount() {		return completeDataCount;	}	public void setCompleteDataCount(int i) {		completeDataCount = i;	}	public int getDataFrame(int i, int frameCount) {		if (debug) Modchu_Debug.mDebug("getDataFrame getName("+i+")="+getName(i));		return getDataFrame(getName(i), frameCount);	}	public int getDataFrame(String s, int frameCount) {		//if (debug) Modchu_Debug.mDebug("getDataFrame s.isEmpty()="+s.isEmpty());		int i2 = -1;		if (s != null				&& !s.isEmpty()); else {					if (debug) Modchu_Debug.mDebug("getDataFrame s else return");					return i2;				}		List<Integer> list = getFrameStringList(s);		//if (debug) Modchu_Debug.mDebug("getDataFrame list.isEmpty()="+list.isEmpty());		if (list != null				&& !list.isEmpty()); else {					if (debug) Modchu_Debug.mDebug("getDataFrame list else return");					return i2;				}		//if (debug) Modchu_Debug.mDebug("getDataFrame 2");		i2 = 0;		for (int i1 = 0; i1 < list.size(); i1++) {			if (list.get(i1) > frameCount) {				i2 = i1 > 0 ? list.get(i1 - 1) : 0;				//if (debug) Modchu_Debug.mDebug("getDataFrame 3 i2="+i2);				break;			}		}		//if (debug) Modchu_Debug.mDebug("getDataFrame end return i2="+i2);		return i2;	}	public boolean getCompleteData() {		return completeData;	}	public void setCompleteData(boolean b) {		completeData = b;	}}