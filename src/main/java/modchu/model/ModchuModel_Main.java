package modchu.model;import java.io.File;import java.lang.reflect.Method;import java.util.ArrayList;import java.util.HashMap;import java.util.LinkedList;import java.util.List;import java.util.Map;import java.util.concurrent.ConcurrentHashMap;import modchu.lib.Modchu_AS;import modchu.lib.Modchu_CastHelper;import modchu.lib.Modchu_Config;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_EntityCapsHelper;import modchu.lib.Modchu_EventSystem;import modchu.lib.Modchu_FileManager;import modchu.lib.Modchu_IEntityCapsBase;import modchu.lib.Modchu_IRenderLivingBase;import modchu.lib.Modchu_LMMManager;import modchu.lib.Modchu_Main;import modchu.lib.Modchu_Reflect;import modchu.lib.Modchu_Version;import modchu.model.multimodel.base.MultiModelBaseBiped;import modchu.model.multimodel.base.MultiModelCustom;import modchu.model.multimodel.base.MultiModel_Biped;import modchu.model.multimodel.base.MultiModel_Player;public class ModchuModel_Main {	public static final String version = "30a";	private static final int requestModchuLibVersion = 2100;	public static modc_ModchuModel baseModInstance;	public static Modchu_IRenderLivingBase renderPlayerDummyInstance;	public static final String modName = "ModchuModel";	public static final String versionString = ""+ Modchu_Version.getMinecraftVersion() + "-" + version;	public static String newVersion = "";	public static boolean isDev = false;	public static boolean isPFLMF = false;	public static boolean isFavBlock = false;	public static boolean isDecoBlock = false;	public static boolean isBTW = false;	public static boolean isGulliver = false;	public static boolean isShaders = false;	public static boolean isShader = false;	public static boolean isSmartMoving = false;	public static boolean oldRender = false;	public static boolean initLoad1 = false;	public static boolean initModsLoaded = false;	public static boolean newRelease = false;	private static boolean texturesNamberInitFlag = false;	private static boolean addRendererFlag;	public static HashMap<String, Object[]> checkModelsBox = new HashMap();	public static ArrayList<String> ngPlayerModelList = new ArrayList();	public static ArrayList<String> showModelList = new ArrayList();	private static Modchu_EventSystem eventSystem;	private static File mainCfgfile;	public static File cfgfile;	private static int initLoad1Count = 0;	private static int initModsLoadedCount = 0;	private static final int maxInitLoad1Count = 1;	private static final int maxInitModsLoadedCount = 6;	private static int initModsLoadedProgress = 0;	public static Method sizeMultiplier;	public static Class BipedClass;	public static Class BipedClass2;	private static ModchuModel_ThreadVersionCheck threadVersionCheck;	public static HashMap<Integer, List<Integer>> texturesNamberMap;	public static List<Integer> texturesArmorNamberList;	static {		if (eventSystem != null); else eventSystem = new Modchu_EventSystem("modchumodel");	}	public String getName() {		return modName;	}	public String getVersion() {		return versionString;	}	public static void load() {		Modchu_Debug.systemLogDebug("[ModchuModel_Main] 1 - (1 / 2) load()");		int i1 = Modchu_Main.getVersionStringConversionInt(Modchu_Main.lastIndexProcessing(Modchu_Main.getVersion(), "-"));		if (i1 < requestModchuLibVersion) {			Modchu_Debug.systemLogDebug("ModchuModel_Main ModchuLib Version is old !! VersionInt="+i1);			Modchu_Main.setRuntimeException("ModchuModel_Main ModchuLib Version is old !!");		} else {			Modchu_Debug.lDebug("ModchuModel_Main ModchuLib VersionInt="+i1);		}		//対応MOD導入チェック class直チェック		String className1[] = {				"net.minecraft.decoblock.DecoBlock", "net.minecraft.favstar.BlockFav", "Shaders",				"Shader", "mod_SmartMovingMp"		};		String test2 = null;		for (int n = 0 ; n < className1.length ; n++){			test2 = className1[n];			Class c = Modchu_Reflect.loadClass(test2, -1);			if (c != null) {				Modchu_Debug.lDebug(c + " Check ok.");				if(n == 0) isDecoBlock = true;				if(n == 1) isFavBlock = true;				if(n == 2) isShaders = true;				if(n == 3) isShader = true;				if(n == 4) isSmartMoving = true;			}		}		isDev = Modchu_Main.checkDev("MultiModel_DefaultModelSet");		Modchu_Debug.mDebug("[ModchuModel_Main] load() isDev="+isDev);		mainCfgfile = new File(Modchu_Main.cfgdir, "ModchuModel.cfg");		cfgfile = new File(Modchu_Main.cfgdir, "ModchuModel_ShowModel.cfg");		loadcfg();		startVersionCheckThread();		Modchu_Debug.systemLogDebug("[ModchuModel_Main] 1 - (2 / 2) load() end.");	}	public static void load1() {		if (initLoad1) return;		initLoad1Count = 0;		Method method = Modchu_Reflect.getMethod(ModchuModel_Main.class, "setSubProgress", new Class[]{ int.class });		// テクスチャパック、モデルの読み込み		Modchu_FileManager.loadModFile("MultiModel", null, "textures/entity/littleMaid/", method);		load1CountSetting();		String[] s0 = Modchu_Main.getMinecraftVersion() > 159 ? new String[]{				"/assets/minecraft/textures/entity/littleMaid/",				"/assets/modchulib/textures/entity/littleMaid/"}		: new String[]{				"/assets/minecraft/textures/entity/littleMaid/",				"/assets/modchulib/textures/entity/littleMaid/",				"/mob/littleMaid/" };		ModchuModel_TextureManagerBase.instance.addSearch(new String[]{ "MultiModel" }, s0);		load1CountSetting();		// テクスチャパックの構築		ModchuModel_TextureManagerBase.instance.init();		load1CountSetting();		//Modchu_Debug.lDebug("ModchuModel_Main modsLoaded() "+initModsLoadedCount);		List list = Modchu_CastHelper.List(Modchu_Main.isForge ? Modchu_Reflect.invokeMethod("Loader", "getActiveModList", Modchu_Reflect.invokeMethod("Loader", "instance")) : Modchu_Reflect.invokeMethod("ModLoader", "getLoadedMods"));		String name = null;		if (list != null				&& !list.isEmpty()) {			for (Object o1 : list) {				name = Modchu_Main.isForge ? Modchu_CastHelper.String(Modchu_Reflect.invokeMethod("ModContainer", "getName", o1)) : o1.getClass().getSimpleName();				//Modchu_Debug.mDebug("ModchuModel_Main modsLoaded getActiveModList name="+name);				if (name.equals("DecoBlock")) {					isDecoBlock = true;					Modchu_Debug.lDebug("[ModchuModel_Main] DecoBlock Check ok.");				}				else if (name.equals("FavBlock")) {					isFavBlock = true;					Modchu_Debug.lDebug("[ModchuModel_Main] FavBlock Check ok.");				}				else if (name.equals("FCBetterThanWolves")) {					isBTW = true;					Modchu_Debug.lDebug("[ModchuModel_Main] FCBetterThanWolves Check ok.");				}				else if (name.startsWith("SmartMoving")						| name.equals("mod_SmartMoving")) {					if (!Modchu_Main.isRelease()) {						isSmartMoving = true;						Modchu_Debug.lDebug("SmartMoving Check ok.");					}				}			}		}		if (Modchu_Main.isModUse("modchu.pflmf.modc_PFLMF")) {			isPFLMF = true;			Modchu_Debug.lDebug("[ModchuModel_Main] modc_PFLMF Check ok.");		} else {			Modchu_Debug.lDebug("[ModchuModel_Main] modc_PFLMF Check out.");		}		if (isSmartMoving) {			ModchuModel_ConfigData.skirtFloats = false;			ModchuModel_TextureManagerBase.instance.modelClassName = "MultiModelSmart";			BipedClass = Modchu_Reflect.loadClass("MultiModelSmart_Biped");			BipedClass2 = Modchu_Reflect.loadClass("MultiModelSmart_Player");			ModchuModel_TextureManagerBase.instance.addSearch(new String[]{ ModchuModel_TextureManagerBase.instance.modelClassName, "playerformlittlemaid" }, new String[]{ "/mob/littleMaid/" });		} else {			BipedClass = MultiModel_Biped.class;			BipedClass2 = MultiModel_Player.class;		}		load1CountSetting();		ModchuModel_ModelAddManager.addCustomModel();		load1CountSetting();		ModchuModel_ModelAddManager.lmmTextureManagerInit();		load1CountSetting();		sizeMultiplier = Modchu_Reflect.getMethod("Entity", "getSizeMultiplier", -1);		initLoad1 = true;	}	public static void modsLoaded() {		if (initModsLoaded) return;		renderPlayerDummyInstance = (Modchu_IRenderLivingBase) Modchu_Main.newModchuCharacteristicObject("Modchu_RenderPlayerDummy", ModchuModel_RenderMasterBase.class);		//Modchu_Debug.lDebug("ModchuModel_Main loadInit() renderPlayerDummyInstance="+renderPlayerDummyInstance);		if (renderPlayerDummyInstance != null) {			Object master = Modchu_Main.getModchuCharacteristicObjectMaster(renderPlayerDummyInstance);			if (master != null) {				Modchu_Debug.lDebug("ModchuModel_Main addRenderer end. renderPlayerDummyInstance.master.getClass()="+master.getClass());			} else {				Modchu_Debug.systemLogDebug("ModchuModel_Main addRenderer end. renderPlayerDummyInstance.master == null !!", 2, null);				String s = "ModchuModel_Main addRenderer renderPlayerDummyInstance.master == null error !!";				Modchu_Main.setRuntimeException(s);				return;			}		} else {			Modchu_Debug.systemLogDebug("ModchuModel_Main addRenderer end. renderPlayerDummyInstance == null !!", 2, null);			String s = "ModchuModel_Main addRenderer renderPlayerDummyInstance == null error !!";			Modchu_Main.setRuntimeException(s);			return;		}		Modchu_AS.set(Modchu_AS.renderRenderManager, renderPlayerDummyInstance);		if (Modchu_Main.isForge) addRenderer(null);		initModsLoaded = true;	}	private static void modsLoadedCountSetting() {		initModsLoadedCount++;		settingModsLoadedLoadScreenSubProgress();		Modchu_Debug.systemLogDebug(new StringBuilder().append("[ModchuModel_Main] 3 - (").append(initModsLoadedCount).append(" / ").append(maxInitModsLoadedCount).append(") modsLoaded()").toString());	}	private static void load1CountSetting() {		initLoad1Count++;		settingLoad1LoadScreenSubProgress();		Modchu_Debug.systemLogDebug(new StringBuilder().append("[ModchuModel_Main] 2 - (").append(initLoad1Count).append(" / ").append(maxInitLoad1Count).append(") load1()").toString());	}	public static void setSubProgress(int i) {		if (Modchu_Main.isServer) return;		initModsLoadedProgress = (int) (((float) i / 100.0F) * 30F);		settingModsLoadedLoadScreenSubProgress();	}	public static void setSubProgress2(int i) {		if (Modchu_Main.isServer) return;		initModsLoadedProgress = (int) (30F + ((float) i / 100.0F) * 40F);		settingModsLoadedLoadScreenSubProgress();	}	private static void settingLoad1LoadScreenSubProgress() {	}	private static void settingModsLoadedLoadScreenSubProgress() {		Modchu_Main.setModsLoadedLoadScreenSubProgress((int) (10.0F - ((float) (maxInitModsLoadedCount - initModsLoadedCount) / (float) maxInitModsLoadedCount) * 10F) + initModsLoadedProgress);	}	public static void addRenderer(Object map) {		Modchu_Debug.lDebug("ModchuModel_Main addRenderer");		if (addRendererFlag) return;		addRendererFlag = true;		Class c = Modchu_Main.getModchuCharacteristicClass("Modchu_EntityPlayerDummy");		if (c != null) Modchu_Main.addRenderer(c, renderPlayerDummyInstance);		else {			String s = "ModchuModel_Main addRenderer Modchu_EntityPlayerDummy.class == null error !!";			Modchu_Debug.systemLogDebug(s);			Modchu_Main.setRuntimeException(s);		}	}	public static void worldEventLoad(Object event) {		//Modchu_Debug.lDebug("ModchuModel_Main worldEventLoad ");		if (!initModsLoaded) Modchu_Main.setRuntimeException("ModchuModel_Main initModsLoaded error !! initModsLoadedCount="+initModsLoadedCount);		//Modchu_Debug.lDebug("ModchuModel_Main worldEventLoad 1");		ModchuModel_TextureManagerBase.instance.worldEventLoad(event);		//Modchu_Debug.lDebug("ModchuModel_Main worldEventLoad 2");		if (!Modchu_LMMManager.isLMM) return;		ModchuModel_ModelAddManager.worldEventLoad(event);	}	public static void loadcfg() {		// cfg読み込み		if (Modchu_Main.cfgdir.exists()) {			if (!mainCfgfile.exists()) {				// cfgファイルが無い = 新規作成				String s[] = {						"AlphaBlend=true", "skirtFloats=true", "skirtFloatsVolume=1.0D", "breastFloats=true", "breastFloatsVolume=1.0D",						"transparency=1.0F", "modchuRemodelingModel=true", "useInvisibilityBody=true", "useInvisibilityArmor=false", "useInvisibilityItem=false",						"versionCheck=true",  "debugCustomModelMessage=false", "modelForLittleMaidMob=true", "loadMinecraftJar=false", "isFakeBreast"/*//125delete						, "isModelSize=false"*///125delete						};				Modchu_Config.writerConfig(mainCfgfile, s);				initVersionCheckThread();			} else {				// cfgファイルがある				ConcurrentHashMap<String, String> map = Modchu_Config.loadAllConfig(mainCfgfile);				ModchuModel_ConfigData.AlphaBlend = map.containsKey("AlphaBlend") ? Modchu_CastHelper.Boolean(map.get("AlphaBlend")) : ModchuModel_ConfigData.AlphaBlend;				ModchuModel_ConfigData.skirtFloats = map.containsKey("skirtFloats") ? Modchu_CastHelper.Boolean(map.get("skirtFloats")) : ModchuModel_ConfigData.skirtFloats;				ModchuModel_ConfigData.skirtFloatsVolume = map.containsKey("skirtFloatsVolume") ? Modchu_CastHelper.Double(map.get("skirtFloatsVolume")) : ModchuModel_ConfigData.skirtFloatsVolume;				ModchuModel_ConfigData.breastFloats = map.containsKey("breastFloats") ? Modchu_CastHelper.Boolean(map.get("breastFloats")) : ModchuModel_ConfigData.breastFloats;				ModchuModel_ConfigData.breastFloatsVolume = map.containsKey("breastFloatsVolume") ? Modchu_CastHelper.Double(map.get("breastFloatsVolume")) : ModchuModel_ConfigData.breastFloatsVolume;				ModchuModel_ConfigData.transparency = map.containsKey("transparency") ? Modchu_CastHelper.Float(map.get("transparency")) : ModchuModel_ConfigData.transparency;				ModchuModel_ConfigData.modchuRemodelingModel = map.containsKey("modchuRemodelingModel") ? Modchu_CastHelper.Boolean(map.get("modchuRemodelingModel")) : ModchuModel_ConfigData.modchuRemodelingModel;				ModchuModel_ConfigData.useInvisibilityBody = map.containsKey("useInvisibilityBody") ? Modchu_CastHelper.Boolean(map.get("useInvisibilityBody")) : ModchuModel_ConfigData.useInvisibilityBody;				ModchuModel_ConfigData.useInvisibilityArmor = map.containsKey("useInvisibilityArmor") ? Modchu_CastHelper.Boolean(map.get("useInvisibilityArmor")) : ModchuModel_ConfigData.useInvisibilityArmor;				ModchuModel_ConfigData.useInvisibilityItem = map.containsKey("useInvisibilityItem") ? Modchu_CastHelper.Boolean(map.get("useInvisibilityItem")) : ModchuModel_ConfigData.useInvisibilityItem;				ModchuModel_ConfigData.versionCheck = map.containsKey("versionCheck") ? Modchu_CastHelper.Boolean(map.get("versionCheck")) : ModchuModel_ConfigData.versionCheck;				ModchuModel_ConfigData.modelForLittleMaidMob = map.containsKey("modelForLittleMaidMob") ? Modchu_CastHelper.Boolean(map.get("modelForLittleMaidMob")) : ModchuModel_ConfigData.modelForLittleMaidMob;				Modchu_Debug.debugCustomModelMessage = map.containsKey("debugCustomModelMessage") ? Modchu_CastHelper.Boolean(map.get("debugCustomModelMessage")) : Modchu_Debug.debugCustomModelMessage;				ModchuModel_ConfigData.loadMinecraftJar = map.containsKey("loadMinecraftJar") ? Modchu_CastHelper.Boolean(map.get("loadMinecraftJar")) : ModchuModel_ConfigData.loadMinecraftJar;				ModchuModel_ConfigData.isFakeBreast = map.containsKey("isFakeBreast") ? Modchu_CastHelper.Boolean(map.get("isFakeBreast")) : ModchuModel_ConfigData.isFakeBreast;/*//125delete				ModchuModel_ConfigData.isModelSize = map.containsKey("isModelSize") ? Modchu_CastHelper.Boolean(map.get("isModelSize")) : ModchuModel_ConfigData.isModelSize;*///125delete				initVersionCheckThread();				if (threadVersionCheck != null) threadVersionCheck.urlString = map.containsKey("urlString") ? Modchu_CastHelper.String(map.get("urlString")) : "https://raw.githubusercontent.com/Modchu/hp/master/ModchuModel";				String k[] = {						"AlphaBlend", "skirtFloats", "skirtFloatsVolume", "breastFloats", "breastFloatsVolume",						"transparency", "modchuRemodelingModel", "useInvisibilityBody", "useInvisibilityArmor", "useInvisibilityItem",						"versionCheck", "debugCustomModelMessage", "modelForLittleMaidMob", "loadMinecraftJar", "isFakeBreast"/*//125delete						, "isModelSize=false"*///125delete				};				String k1[] = {						""+ModchuModel_ConfigData.AlphaBlend, ""+ModchuModel_ConfigData.skirtFloats, ""+ModchuModel_ConfigData.skirtFloatsVolume, ""+ModchuModel_ConfigData.breastFloats, ""+ModchuModel_ConfigData.breastFloatsVolume,						""+ModchuModel_ConfigData.transparency, ""+ModchuModel_ConfigData.modchuRemodelingModel, ""+ModchuModel_ConfigData.useInvisibilityBody, ""+ModchuModel_ConfigData.useInvisibilityArmor, ""+ModchuModel_ConfigData.useInvisibilityItem,						""+ModchuModel_ConfigData.versionCheck, ""+Modchu_Debug.debugCustomModelMessage, ""+ModchuModel_ConfigData.modelForLittleMaidMob, ""+ModchuModel_ConfigData.loadMinecraftJar, ""+ModchuModel_ConfigData.isFakeBreast/*//125delete						, ""+ModchuModel_ConfigData.isModelSize*///125delete				};				Modchu_Config.writerSupplementConfig(mainCfgfile, k, k1);			}			if (cfgfile.exists()) Modchu_Config.loadConfig(showModelList, cfgfile);		} else {			initVersionCheckThread();		}		cfgMaxMinCheck();	}	public static void cfgMaxMinCheck() {		if (ModchuModel_ConfigData.skirtFloatsVolume < 0.0D) ModchuModel_ConfigData.skirtFloatsVolume = 0.0D;		if (ModchuModel_ConfigData.skirtFloatsVolume > 2.0D) ModchuModel_ConfigData.skirtFloatsVolume = 2.0D;		if (ModchuModel_ConfigData.breastFloatsVolume < 0.0D) ModchuModel_ConfigData.breastFloatsVolume = 0.0D;		if (ModchuModel_ConfigData.breastFloatsVolume > 2.0D) ModchuModel_ConfigData.breastFloatsVolume = 2.0D;		if (ModchuModel_ConfigData.transparency < 0.0F) ModchuModel_ConfigData.transparency = 0.0F;		if (ModchuModel_ConfigData.transparency > 1.0F) ModchuModel_ConfigData.transparency = 1.0F;	}	private static void initVersionCheckThread() {		if (!ModchuModel_ConfigData.versionCheck) return;		threadVersionCheck = new ModchuModel_ThreadVersionCheck();		threadVersionCheck.urlString = "https://raw.githubusercontent.com/Modchu/hp/master/ModchuModel";	}	private static void startVersionCheckThread() {		if (!ModchuModel_ConfigData.versionCheck) return;		threadVersionCheck.start();		threadVersionCheck = null;	}	public static boolean checkRelease(String s) {		return Modchu_Main.compareToVersionString(s, versionString);	}	public static void setNewRelease(String s) {		newRelease = true;		newVersion = s;	}	public static void eventRegister(Object o) {		eventSystem.register(o);	}	public static void modchuLibEventUnRegister(Object o) {		eventSystem.unRegister(o);	}	public static boolean modchuLibEvent(String s) {		return eventSystem.isEvent(s);	}	public static Object[] modchuLibEvent(String s, Object[] o) {		return eventSystem.event(s, o);	}	public static int getCapsInt(String s) {		int i = 0;		i = (Integer) Modchu_Reflect.getFieldObject(Modchu_IEntityCapsBase.class, s);		if (i > 0) return i;		i = (Integer) Modchu_Reflect.getFieldObject(Modchu_IEntityCapsBase.class, s);		return i;	}	public static void reverseActionRequest(int i) {		reverseActionRequest(Modchu_AS.get(Modchu_AS.minecraftPlayer), i);	}	public static void reverseActionRequest(Object entity, int i) {		int actionRequestNumber = getActionRequestNumber(entity, false);		boolean actionFlag = getActionFlag(entity);		Modchu_Debug.mDebug("ModchuModel_Main reverseActionRequest actionFlag="+actionFlag+" entity="+entity);		if (actionFlag				&& actionRequestNumber == i) {			setActionRequest(entity, new boolean[]{ true, false, false });			Modchu_Debug.mDebug("setActionRequest false.解除要求");		} else {			setActionRequestNumber(entity, i, false);			setActionRequest(entity, new boolean[]{ true, true, false });			Modchu_Debug.mDebug("setActionRequest true.実行要求");		}	}	public static boolean getActionFlag() {		return getActionFlag(false);	}	public static boolean getActionFlag(boolean b) {		return getActionFlag(Modchu_AS.get(Modchu_AS.minecraftPlayer), b);	}	public static boolean getActionFlag(Object entity) {		return getActionFlag(entity, false);	}	public static boolean getActionFlag(Object entity, boolean b) {		ModchuModel_ModelDataBase modelData = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		if (modelData != null) return modelData.getCapsValueBoolean(modelData.caps_actionFlag, b);		return false;	}	public static boolean[] getActionRequest() {		return getActionRequest(false);	}	public static boolean[] getActionRequest(boolean b) {		return getActionRequest(Modchu_AS.get(Modchu_AS.minecraftPlayer), b);	}	public static boolean[] getActionRequest(Object entity) {		return getActionRequest(entity, false);	}	public static boolean[] getActionRequest(Object entity, boolean b) {		ModchuModel_ModelDataBase modelData = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		if (modelData != null) return modelData.getCapsValueBooleanArray(modelData.caps_actionRequest);		return null;	}	public static void setActionRequest(boolean[] b) {		setActionRequest(Modchu_AS.get(Modchu_AS.minecraftPlayer), b);	}	public static void setActionRequest(Object entity, boolean[] b) {		//Modchu_Debug.mDebug("ModchuModel_Main setActionRequest entity="+entity+" ThePlayer="+Modchu_AS.get(Modchu_AS.minecraftThePlayer));		//Modchu_Debug.mDebug("ModchuModel_Main setActionRequest b[0]="+b[0]);		Modchu_Debug.mDebug("ModchuModel_Main setActionRequest entity="+entity);		ModchuModel_ModelDataBase modelData = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		Modchu_Debug.mDebug("ModchuModel_Main setActionRequest modelData="+modelData);		if (modelData != null) modelData.setCapsValue(modelData.caps_actionRequest, b);	}	public static int getActionRequestNumber(Object entity) {		return getActionRequestNumber(Modchu_AS.get(Modchu_AS.minecraftPlayer), false);	}	public static int getActionRequestNumber(Object entity, boolean b) {		ModchuModel_ModelDataBase modelData = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		if (modelData != null) return modelData.getCapsValueInt(modelData.caps_actionRequestNumber, b);		return -1;	}	public static void setActionRequestNumber(int i) {		setActionRequestNumber(i, false);	}	public static void setActionRequestNumber(int i, boolean b) {		setActionRequestNumber(Modchu_AS.get(Modchu_AS.minecraftPlayer), i, b);	}	public static void setActionRequestNumber(Object entity, int i) {		setActionRequestNumber(entity, i, false);	}	public static void setActionRequestNumber(Object entity, int i, boolean b) {		ModchuModel_ModelDataBase modelData = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		if (modelData != null) modelData.setCapsValue(modelData.caps_actionRequestNumber, i, b);	}	public static int getActionReleaseNumber() {		return getActionReleaseNumber(false);	}	public static int getActionReleaseNumber(boolean b) {		return getActionReleaseNumber(Modchu_AS.get(Modchu_AS.minecraftPlayer), b);	}	public static int getActionReleaseNumber(Object entity) {		return getActionReleaseNumber(entity, false);	}	public static int getActionReleaseNumber(Object entity, boolean b) {		ModchuModel_ModelDataBase modelData = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		if (modelData != null) return modelData.getCapsValueInt(modelData.caps_actionReleaseNumber, b);		return -1;	}	public static void setActionReleaseNumber(int i) {		setActionReleaseNumber(i, false);	}	public static void setActionReleaseNumber(int i, boolean b) {		setActionReleaseNumber(Modchu_AS.get(Modchu_AS.minecraftPlayer), i, b);	}	public static void setActionReleaseNumber(Object entity, int i) {		setActionReleaseNumber(entity, i, false);	}	public static void setActionReleaseNumber(Object entity, int i, boolean b) {		ModchuModel_ModelDataBase modelData = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		if (modelData != null) modelData.setCapsValue(modelData.caps_actionReleaseNumber, i);	}	public static boolean isLMMModel(Object model) {		Class c = Modchu_LMMManager.getLMMAbstractModelBaseClass();		return c != null				&& c.isInstance(model);	}	public static boolean isPFLMModel(Object model) {		return model instanceof MultiModelBaseBiped;	}	public static Object checkEntity(Object entity) {		if (entity != null); else {			entity = Modchu_AS.get(Modchu_AS.minecraftPlayer);			if (entity != null); else {				//String ss = "ModchuModel_Main getPlayerData thePlayer == null error !!";				//Modchu_Debug.mDebug(ss);				//Modchu_Main.setRuntimeException(ss);				return null;			}		}		return entity;	}	public static void changeColor(Object entity) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		if (data != null) {			data.setCapsValue(data.caps_changeColor, entity);			//Modchu_Debug.lDebug("changeColor");		} else {			//if (data != null) Modchu_Debug.lDebug("changeColor out.data.getCapsValueBoolean(data.caps_isPlayer) ?"+(data.getCapsValueBoolean(data.caps_isPlayer)));		}	}	public static float getModelScale(Object entity) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		Object textureModel = data.models[0];		if (textureModel != null				&& textureModel instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) textureModel).getModelScale(data);		return 0.9375F;	}	public static float getWidth(Object entity) {		float f = 0.6F;		if (Modchu_Main.getMinecraftVersion() > 129				&& Modchu_Main.isOlddays) {			Object[] obj = (Object[]) Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "getModelBasicOrig");			return Modchu_CastHelper.Float(Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "getWidth", obj[0]));			//return PFLM_RenderPlayer2.getModelBasicOrig()[0].getWidth();		}		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		if (data != null); else return f;		Object textureModel = data.models[0];		if (textureModel != null				&& textureModel instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) textureModel).getWidth(data);		return f;	}	public static float getHeight(Object entity) {		float f = 1.8F;		if (Modchu_Main.getMinecraftVersion() > 129				&& Modchu_Main.isOlddays) {			Object[] obj = (Object[]) Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "getModelBasicOrig");			return Modchu_CastHelper.Float(Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "getHeight", obj[0]));			//return PFLM_RenderPlayer2.getModelBasicOrig()[0].getHeight();		}		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		if (data != null); else return f;		Object textureModel = data.models[0];		if (textureModel != null				&& textureModel instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) textureModel).getHeight(data);		return f;	}	public static float getYOffset(Object entity) {		float f = 1.62F;		if (Modchu_Main.getMinecraftVersion() > 129				&& Modchu_Main.isOlddays) {			Object o = Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "getModelBasicOrig");			Object[] obj = o != null					&& o instanceof Object[] ? (Object[]) o : null;			if (obj != null					&& obj.length > 0) return Modchu_CastHelper.Float(Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "getYOffset", obj[0]));			//return PFLM_RenderPlayer2.getModelBasicOrig()[0].getYOffset();		}		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		//Modchu_Debug.dDebug("data="+data, 1);		if (data != null); else return f;		Object textureModel = data.models[0];		//Modchu_Debug.dDebug("textureModel="+textureModel, 2);		if (textureModel != null				&& textureModel instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) textureModel).getYOffset(data);		return f;	}	public static float getRidingWidth(Object entity) {		float f = 0.6F;		if (Modchu_Main.getMinecraftVersion() > 129				&& Modchu_Main.isOlddays) {			Object[] obj = (Object[]) Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "getModelBasicOrig");			return Modchu_CastHelper.Float(Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "getRidingWidth", obj[0]));			//return PFLM_RenderPlayer2.getModelBasicOrig()[0].getRidingWidth();		}		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		if (data != null); else return f;		Object textureModel = data.models[0];		if (textureModel != null				&& textureModel instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) textureModel).getRidingWidth(data);		return f;	}	public static float getRidingHeight(Object entity) {		float f = 1.8F;		if (Modchu_Main.getMinecraftVersion() > 129				&& Modchu_Main.isOlddays) {			Object[] obj = (Object[]) Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "getModelBasicOrig");			return Modchu_CastHelper.Float(Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "getRidingHeight", obj[0]));			//return PFLM_RenderPlayer2.getModelBasicOrig()[0].getRidingHeight();		}		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		if (data != null); else return f;		Object textureModel = data.models[0];		if (textureModel != null				&& textureModel instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) textureModel).getRidingHeight(data);		return f;	}	public static float getRidingYOffset(Object entity) {		float f = 1.62F;		if (Modchu_Main.getMinecraftVersion() > 129				&& Modchu_Main.isOlddays) {			Object[] obj = (Object[]) Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "getModelBasicOrig");			return Modchu_CastHelper.Float(Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "getRidingYOffset", obj[0]));			//return PFLM_RenderPlayer2.getModelBasicOrig()[0].getRidingYOffset();		}		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		if (data != null); else return f;		Object textureModel = data.models[0];		if (textureModel != null				&& textureModel instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) textureModel).getRidingYOffset(data);		return f;	}	public static double getMountedYOffset(Object entity) {		double d = 0.75D;		if (Modchu_Main.getMinecraftVersion() > 129				&& Modchu_Main.isOlddays) {			Object[] obj = (Object[]) Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "getModelBasicOrig");			return Modchu_CastHelper.Float(Modchu_Reflect.invokeMethod("PFLM_RenderPlayer2", "getMountedYOffset", obj[0]));			//return PFLM_RenderPlayer2.getModelBasicOrig()[0].getMountedYOffset();		}		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		if (data != null); else return d;		Object textureModel = data.models[0];		if (textureModel != null				&& textureModel instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) textureModel).getMountedYOffset(data);		return d;	}	public static boolean getIsRiding(Object entity) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		if (data != null); else return false;		Object textureModel = data.models[0];		if (textureModel != null				&& textureModel instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) textureModel).isRiding;		return false;	}	public static float getPhysical_Hammer(Object entity) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		if (data != null); else return 1.0F;		Object textureModel = data.models[0];		if (textureModel != null				&& textureModel instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) textureModel).Physical_Hammer(data);		return 1.0F;	}	public static float ridingViewCorrection(Object entity) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		if (data != null); else return 0.0F;		Object textureModel = data.models[0];		if (textureModel != null				&& textureModel instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) textureModel).ridingViewCorrection(data);		return 0.0F;	}	public static float getOnGround(Object entity) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		if (data != null); else return 0.0F;		Object model = data.models[0];		if (model != null				&& model instanceof MultiModelBaseBiped) return Modchu_EntityCapsHelper.getCapsValueFloat(model, data, ((MultiModelBaseBiped) model).caps_onGround);		return 0.0F;	}	public static String getUsernamegetEyeHeight(Object entity) {		Object thePlayer = Modchu_AS.get(Modchu_AS.minecraftPlayer);		if (entity != null); else entity = thePlayer;		if (entity != null) return Modchu_AS.getString(Modchu_AS.userName, entity);		return null;	}	public static boolean getChangeModelFlag(Object entity) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		if (data != null) return data.getCapsValueBoolean(data.caps_changeModelFlag);		return false;	}	public static void setChangeModelFlag(Object entity, boolean b) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		data.setCapsValue(data.caps_changeModelFlag, b);	}	public static int getHandednessMode(Object entity) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		if (data != null) return data.getCapsValueInt(data.caps_dominantArm);		return 0;	}	public static void setHandednessMode(Object entity, int i) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		data.setCapsValue(data.caps_dominantArm, i);	}	public static Object getModel(Object entity, int i) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		if (data != null) return data.getCapsValue((MultiModelBaseBiped) null, data.caps_model, i);		return null;	}	public static boolean getIsSitting(Object entity) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		if (data != null) return data.getCapsValueBoolean(data.caps_isSitting);		Modchu_Debug.mDebug("getIsSitting() modelData == null!!");		return false;	}	public static void setIsSitting(Object entity, boolean b) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		if (data != null) data.setCapsValue(data.caps_isSitting, b);		return;	}	public static boolean getIsSleeping(Object entity) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		if (data != null) return data.getCapsValueBoolean(data.caps_isSleeping);		return false;	}	public static void setIsSleeping(Object entity, boolean b) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		if (data != null) data.setCapsValue(data.caps_isSleeping, b);		return;	}	public static boolean getIsWait(Object entity) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		if (data != null) return data.getCapsValueBoolean(data.caps_isWait);		Modchu_Debug.mDebug("getIsWait() modelData == null!!");		return false;	}	public static void setIsWait(Object entity, boolean b) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		if (data != null) data.setCapsValue(data.caps_isWait, b);		return;	}	public static float getTempLimbSwing(Object entity) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		float f = 0.0F;		if (data != null) {			f = Modchu_CastHelper.Float(data.getCapsValue(data.caps_tempLimbSwing));		}		return f;	}	public static void setTempLimbSwing(Object entity) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		if (data != null) {			float f = Modchu_AS.getFloat(Modchu_AS.entityLivingBaseLimbSwing, entity);			data.setCapsValue(data.caps_tempLimbSwing, f);		}		return;	}	public static int getTempResetCheckCount(Object entity) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		int i = 0;		if (data != null) {			i = Modchu_CastHelper.Int(data.getCapsValue(data.caps_freeVariable, "tempResetCheckCount"));		}		return i;	}	public static void setTempResetCheckCount(Object entity, int i) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		if (data != null) {			data.getCapsValue(data.caps_freeVariable, "tempResetCheckCount", i);		}	}	public static boolean getAllMultiModelActionRunInitFlag(Object entity) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		if (data != null) return data.getCapsValueBoolean(data.caps_allMultiModelActionRunInitFlag);		return false;	}	public static void setAllMultiModelActionRunInitFlag(Object entity, boolean b) {		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		if (data != null) data.setCapsValue(data.caps_allMultiModelActionRunInitFlag, b);		return;	}	public static void customModelCfgReLoad(Object entity) {		ModchuModel_TextureManagerBase.instance.searchSettledListMap.clear();		ModchuModel_TextureManagerBase.instance.loadTextures();		onResourceManagerReload();		entity = checkEntity(entity);		ModchuModel_ModelDataBase data = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		if (data != null); else return;		MultiModelBaseBiped[] textureModel = {				data.models[0],				data.models[1],				data.models[2]		};		int version = Modchu_Main.getMinecraftVersion();		float[] f1;		for(int i = 0; i < textureModel.length; i++) {			if (textureModel != null					&& textureModel[i] instanceof MultiModelCustom) {				f1 = ModchuModel_TextureManagerBase.instance.getArmorModelsSize(textureModel[i]);				if (f1 != null) {					((MultiModelCustom) textureModel[i]).reInit();/*					((MultiModelCustom) textureModel[i]).customModel.init(null, i == 0 ? 0.0F : f1[i - 1], 0.0F);					if (version > 190) ((MultiModelCustom) textureModel[i]).customModel.init(null, i == 0 ? 0.0F : f1[i - 1], 0.0F);*/					((MultiModelCustom) textureModel[i]).customModel.changeModel(data);				}			}		}	}	private static void onResourceManagerReload() {		if (Modchu_Main.isServer) return;		Object textureManager = Modchu_AS.get(Modchu_AS.minecraftGetTextureManager);		Object theResourceManager = Modchu_AS.get("TextureManager", "theResourceManager", textureManager);		int version = Modchu_Main.getMinecraftVersion();		boolean b = Modchu_AS.set("TextureManager", "onResourceManagerReload", new Class[]{ Modchu_Reflect.loadClass(version > 169 ? "IResourceManager" : "ResourceManager") }, textureManager, new Object[]{ theResourceManager });	}	public static boolean bipedCheck() {		return bipedCheck(Modchu_AS.get(Modchu_AS.minecraftPlayer));	}	public static boolean bipedCheck(Object entityOrModel) {		if (entityOrModel != null); else return false;		if (Modchu_Reflect.loadClass("Entity").isInstance(entityOrModel)) {			ModchuModel_ModelDataBase data = ModchuModel_ModelDataMaster.instance.getPlayerData(entityOrModel);			if (data != null); else return false;			entityOrModel = data.models[0];		}		Object model = Modchu_Main.getModchuCharacteristicObjectMaster(entityOrModel);		boolean b = model != null				&& (BipedClass.isInstance(model)				| BipedClass2.isInstance(model));		//Modchu_Debug.mDebug("bipedCheck model="+model+" return "+b);		return b;	}	public static void texturesNamberInit() {		//モデルリスト用テクスチャーパックナンバー作成		if (texturesNamberInitFlag) return;		texturesNamberInitFlag = true;		Map<String, ModchuModel_TextureBoxBase> textures = ModchuModel_TextureManagerBase.instance.textures;		texturesNamberMap = new HashMap();		texturesArmorNamberList = new LinkedList();		String textureName = null;		String t = null;		String t1 = null;		ModchuModel_TextureBoxBase ltb;		List<String> tempArmorNameList = new ArrayList();		//boolean debugFlag = false;		//ModchuModel_TextureManagerBase.instance.textureNameList();		for (int i2 = 0 ; i2 < textures.size() ; ++i2) {			ltb = ModchuModel_TextureManagerBase.instance.getTextureManagerTextures(i2, false);			textureName = ltb != null ? ModchuModel_TextureManagerBase.instance.getTextureBoxTextureName(ltb) : null;			t1 = textureName != null ? textureName : null;/*			if (t1 != null					&& t1.equals("default_Custom")) {				if (debugFlag) {					String ss = "ModchuModel_Main texturesNamberInit default_Custom debug";					Modchu_Main.setRuntimeException(ss);					return;				}				debugFlag = true;			}*/			if (ltb != null					&& t1 != null					&& !t1.isEmpty()) {				for (int color = 0 ; color < 16 ; color++) {					if (ModchuModel_TextureManagerBase.instance.getTextureBoxHasColor(ltb, color)) {						//Modchu_Debug.mDebug("ModchuModel_Main texturesNamberInit color="+color+":i1="+i1[color]+" t1="+t1+" t="+t);						List<Integer> list1 = texturesNamberMap.containsKey(color) ? texturesNamberMap.get(color) : new LinkedList();						list1.add(i2);						texturesNamberMap.put(color, list1);						t = t1;					}				}				if (ModchuModel_TextureManagerBase.instance.getTextureBoxHasArmor(ltb)) {					if (!tempArmorNameList.contains(textureName)) {						tempArmorNameList.add(textureName);						texturesArmorNamberList.add(i2);					}				}			}		}	}}