package modchu.model;import java.io.BufferedReader;import java.io.File;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.lang.reflect.Constructor;import java.util.ArrayList;import java.util.Enumeration;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Map.Entry;import java.util.TreeMap;import java.util.zip.ZipEntry;import java.util.zip.ZipFile;import modchu.lib.Modchu_Config;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_FileManager;import modchu.lib.Modchu_Main;import modchu.lib.Modchu_Reflect;import modchu.lib.characteristic.Modchu_AS;import modchu.lib.characteristic.Modchu_CastHelper;import modchu.lib.characteristic.Modchu_IEntityCapsBase;import modchu.lib.characteristic.Modchu_ModelBase;import modchu.lib.characteristic.Modchu_TextureBoxBase;import modchu.lib.characteristic.Modchu_TextureManagerBase;import modchu.lib.characteristic.Modchu_Version;import modchu.model.multimodel.base.MultiModel;import modchu.model.multimodel.base.MultiModelBaseBiped;import modchu.model.multimodel.base.MultiModelCustom;public class ModchuModel_Main {	public static final String version = "22";	public static modc_ModchuModel baseModInstance;	public static final String modName = "ModchuModel";	public static final String versionString = ""+ Modchu_Version.version + "-" + version;	public static String newVersion = "";	public static boolean isLMM = false;	public static boolean isLMMX = false;	public static boolean isPFLMF = false;	public static boolean isFavBlock = false;	public static boolean isDecoBlock = false;	public static boolean isBTW = false;	public static boolean isSSP = false;	public static boolean isGulliver = false;	public static boolean initModsLoaded = false;	public static HashMap<String, Object[]> checkModelsBox = new HashMap();	public static HashMap<Object, Map> entityModelMapData = new HashMap();	public static HashMap<String, Object[]> dummyModelMapData = new HashMap();	public static ArrayList<String> ngPlayerModelList = new ArrayList();	public static ArrayList<String> showModelList = new ArrayList();	public static ArrayList<String> modelNewInstanceNgList = new ArrayList();	public static String modelClassName = "MultiModel";	private static File mainCfgfile;	public static File cfgfile;	private static int initModsLoadedCount = 0;	private static final int maxInitModsLoadedCount = 10;	public String getName() {		return modName;	}	public String getVersion() {		return versionString;	}	public static void load() {		Modchu_Debug.systemLogDebug("[ModchuModel_Main] 1 - (1 / 2) load()");		//対応MOD導入チェック class直チェック		String className1[] = {				"net.minecraft.decoblock.DecoBlock", "net.minecraft.favstar.BlockFav", "EntityPlayerSP2", "net.minecraft.src.EntityPlayerSP2"		};		String test2 = null;		for (int n = 0 ; n < className1.length ; n++){			try {				test2 = className1[n];				test2 = ""+Class.forName(test2);				Modchu_Debug.lDebug(test2 + " Check ok.");				if(n == 0) isDecoBlock = true;				if(n == 1) isFavBlock = true;				if(n == 2						| n == 3) {					try {						String s = className1[n];						if (s != null) {							Object o = Modchu_Reflect.getFieldObject(s, "armor", -1);							if (o != null) isSSP = true;						}					} catch(Exception e) {					}				}			} catch (ClassNotFoundException e) {			}		}		mainCfgfile = new File(Modchu_Main.cfgdir, "ModchuModel.cfg");		cfgfile = new File(Modchu_Main.cfgdir, "ModchuModel_ShowModel.cfg");		loadcfg();		if (ModchuModel_ConfigData.versionCheck) startVersionCheckThread();		Modchu_Debug.systemLogDebug("[ModchuModel_Main] 1 - (2 / 2) load() end.");	}	public static void modsLoaded() {		modsLoadedCountSetting();		if (initModsLoaded) return;		initModsLoadedCount = 0;		//Modchu_Debug.lDebug("ModchuModel_Main modsLoaded() "+initModsLoadedCount);		// テクスチャパック、モデルの読み込み		Modchu_FileManager.getModFile("playerformlittlemaid", "MultiModel");		Modchu_FileManager.getModFile("playerformlittlemaid", "playerformlittlemaid");		modsLoadedCountSetting();		Modchu_TextureManagerBase.instance.addSearch("playerformlittlemaid", "/assets/minecraft/textures/entity/littleMaid/", "modchu.model.multimodel.base."+ModchuModel_Main.modelClassName+"_");		Modchu_TextureManagerBase.instance.addSearch("playerformlittlemaid", "/assets/minecraft/textures/entity/littleMaid/", "modchu.model.multimodel."+ModchuModel_Main.modelClassName+"_");		Modchu_TextureManagerBase.instance.addSearch("playerformlittlemaid", "/assets/minecraft/textures/entity/littleMaid/", ModchuModel_Main.modelClassName+"_");		modsLoadedCountSetting();		// 必須モデルのロードテスト		Modchu_Debug.lDebug("ModchuModel_Main modsLoaded() MultiModel load.");		MultiModelBaseBiped[] models = null;		try {			models = new MultiModel[3];			Modchu_Debug.lDebug("ModchuModel_Main modsLoaded() MultiModel load models="+models);			modsLoadedCountSetting();			models[0] = new MultiModel(0.0F);			if (models[0] != null) ;else {				Modchu_Main.setRuntimeException("MultiModel.class not found !!");			}			Modchu_Debug.lDebug("ModchuModel_Main modsLoaded() MultiModel load models[0]="+models[0]);			float[] f = ((MultiModel) models[0]).getArmorModelsSize();			models[1] = new MultiModel(f[0]);			models[2] = new MultiModel(f[1]);		} catch(Exception e) {			Modchu_Debug.systemLogDebug("ModchuModel_Main modsLoaded() MultiModel load models Exception !!");			Modchu_Debug.systemLogDebug("", e);			e.printStackTrace();		}		Modchu_Debug.lDebug("ModchuModel_Main modsLoaded() MultiModel load end.");		modsLoadedCountSetting();		// テクスチャパックの構築		Modchu_TextureManagerBase.instance.init();		modsLoadedCountSetting();		Modchu_TextureManagerBase.instance.modelMap.put(Modchu_TextureManagerBase.instance.defaultModelName, models);		Modchu_TextureManagerBase.instance.loadTextures();		modsLoadedCountSetting();		//Modchu_Debug.lDebug("ModchuModel_Main modsLoaded() "+initModsLoadedCount);		List list = Modchu_CastHelper.List(Modchu_Main.isForge ? Modchu_Reflect.invokeMethod("Loader", "getActiveModList", Modchu_Reflect.invokeMethod("Loader", "instance")) : Modchu_Reflect.invokeMethod("ModLoader", "getLoadedMods"));		String name = null;		if (list != null				&& !list.isEmpty()) {			for (Object o1 : list) {				name = Modchu_Main.isForge ? Modchu_CastHelper.String(Modchu_Reflect.invokeMethod("ModContainer", "getName", o1)) : o1.getClass().getSimpleName();				//Modchu_Debug.mDebug("ModchuModel_Main modsLoaded getActiveModList name="+name);				if (name.equals("DecoBlock")) {					isDecoBlock = true;					Modchu_Debug.lDebug("[ModchuModel_Main] DecoBlock Check ok.");				}				else if (name.equals("FavBlock")) {					isFavBlock = true;					Modchu_Debug.lDebug("[ModchuModel_Main] FavBlock Check ok.");				}				else if (name.equals("FCBetterThanWolves")) {					isBTW = true;					Modchu_Debug.lDebug("[ModchuModel_Main] FCBetterThanWolves Check ok.");				}				else if (name.equals("mod_LMM_littleMaidMob")						| name.equals("littleMaidMob")						| name.equals("LittleMaidMob")) {					isLMM = true;					Modchu_Debug.lDebug("[ModchuModel_Main] littleMaidMob Check ok.");				}				else if (name.equals("MMMLibX")) {					isLMM = true;					isLMMX = true;					Modchu_Debug.lDebug("[ModchuModel_Main] MMMLibX Check ok.");				}			}		}		if (Modchu_Main.isModUse("modchu.pflmf.modc_PFLMF")) {			isPFLMF = true;			Modchu_Debug.lDebug("[ModchuModel_Main] modc_PFLMF Check ok.");		} else {			Modchu_Debug.lDebug("[ModchuModel_Main] modc_PFLMF Check out.");		}		modsLoadedCountSetting();		addCustomModel();		modsLoadedCountSetting();		initTextureManager();		modsLoadedCountSetting();		lmmTextureManagerInit();		modsLoadedCountSetting();		initModsLoaded = true;	}	private static void modsLoadedCountSetting() {		initModsLoadedCount++;		Modchu_Debug.systemLogDebug(new StringBuilder().append("[ModchuModel_Main] 2 - (").append(initModsLoadedCount).append(" / ").append(maxInitModsLoadedCount).append(") modsLoaded()").toString());	}	public static void worldEventLoad(Object event) {		//Modchu_Debug.lDebug("ModchuModel_Main worldEventLoad ");		if (!initModsLoaded) Modchu_Main.setRuntimeException("ModchuModel_Main initModsLoaded error !! initModsLoadedCount="+initModsLoadedCount);		//Modchu_Debug.lDebug("ModchuModel_Main worldEventLoad 1");		if (Modchu_TextureManagerBase.instance.textures != null				&& !Modchu_TextureManagerBase.instance.textures.isEmpty()) {			for (Modchu_TextureBoxBase mtb : Modchu_TextureManagerBase.instance.textures) {				if (mtb != null) ;else continue;				if (mtb.models != null) {					for (Object model : mtb.models) {						if (model != null								&& model instanceof MultiModelBaseBiped) {							((MultiModelBaseBiped) model).worldEventLoad(event);						}					}				}			}		}		//Modchu_Debug.lDebug("ModchuModel_Main worldEventLoad 2");		Class ModchuLmmModel = getModchuLmmModelClass();		if (ModchuLmmModel != null) ;else return;		if (Modchu_Main.getMinecraftVersion() > 169) {			Map textures = Modchu_CastHelper.Map(getLmmTextureManagerTextures());			if (textures != null					&& !textures.isEmpty()) ;else {				return;			}			for (Entry<String, Object> en : ((Map<String, Object>) textures).entrySet()) {				Object ltb = en.getValue();				Object model = getTextureBoxModels(ltb);				if (model != null						&& ModchuLmmModel.isInstance(model)) {					Modchu_Reflect.invokeMethod(ModchuLmmModel, "worldEventLoad", new Class[]{ Object.class }, model, new Object[]{ event });				}			}		} else {			List textures = Modchu_CastHelper.List(getLmmTextureManagerTextures());			if (textures != null					&& !textures.isEmpty()) ;else {				return;			}			for (Object ltb : textures) {				Object model = getTextureBoxModels(ltb);				if (model != null						&& ModchuLmmModel.isInstance(model)) {					Modchu_Reflect.invokeMethod(ModchuLmmModel, "worldEventLoad", new Class[]{ Object.class }, model, new Object[]{ event });				}			}		}	}	private static void initTextureManager() {		if (!Modchu_Main.isServer) {			//ModchuModel_StabilizerManagerReplacePoint.loadStabilizer();			// テクスチャインデックスの構築			Modchu_TextureManagerBase.instance.initTextureList(true);		} else {			Modchu_TextureManagerBase.instance.loadTextureServer();		}	}	private static void addCustomModel() {		Modchu_Debug.mDebug("ModchuModel_Main addCustomModel()");		File cfgdir = new File(Modchu_AS.getFile(Modchu_AS.minecraftMcDataDir), "/config/CustomModel/");		File file = cfgdir != null ? new File(cfgdir, "CustomModel_1.cfg") : null;		if (file != null				&& file.exists()); else {			ModchuModel_CustomModel.sampleZipCopy(null);			file = cfgdir != null ? new File(cfgdir, "CustomModel_1.cfg") : null;		}		if (!cfgdir.exists()) {			Modchu_Debug.systemLogDebug("ModchuModel_Main addCustomModel() cfgdir not found !! cfgdir="+cfgdir);			return;		}		ArrayList<File> list = Modchu_FileManager.listFiles(cfgdir.getAbsolutePath(), "*.cfg", null, "CustomModel_");		if (list != null				&& !list.isEmpty()) {			Modchu_Debug.mDebug("ModchuModel_Main addCustomModel() list != null");			for (File f : list) {				String name = Modchu_Main.lastIndexProcessing(f.getName(), "_");				addPflmAndLmmCustomModel(name);			}		}		addOtherCustomModel();		Modchu_Debug.mDebug("ModchuModel_Main addCustomModel() end.");	}	private static void addPflmAndLmmCustomModel(String name) {		if (name != null				&& !name.isEmpty()) ;else return;		try {			int i1 = name.indexOf(".");			if (i1 > -1) name = name.substring(0, i1);			Modchu_Debug.mDebug("ModchuModel_Main addPflmAndLmmCustomModel() name="+name);			MultiModelBaseBiped[] mlm = new MultiModelBaseBiped[3];			mlm[0] = new MultiModelCustom(name, 0.0F, 0.0F, 64, 32);			float[] lsize = mlm[0].getArmorModelsSize();			mlm[1] = new MultiModelCustom(name, lsize[0], 0.0F, 64, 32);			mlm[2] = new MultiModelCustom(name, lsize[1], 0.0F, 64, 32);			String s0 = "Custom"+name;			addPflmTextureManagerModel(s0, MultiModelCustom.class, mlm);			MultiModelBaseBiped[] mlm2 = new MultiModelBaseBiped[3];			mlm2[0] = new MultiModelCustom(name, 0.0F, 0.0F, 64, 32);			float[] lsize2 = mlm2[0].getArmorModelsSize();			mlm2[1] = new MultiModelCustom(name, lsize2[0], 0.0F, 64, 32);			mlm2[2] = new MultiModelCustom(name, lsize2[1], 0.0F, 64, 32);			Modchu_Debug.mDebug("ModchuModel_Main addPflmAndLmmCustomModel() mlm2[0]="+mlm2[0]);			addLmmTextureManagerModel(s0, MultiModelCustom.class, mlm2);		} catch(Exception e) {			e.printStackTrace();		}	}	private static void addOtherCustomModel() {		File modsDir = new File(Modchu_AS.getFile(Modchu_AS.minecraftMcDataDir), "/mods/");		ArrayList<File> list = Modchu_FileManager.listFiles(modsDir.getAbsolutePath(), "*.zip", null, "MultiModelOtherCustomModel");		if (list != null				&& !list.isEmpty()) {			ZipFile zipFile = null;			InputStream inputStream = null;			InputStreamReader inputStreamReader = null;			BufferedReader breader = null;			try {				for (File file1 : list) {					//String s = file1.toString();					String s = file1.getAbsolutePath();					zipFile = null;					try {						zipFile = new ZipFile(s);					} catch (Exception e) {						Modchu_Debug.lDebug("ModchuModel_Main addCustomModel() Exception !! s="+s, 2, e);						e.printStackTrace();						continue;					}					//Modchu_Debug.mlDebug("ModchuModel_Main addCustomModel() zipFile="+zipFile);					for (Enumeration<? extends ZipEntry> e = zipFile.entries(); e.hasMoreElements();) {						ZipEntry entry = e.nextElement();						String name = entry.getName();						Modchu_Debug.mlDebug(name);						if (entry.isDirectory()								| name.lastIndexOf(".cfg") < 0) continue;						inputStream = zipFile.getInputStream(entry);						inputStreamReader = new InputStreamReader(zipFile.getInputStream(entry));						breader = new BufferedReader(inputStreamReader);						String rl;						HashMap<String, Object> tempMap = new HashMap();						while ((rl = breader.readLine()) != null) {							addOtherCustomModelSetting(rl, tempMap);						}						tempMap = null;					}					zipFile.close();					zipFile = null;				}			} catch (Exception e) {				e.printStackTrace();			} finally {				try {					if (zipFile != null) zipFile.close();				} catch (Exception e) {				}				try {					if (inputStream != null) inputStream.close();				} catch (Exception e) {				}				try {					if (breader != null) breader.close();				} catch (Exception e) {				}				try {					if (inputStreamReader != null) inputStreamReader.close();				} catch (Exception e) {				}			}		}	}	private static void addOtherCustomModelSetting(String s, HashMap<String, Object> tempMap) {		boolean debug = false;		if (debug) Modchu_Debug.lDebug("addOtherCustomModelSetting() s="+s);		s = s.replaceAll(" ", "");		s = s.replaceAll("	", "");		String s0 = Modchu_Main.lastIndexProcessing(s, "=");		if (debug) Modchu_Debug.lDebug("addOtherCustomModelSetting() s0="+s0);		if (s.startsWith("name")) {			tempMap.put("tempOtherCustomModelName", s0);			if (debug) Modchu_Debug.lDebug("addOtherCustomModelSetting() tempOtherCustomModelName="+s0);			return;		}		if (s.startsWith("modelsize")) {			String[] s1 = s0.split(",");			if (s1 != null					&& s1.length > 0) {				tempMap.put("tempOtherCustomModelSize", Modchu_Main.stringArrayToFloatArray(s1));				if (debug) Modchu_Debug.lDebug("addOtherCustomModelSetting() modelsize s1[0]="+s1[0]);			} else {				if (debug) Modchu_Debug.lDebug("addOtherCustomModelSetting() else !! modelsize s1="+s1);			}			return;		}		if (s.startsWith("model")) {			tempMap.put("tempOtherCustomModelClassName", s0);			if (debug) Modchu_Debug.lDebug("addOtherCustomModelSetting() tempOtherCustomModelClassName="+s0);			return;		}		if (s.startsWith("renderDummyEntityInvokeMethod")) {			ArrayList list = tempMap.containsKey("tempOtherCustomModelRenderDummyEntityInvokeMethod") ? Modchu_CastHelper.ArrayList(tempMap.get("tempOtherCustomModelRenderDummyEntityInvokeMethod")) : new ArrayList();			list.add(s0);			tempMap.put("tempOtherCustomModelRenderDummyEntityInvokeMethod", list);			if (debug) Modchu_Debug.lDebug("addOtherCustomModelSetting() tempOtherCustomModelRenderDummyEntityInvokeMethod="+s0);			return;		}		if (s.startsWith("renderDummyEntity")) {			tempMap.put("tempOtherCustomModelRenderDummyEntity", s0);			if (debug) Modchu_Debug.lDebug("addOtherCustomModelSetting() renderDummyEntity s0="+s0);			return;		}		if (s.startsWith("defaultScale")) {			tempMap.put("tempOtherCustomModelDefaultScale", Modchu_CastHelper.Float(s0));			if (debug) Modchu_Debug.lDebug("addOtherCustomModelSetting() tempOtherCustomModelDefaultScale="+s0);			return;		}		if (s.startsWith("guiViewScale")) {			tempMap.put("tempOtherCustomModelGuiViewScale", Modchu_CastHelper.Float(s0));			if (debug) Modchu_Debug.lDebug("addOtherCustomModelSetting() tempOtherCustomModelGuiViewScale="+s0);			return;		}		if (s.startsWith("guiPositionCorrection")) {			String[] s1 = s0.split(",");			if (s1 != null					&& s1.length > 0) {				tempMap.put("tempOtherCustomModelGuiPositionCorrection", Modchu_Main.stringArrayToFloatArray(s1));				if (debug) Modchu_Debug.lDebug("addOtherCustomModelSetting() tempOtherCustomModelGuiPositionCorrection="+s1);			} else {				if (debug) Modchu_Debug.lDebug("addOtherCustomModelSetting() else !! tempOtherCustomModelGuiPositionCorrection s1="+s1);			}			return;		}		if (s.startsWith("positionCorrection")) {			String[] s1 = s0.split(",");			if (s1 != null					&& s1.length > 0) {				tempMap.put("tempOtherCustomModelPositionCorrection", Modchu_Main.stringArrayToFloatArray(s1));				if (debug) Modchu_Debug.lDebug("addOtherCustomModelSetting() tempOtherCustomModelPositionCorrection="+s1);			} else {				if (debug) Modchu_Debug.lDebug("addOtherCustomModelSetting() positionCorrection s1="+s1);			}			return;		}		if (s.startsWith("texture")) {			String[] s1 = s0.split(",");			if (s1 != null					&& s1.length > 0) {				String[] s2 = new String[16];				for (int i1 = 0; i1 < 16; i1++) {					s2[i1] = i1 < s1.length ? s1[i1] : s1[0];					if (debug) Modchu_Debug.lDebug("addOtherCustomModelSetting() s2["+i1+"]="+s2[i1]);				}				tempMap.put("tempOtherCustomModelTextureName", s2);				if (debug) Modchu_Debug.lDebug("addOtherCustomModelSetting() tempOtherCustomModelTextureName="+s2);			} else {				if (debug) Modchu_Debug.lDebug("addOtherCustomModelSetting() tempOtherCustomModelTextureName s1="+s1);			}			return;		}		if (s.startsWith("isChild")) {			tempMap.put("tempOtherCustomModelIsChild", Modchu_CastHelper.Boolean(s0));			if (debug) Modchu_Debug.lDebug("addOtherCustomModelSetting() tempOtherCustomModelIsChild="+Modchu_CastHelper.Boolean(s0));			return;		}		if (s.startsWith("otherConstructorObject")) {			String[] s1 = s0.split(",");			if (s1 != null					&& s1.length > 0					&& tempMap.containsKey("tempOtherCustomOtherConstructor")) {				Object[] o = Modchu_Main.stringArrayToObjectArray(s1, Modchu_CastHelper.ClassArray(tempMap.get("tempOtherCustomOtherConstructor")));				tempMap.put("tempOtherCustomOtherConstructorObject", o);				if (debug) Modchu_Debug.lDebug("addOtherCustomModelSetting() tempOtherCustomOtherConstructorObject="+o);			} else {				if (debug) Modchu_Debug.lDebug("addOtherCustomModelSetting() else !! tempOtherCustomOtherConstructorObject s1="+s1+" tempMap.containsKey="+tempMap.containsKey("tempOtherCustomOtherConstructor"));			}			return;		}		if (s.startsWith("otherConstructor")) {			String[] s1 = s0.split(",");			if (s1 != null					&& s1.length > 0) {				tempMap.put("tempOtherCustomOtherConstructor", Modchu_Main.stringArrayToClassArray(s1));				if (debug) Modchu_Debug.lDebug("addOtherCustomModelSetting() tempOtherCustomOtherConstructor="+s1);			} else {				if (debug) Modchu_Debug.lDebug("addOtherCustomModelSetting() else !! tempOtherCustomOtherConstructor s1="+s1);			}			return;		}		if (s.isEmpty()) {			if (tempMap.containsKey("tempOtherCustomModelTextureName")					&& tempMap.containsKey("tempOtherCustomModelName")					&& tempMap.containsKey("tempOtherCustomModelClassName")) {				Modchu_TextureBoxBase mtb = pflmAddTempOtherCustomModel(tempMap);				if (mtb != null) lmmAddTempOtherCustomModel(mtb);			}			return;		}	}	private static Modchu_TextureBoxBase pflmAddTempOtherCustomModel(HashMap<String, Object> tempMap) {		boolean debug = false;		String tempOtherCustomModelName = Modchu_CastHelper.String(tempMap.get("tempOtherCustomModelName"));		String[] tempOtherCustomModelTextureName = Modchu_CastHelper.StringArray(tempMap.get("tempOtherCustomModelTextureName"));		String tempOtherCustomModelClassName = Modchu_CastHelper.String(tempMap.get("tempOtherCustomModelClassName"));		String tempOtherCustomModelRenderDummyEntity = Modchu_CastHelper.String(tempMap.containsKey("tempOtherCustomModelRenderDummyEntity") ? tempMap.get("tempOtherCustomModelRenderDummyEntity") : null);		ArrayList tempOtherCustomModelRenderDummyEntityInvokeMethod = Modchu_CastHelper.ArrayList(tempMap.containsKey("tempOtherCustomModelRenderDummyEntityInvokeMethod") ? tempMap.get("tempOtherCustomModelRenderDummyEntityInvokeMethod") : null);		Class[] tempOtherCustomOtherConstructor = Modchu_CastHelper.ClassArray(tempMap.containsKey("tempOtherCustomOtherConstructor") ? tempMap.get("tempOtherCustomOtherConstructor") : null);		Object[] tempOtherCustomOtherConstructorObject = Modchu_CastHelper.ObjectArray(tempMap.containsKey("tempOtherCustomOtherConstructorObject") ? tempMap.get("tempOtherCustomOtherConstructorObject") : null);		float[] tempOtherCustomModelSize = Modchu_CastHelper.FloatArray(tempMap.containsKey("tempOtherCustomModelSize") ? tempMap.get("tempOtherCustomModelSize") : new float[]{ 0.0F, 0.0F, 0.0F });		float[] tempOtherCustomModelPositionCorrection = Modchu_CastHelper.FloatArray(tempMap.containsKey("tempOtherCustomModelPositionCorrection") ? tempMap.get("tempOtherCustomModelPositionCorrection") : new float[]{ 0.0F, 0.0F, 0.0F });		float[] tempOtherCustomModelGuiPositionCorrection = Modchu_CastHelper.FloatArray(tempMap.containsKey("tempOtherCustomModelGuiPositionCorrection") ? tempMap.get("tempOtherCustomModelGuiPositionCorrection") : tempOtherCustomModelPositionCorrection);		float tempOtherCustomModelDefaultScale = Modchu_CastHelper.Float(tempMap.containsKey("tempOtherCustomModelDefaultScale") ? tempMap.get("tempOtherCustomModelDefaultScale") : 1.0F);		float tempOtherCustomModelGuiViewScale = Modchu_CastHelper.Float(tempMap.containsKey("tempOtherCustomModelGuiViewScale") ? tempMap.get("tempOtherCustomModelGuiViewScale") : 1.0F);		boolean tempOtherCustomModelIsChild = Modchu_CastHelper.Boolean(tempMap.containsKey("tempOtherCustomModelIsChild") ? tempMap.get("tempOtherCustomModelIsChild") : true);		tempMap.clear();		String fileName = "other_Custom"+ tempOtherCustomModelName;		Modchu_TextureBoxBase mtb = new Modchu_TextureBoxBase();		mtb.fileName = fileName;		mtb.textureName = fileName;		String name = fileName;		int i1 = name.indexOf("_");		mtb.packegeName = i1 > -1 ? name.substring(0, i1) : name;		mtb.textures = new HashMap();		for (int i = 0; i < 16; i++) {			mtb.textures.put(i, Modchu_Main.newResourceLocation(tempOtherCustomModelTextureName[i]));		}		mtb.armors = new TreeMap();		mtb.modelName = i1 > -1 ? name.substring(i1 + 1) : name;		//ltb1.textureDir = null;		Object[] o1 = newOtherModel(tempOtherCustomModelClassName, tempOtherCustomOtherConstructor, tempOtherCustomOtherConstructorObject, tempOtherCustomModelSize, tempOtherCustomModelIsChild);		if (o1 != null); else {			Modchu_Debug.systemLogDebug("pflmAddTempOtherCustomModel() new model failure !! tempOtherCustomModelClassName="+tempOtherCustomModelClassName);			return null;		}		if (debug) {			Modchu_Debug.lDebug("pflmAddTempOtherCustomModel() o1="+o1);			Modchu_Debug.lDebug("pflmAddTempOtherCustomModel() o1[0]="+o1[0]);		}		MultiModelBaseBiped[] mlm = new MultiModelBaseBiped[3];		HashMap<String, Object> map = new HashMap();		if (tempOtherCustomModelPositionCorrection != null				&& tempOtherCustomModelPositionCorrection.length > 2) {			map.put("positionCorrection", tempOtherCustomModelPositionCorrection);		}		if (tempOtherCustomModelGuiPositionCorrection != null				&& tempOtherCustomModelGuiPositionCorrection.length > 2) {			map.put("guiPositionCorrection", tempOtherCustomModelGuiPositionCorrection);		}		if (tempOtherCustomModelDefaultScale != 1.0F) map.put("defaultScale", tempOtherCustomModelDefaultScale);		if (tempOtherCustomModelGuiViewScale != 1.0F) map.put("guiViewScale", tempOtherCustomModelGuiViewScale);		if (tempOtherCustomModelRenderDummyEntity != null) map.put("renderDummyEntity", tempOtherCustomModelRenderDummyEntity);		if (tempOtherCustomModelRenderDummyEntityInvokeMethod != null) map.put("renderDummyEntityInvokeMethod", tempOtherCustomModelRenderDummyEntityInvokeMethod);		Object[] o2 = newModelCustom(o1, fileName, map);		if (o2 != null				&& o2[0] != null) {			for (int i = 0; i < o2.length; i++) {				mlm[i] = o2[i] instanceof MultiModelBaseBiped ? (MultiModelBaseBiped) o2[i] : null;			}			mtb.models = mlm;			if (debug) Modchu_Debug.lDebug("pflmAddTempOtherCustomModel() PFLM textures.add mtb.models="+mtb.models+" mtb.modelName="+mtb.modelName);		} else {			if (debug) Modchu_Debug.lDebug("pflmAddTempOtherCustomModel() PFLM textures.add o2 == null !! o1="+o1+" mtb.modelName="+mtb.modelName);			return null;		}		Modchu_TextureManagerBase.instance.textures.add(mtb);		//addPflmAndLmmCustomModel(tempOtherCustomModelName);		return mtb;	}	private static void lmmAddTempOtherCustomModel(Modchu_TextureBoxBase mtb) {		if (addLMMModelFlag()				&& mtb != null) ;else return;		boolean debug = false;		if (debug) Modchu_Debug.lDebug("lmmAddTempOtherCustomModel() mtb.fileName="+mtb.fileName);		Object ltb = newModchu_LmmTextureBox(mtb);		if (debug) Modchu_Debug.lDebug("lmmAddTempOtherCustomModel() ltb="+ltb);		if (ltb != null) ;else {			Modchu_Debug.systemLogDebug("lmmAddTempOtherCustomModel() ltb == null !! mtb="+mtb+" mtb.fileName="+mtb.fileName);			String Modchu_LmmTextureBoxString = isLMMX ? "modchu.lib.lmm.characteristic.Modchu_LmmXTextureBox" : "modchu.lib.lmm.characteristic.Modchu_LmmTextureBox";			Modchu_Debug.systemLogDebug("lmmAddTempOtherCustomModel() Modchu_LmmTextureBox class="+(Modchu_Reflect.loadClass(Modchu_LmmTextureBoxString)));			return;		}		if (Modchu_Main.getMinecraftVersion() > 169) {			Map textures = Modchu_CastHelper.Map(getLmmTextureManagerTextures());			if (textures != null					&& !textures.isEmpty()) ;else {				return;			}			textures.put(mtb.fileName, ltb);		} else {			List textures = Modchu_CastHelper.List(getLmmTextureManagerTextures());			if (textures != null					&& !textures.isEmpty()) ;else {				return;			}			textures.add(ltb);			if (debug) Modchu_Debug.lDebug("lmmAddTempOtherCustomModel() textures.add ltb="+ltb);		}		if (debug) Modchu_Debug.lDebug("lmmAddTempOtherCustomModel() 2");		addLmmTextureManagerModel(mtb.fileName, MultiModelCustom.class, mtb.models);		if (debug) Modchu_Debug.lDebug("lmmAddTempOtherCustomModel() 3 end.");	}	private static void lmmTextureManagerInit() {		if (!addLMMModelFlag()) return;		boolean debug = false;		if (getLmmTextureManagerInstance() != null) ;else {			Modchu_Debug.systemLogDebug("lmmTextureManagerInit() instance null !!", 2, null);			return;		}		Map models = getLmmTextureManagerModels();		if (models != null				&& !models.isEmpty()) ;else {			Modchu_Debug.systemLogDebug("lmmTextureManagerInit() models null !!", 2, null);			return;		}		boolean initFlag = false;		// PFLM側にLMMテクスチャ登録		if (debug) Modchu_Debug.lDebug("lmmTextureManagerInit() LMM to PFLM textures models="+models);		if (Modchu_Main.getMinecraftVersion() > 169				&& !isLMMX) {			Map textures = Modchu_CastHelper.Map(getLmmTextureManagerTextures());			if (debug) Modchu_Debug.lDebug("lmmTextureManagerInit() PFLM to LMM textures="+textures);			if (textures != null					&& !textures.isEmpty()) ;else {				Modchu_Debug.systemLogDebug("lmmTextureManagerInit() PFLM to LMM textures null !!", 2, null);				return;			}			ArrayList<String> list = new ArrayList();			for (Modchu_TextureBoxBase mtb : Modchu_TextureManagerBase.instance.textures) {				String s = mtb.fileName;				if (!list.contains(s)) list.add(s);			}			for (Entry<String, Object> en : ((Map<String, Object>) textures).entrySet()) {				try {					if (debug) Modchu_Debug.lDebug("lmmTextureManagerInit() PFLM to LMM textures s-------------------------");					String fileName = en.getKey();					if (fileName != null							&& !fileName.isEmpty()) ;else {						Modchu_Debug.systemLogDebug("lmmTextureManagerInit() PFLM to LMM fileName == null !!", 2, null);						continue;					}					fileName = fileName.replaceAll("/", ".");					Object ltb = en.getValue();					if (debug) Modchu_Debug.lDebug("lmmTextureManagerInit() PFLM to LMM fileName="+ fileName);					if (fileName.startsWith("textures.entity.")) fileName = fileName.substring(16);					if (list.contains(fileName)) {						if (debug) Modchu_Debug.lDebug("lmmTextureManagerInit() PFLM to LMM list.contains fileName="+fileName);						continue;					}					Modchu_TextureBoxBase mtb = new Modchu_TextureBoxBase();					mtb.fileName = fileName;					String name = Modchu_CastHelper.String(Modchu_Reflect.getFieldObject(ltb.getClass(), "name", ltb));					int i1 = name.indexOf("_");					mtb.packegeName = i1 > -1 ? name.substring(0, i1) : name;					mtb.textures = Modchu_CastHelper.Map(Modchu_Reflect.getFieldObject(ltb.getClass(), "textures", ltb));					mtb.armors = Modchu_CastHelper.Map(Modchu_Reflect.getFieldObject(ltb.getClass(), "armors", ltb));					mtb.modelName = i1 > -1 ? name.substring(i1 + 1) : name;					//ltb1.textureDir = null;					Object[] o1 = Modchu_CastHelper.ObjectArray(Modchu_Reflect.getFieldObject(ltb.getClass(), "models", ltb));					MultiModelBaseBiped[] mlm = new MultiModelBaseBiped[3];					Object[] o2 = newModelCustom(o1, fileName);					if (o2 != null							&& o2[0] != null) {						for (int i = 0; i < o2.length; i++) {							mlm[i] = o2[i] instanceof MultiModelBaseBiped ? (MultiModelBaseBiped) o2[i] : null;						}						mtb.models = mlm;						if (debug) Modchu_Debug.lDebug("lmmTextureManagerInit() PFLM to LMM textures.add mtb.models="+mtb.models+" mtb.modelName="+mtb.modelName);					} else {						Modchu_Debug.systemLogDebug("lmmTextureManagerInit() PFLM to LMM textures.add o2 == null !! o1="+o1+" fileName"+fileName+" mtb.modelName="+mtb.modelName, 2, null);					}					Modchu_TextureManagerBase.instance.textures.add(mtb);					initFlag = true;					if (debug) Modchu_Debug.lDebug("lmmTextureManagerInit() PFLM to LMM textures.add fileName="+fileName);					if (debug) Modchu_Debug.lDebug("lmmTextureManagerInit() PFLM to LMM textures e-------------------------");				} catch(Exception e) {					e.printStackTrace();				}			}		} else {			List textures = Modchu_CastHelper.List(getLmmTextureManagerTextures());			if (debug) Modchu_Debug.lDebug("lmmTextureManagerInit() PFLM to LMM textures="+textures);			if (textures != null					&& !textures.isEmpty()) ;else {				Modchu_Debug.systemLogDebug("lmmTextureManagerInit() PFLM to LMM textures null !!", 2, null);				return;			}			ArrayList<String> list = new ArrayList();			for (Modchu_TextureBoxBase mtb : Modchu_TextureManagerBase.instance.textures) {				String s = mtb.fileName;				if (!list.contains(s)) list.add(s);			}			if (list != null					&& !list.isEmpty()) {				for (Object ltb : textures) {					if (debug) Modchu_Debug.lDebug("lmmTextureManagerInit() PFLM to LMM textures s-------------------------");					String fileName = Modchu_CastHelper.String(Modchu_Reflect.getFieldObject(ltb.getClass(), "fileName", ltb));					if (fileName != null							&& !fileName.isEmpty()) ;else {						Modchu_Debug.systemLogDebug("lmmTextureManagerInit() PFLM to LMM fileName == null !!", 2, null);						continue;					}					if (debug) Modchu_Debug.lDebug("lmmTextureManagerInit() PFLM to LMM fileName="+ fileName);					if (list.contains(fileName)) {						if (debug) Modchu_Debug.lDebug("lmmTextureManagerInit() PFLM to LMM list.contains fileName="+fileName);						continue;					}					Modchu_TextureBoxBase mtb = new Modchu_TextureBoxBase();					mtb.fileName = fileName;					mtb.packegeName = Modchu_CastHelper.String(Modchu_Reflect.getFieldObject(ltb.getClass(), "packegeName", ltb));					mtb.textures = Modchu_CastHelper.Map(Modchu_Reflect.getFieldObject(ltb.getClass(), "textures", ltb));					mtb.armors = Modchu_CastHelper.Map(Modchu_Reflect.getFieldObject(ltb.getClass(), "armors", ltb));					mtb.modelName = Modchu_CastHelper.String(Modchu_Reflect.getFieldObject(ltb.getClass(), "modelName", ltb));					mtb.textureDir = Modchu_CastHelper.StringArray(Modchu_Reflect.getFieldObject(ltb.getClass(), "textureDir", ltb));					Object[] o1 = Modchu_CastHelper.ObjectArray(Modchu_Reflect.getFieldObject(ltb.getClass(), "models", ltb));					MultiModelBaseBiped[] mlm = new MultiModelBaseBiped[3];					Object[] o2 = newModelCustom(o1, fileName);					if (o2 != null							&& o2[0] != null) {						for (int i = 0; i < o2.length; i++) {							mlm[i] = o2[i] instanceof MultiModelBaseBiped ? (MultiModelBaseBiped) o2[i] : null;						}						mtb.models = mlm;						if (debug) Modchu_Debug.lDebug("lmmTextureManagerInit() PFLM to LMM textures.add mtb.models="+mtb.models+" mtb.modelName="+mtb.modelName);					} else {						Modchu_Debug.systemLogDebug("lmmTextureManagerInit() PFLM to LMM textures.add o2 == null !! o1="+o1+" fileName"+fileName+" mtb.modelName="+mtb.modelName, 2, null);					}					Modchu_TextureManagerBase.instance.textures.add(mtb);					initFlag = true;					if (debug) Modchu_Debug.lDebug("lmmTextureManagerInit() PFLM to LMM textures.add fileName="+fileName);					if (debug) Modchu_Debug.lDebug("lmmTextureManagerInit() PFLM to LMM textures e-------------------------");				}			} else {				if (debug) Modchu_Debug.lDebug("lmmTextureManagerInit() PFLM list.isEmpty()");			}		}		// PFLM側にLMMモデル登録		if (debug) Modchu_Debug.lDebug("lmmTextureManagerInit() LMM to PFLM models="+models);		for (Entry<String, Object[]> en : ((Map<String, Object[]>) models).entrySet()) {			if (debug) Modchu_Debug.lDebug("lmmTextureManagerInit() LMM to PFLM  modelMap s-------------------------");			String key = en.getKey();			if (Modchu_TextureManagerBase.instance.modelMap.containsKey(key)) {				if (debug) Modchu_Debug.lDebug("lmmTextureManagerInit() LMM to PFLM modelMap.containsKey key="+key);				continue;			}			Object[] o = en.getValue();			if (o[0] instanceof MultiModelBaseBiped) continue;			ArrayList<String> nameList = getLmmTextureManagerModelNameToTextureName(key);			if (nameList != null					&& !nameList.isEmpty()) {				//for (String s : nameList) {				String s = nameList.get(0);				if (debug) Modchu_Debug.lDebug("lmmTextureManagerInit() LMM to PFLM s^^^^^^^^^^^^^^^^^^^^");				if (s != null						&& !s.isEmpty()) ;else {					Modchu_Debug.systemLogDebug("lmmTextureManagerInit() LMM to PFLM s == null !!", 2, null);					continue;				}				if (debug) Modchu_Debug.lDebug("lmmTextureManagerInit() LMM to PFLM s="+s);				Object[] o2 = newModelCustom(o, s);				if (debug) Modchu_Debug.lDebug("lmmTextureManagerInit() LMM to PFLM o2="+o2);				MultiModelBaseBiped[] mlm = new MultiModelBaseBiped[3];				if (debug) Modchu_Debug.lDebug("lmmTextureManagerInit() LMM to PFLM mlm="+mlm);				if (o2 != null						&& o2[0] != null) {					for (int i = 0; i < o2.length; i++) {						if (o2[i] instanceof MultiModelBaseBiped) {							mlm[i] = (MultiModelBaseBiped) o2[i];							if (debug) Modchu_Debug.lDebug("lmmTextureManagerInit() LMM to PFLM MultiModelBaseBiped ok o2["+i+"]="+o2[i]);						} else {							if (debug) Modchu_Debug.lDebug("lmmTextureManagerInit() LMM to PFLM !MultiModelBaseBiped o2["+i+"]="+o2[i]);						}					}					Modchu_TextureManagerBase.instance.modelMap.put(key, mlm);					if (!modelNewInstanceNgList.contains(key)) modelNewInstanceNgList.add(key);					if (debug) Modchu_Debug.lDebug("lmmTextureManagerInit() LMM to PFLM modelMap.put key="+key);					initFlag = true;				} else {					if (debug) Modchu_Debug.lDebug("lmmTextureManagerInit() LMM to PFLM textures.add o2 == null !! key="+("_"+key));				}				if (debug) Modchu_Debug.lDebug("lmmTextureManagerInit() LMM to PFLM e^^^^^^^^^^^^^^^^^^^^");				//}			}			if (debug) Modchu_Debug.lDebug("lmmTextureManagerInit() LMM to PFLM modelMap e-------------------------");		}		if (initFlag) {			if (debug) Modchu_Debug.lDebug("lmmTextureManagerInit() LMM to PFLM initFlag");			Modchu_TextureManagerBase.instance.setModels();			initTextureManager();		}		if (debug) Modchu_Debug.lDebug("lmmTextureManagerInit() PFLM to LMM model start");		// LMM側にPFLMモデル登録		if (Modchu_Main.getMinecraftVersion() > 169				&& !isLMMX) {			Map modelNames = getLmmTextureManagerModelNames();			Class ModchuLmmModel = getModchuLmmModelClass();			if (ModchuLmmModel != null) {				for (Entry<String, MultiModelBaseBiped[]> en : Modchu_TextureManagerBase.instance.modelMap.entrySet()) {					String key = en.getKey();					MultiModelBaseBiped[] o = en.getValue();					if (o[0].getClass() == MultiModel.class) continue;					Object[] mlm = Modchu_Reflect.newInstanceArray(ModchuLmmModel, 3);					mlm[0] = Modchu_Reflect.newInstance(ModchuLmmModel, new Class[]{ Class.class, float.class }, new Object[]{ o[0].getClass(), 0.0F });					if (mlm[0] != null); else {						Modchu_Debug.lDebug("lmmTextureManagerInit() PFLM to LMM put newInstance model == null !! getClass()="+o[0].getClass());						continue;					}					float[] lsize = Modchu_CastHelper.FloatArray(Modchu_Reflect.invokeMethod(mlm[0].getClass(), "getArmorModelsSize", mlm[0]));					mlm[1] = Modchu_Reflect.newInstance(ModchuLmmModel, new Class[]{ Class.class, float.class }, new Object[]{ o[1].getClass(), lsize[0] });					mlm[2] = Modchu_Reflect.newInstance(ModchuLmmModel, new Class[]{ Class.class, float.class }, new Object[]{ o[2].getClass(), lsize[1] });					String name = Modchu_Reflect.getFieldObject(mlm[0].getClass(), "master", mlm[0]).getClass().getName();					models.put(name, mlm);					if (modelNames != null) modelNames.put(key, name);				}				setLmmTextureManagerModels(models);				setLmmTextureManagerModelNames(models);			}		} else {			//Modchu_Debug.mDebug("lmmTextureManagerInit()");			Class ModchuLmmModel = getModchuLmmModelClass();			if (ModchuLmmModel != null) {				for (Entry<String, MultiModelBaseBiped[]> en : Modchu_TextureManagerBase.instance.modelMap.entrySet()) {					String key = en.getKey();					MultiModelBaseBiped[] o = en.getValue();					if (o[0].getClass() == MultiModel.class) continue;					Object[] mlm = Modchu_Reflect.newInstanceArray(isLMMX ? "mmmlibx.lib.multiModel.model.mc162.ModelMultiBase" : "MMM_ModelMultiBase", 3);					mlm[0] = Modchu_Reflect.newInstance(ModchuLmmModel, new Class[]{ Class.class, float.class }, new Object[]{ o[0].getClass(), 0.0F });					if (mlm[0] != null); else {						Modchu_Debug.lDebug("lmmTextureManagerInit() PFLM to LMM put newInstance model == null !! getClass()="+o[0].getClass());						continue;					}					float[] lsize = Modchu_CastHelper.FloatArray(Modchu_Reflect.invokeMethod(mlm[0].getClass(), "getArmorModelsSize", mlm[0]));					mlm[1] = Modchu_Reflect.newInstance(ModchuLmmModel, new Class[]{ Class.class, float.class }, new Object[]{ o[1].getClass(), lsize[0] });					mlm[2] = Modchu_Reflect.newInstance(ModchuLmmModel, new Class[]{ Class.class, float.class }, new Object[]{ o[2].getClass(), lsize[1] });					String name = Modchu_Main.lastIndexProcessing(Modchu_Reflect.getFieldObject(mlm[0].getClass(), "master", mlm[0]).getClass().getName(), "_");					models.put(name, mlm);					if (debug) Modchu_Debug.lDebug("lmmTextureManagerInit() PFLM to LMM put name="+name+" mlm="+mlm);				}				setLmmTextureManagerModels(models);			} else {				if (debug) Modchu_Debug.lDebug("lmmTextureManagerInit() PFLM to LMM put ModchuLmmModel == null !!");			}		}		lmmTextureManagerSetModels();		Modchu_Debug.lDebug("lmmTextureManagerInit() end.");	}	public static ArrayList<String> getLmmTextureManagerModelNameToTextureName(String key) {		ArrayList<String> list = new ArrayList();		if (Modchu_Main.getMinecraftVersion() > 169) {			Map textures = Modchu_CastHelper.Map(getLmmTextureManagerTextures());			if (textures != null					&& !textures.isEmpty()) ;else {				//if (debug) Modchu_Debug.lDebug("lmmTextureManagerInit() textures null !!");				return list;			}			for (Entry<String, Object> en : ((Map<String, Object>) textures).entrySet()) {				String fileName = en.getKey();				if (fileName != null						&& !fileName.isEmpty()) ;else {					continue;				}				fileName = fileName.replaceAll("/", ".");				if (fileName.startsWith("textures.entity.")) fileName = fileName.substring(16);				String modelName = Modchu_Main.lastIndexProcessing(fileName, "_");				if (modelName.equals(key)) {					if (fileName != null							&& !list.contains(fileName)) list.add(fileName);				}			}		} else {			List textures = Modchu_CastHelper.List(getLmmTextureManagerTextures());			if (textures != null					&& !textures.isEmpty()) ;else {				return null;			}			for (Object ltb : textures) {				String modelName = Modchu_CastHelper.String(Modchu_Reflect.getFieldObject(ltb.getClass(), "modelName", ltb));				if (modelName != null						&& modelName.equals(key)) {					String fileName = Modchu_CastHelper.String(Modchu_Reflect.getFieldObject(ltb.getClass(), "fileName", ltb));					if (fileName != null							&& !list.contains(fileName)) list.add(fileName);				}			}		}		return list;	}	public static void addLmmTextureManagerModel(String modelName, Class<? extends MultiModelBaseBiped> c, Object[] mlm) {		if (!addLMMModelFlag()) return;		if (modelName != null				&& !modelName.isEmpty()) ;else return;		Object instance = getLmmTextureManagerInstance();		if (instance != null) ;else return;		Map models = getLmmTextureManagerModels();		if (models != null) ;else return;		Class ModchuLmmModel = getModchuLmmModelClass();		if (ModchuLmmModel != null) ;else return;		if (mlm != null) {			if (!ModchuLmmModel.isInstance(mlm[0])) {				Object[] model1 = Modchu_Reflect.newInstanceArray(ModchuLmmModel, 3);				model1[0] = Modchu_Reflect.newInstance(ModchuLmmModel, new Class[]{ MultiModelBaseBiped.class, float.class }, new Object[]{ mlm[0], 0.0F });				float[] lsize = Modchu_CastHelper.FloatArray(Modchu_Reflect.invokeMethod(mlm[0].getClass(), "getArmorModelsSize", mlm[0]));				model1[1] = Modchu_Reflect.newInstance(ModchuLmmModel, new Class[]{ MultiModelBaseBiped.class, float.class }, new Object[]{ mlm[1], lsize[0] });				model1[2] = Modchu_Reflect.newInstance(ModchuLmmModel, new Class[]{ MultiModelBaseBiped.class, float.class }, new Object[]{ mlm[2], lsize[1] });				mlm = model1;			}		} else {			mlm = Modchu_Reflect.newInstanceArray(ModchuLmmModel, 3);			mlm[0] = Modchu_Reflect.newInstance(ModchuLmmModel, new Class[]{ Class.class, float.class }, new Object[]{ c, 0.0F });			float[] lsize = Modchu_CastHelper.FloatArray(Modchu_Reflect.invokeMethod(mlm[0].getClass(), "getArmorModelsSize", mlm[0]));			mlm[1] = Modchu_Reflect.newInstance(ModchuLmmModel, new Class[]{ Class.class, float.class }, new Object[]{ c, lsize[0] });			mlm[2] = Modchu_Reflect.newInstance(ModchuLmmModel, new Class[]{ Class.class, float.class }, new Object[]{ c, lsize[1] });		}		String name = Modchu_Reflect.getFieldObject(mlm[0].getClass(), "master", mlm[0]).getClass().getName();		if (Modchu_Main.getMinecraftVersion() < 170) modelName = Modchu_Main.lastIndexProcessing(modelName, "_");		models.put(modelName, mlm);		setLmmTextureManagerModels(models);		Modchu_Debug.lDebug("addLmmTextureManagerModel() models="+models);		if (Modchu_Main.getMinecraftVersion() > 169				&& !isLMMX) {			Map modelNames = getLmmTextureManagerModelNames();			if (modelNames != null) ;else return;			modelNames.put(modelName, name);			setLmmTextureManagerModelNames(models);		}	}	private static boolean addLMMModelFlag() {		return isLMM 				&& ModchuModel_ConfigData.modelForLittleMaidMob;				//&& Modchu_CastHelper.Int(Modchu_Reflect.getFieldObject("net.minecraftforge.common.ForgeVersion", "buildVersion")) < 954;	}	public static void lmmTextureManagerSetModels() {		if (!addLMMModelFlag()) return;		Object instance = getLmmTextureManagerInstance();		if (instance != null) ;else return;		if (Modchu_Main.getMinecraftVersion() > 169				&& !isLMMX) {			Map textures = Modchu_CastHelper.Map(getLmmTextureManagerTextures());			if (textures != null					&& !textures.isEmpty()) ;else {				Modchu_Debug.Debug("lmmTextureManagerSetModels() textures null !!");				return;			}			for (Entry<String, Object> le : ((Map<String, Object>) textures).entrySet()) {				Object lcont = le.getValue();				Modchu_Reflect.setFieldObject(lcont.getClass(), "defaultModel", lcont, null);				le.setValue(lcont);			}			Modchu_Reflect.invokeMethod(instance.getClass(), "setModels", instance);		} else {			Map models = getLmmTextureManagerModels();			if (models != null					&& !models.isEmpty()) ;else return;			String defaultModelName = Modchu_CastHelper.String(Modchu_Reflect.getFieldObject(isLMMX ? "mmmlibx.lib.MMM_TextureManager" : "MMM_TextureManager", "defaultModelName"));			//Modchu_Debug.mDebug("lmmTextureManagerInit() defaultModelName="+defaultModelName);			Object[] ldm = (Object[]) models.get(defaultModelName);			//Modchu_Debug.mDebug("lmmTextureManagerInit() ldm="+ldm);			if (ldm == null && !models.isEmpty()) {				ldm = (Object[])models.values().toArray()[0];				//Modchu_Debug.mDebug("lmmTextureManagerInit() ldm == null ldm="+ldm);			}			List textures = Modchu_CastHelper.List(getLmmTextureManagerTextures());			Modchu_Debug.mDebug("lmmTextureManagerInit() textures="+textures);			if (textures != null) ;else {				//Modchu_Debug.Debug("lmmTextureManagerInit() MMM_TextureManager textures null !!");				return;			}			List texturesFileName = new ArrayList();			for (Object ltb1 : textures) {				String fileName = getTextureBoxFileName(ltb1);				if (fileName != null						&& !fileName.isEmpty()) texturesFileName.add(fileName);			}			for (Modchu_TextureBoxBase mtb : Modchu_TextureManagerBase.instance.textures) {				Object ltb = newModchu_LmmTextureBox(mtb);				if (!texturesFileName.contains(mtb.fileName)) {					textures.add(ltb);					//Modchu_Debug.mDebug("lmmTextureManagerInit() textures.add ltb="+ltb);				}			}			Class ModelMultiBase = Modchu_Reflect.loadClassArray(isLMMX ? "mmmlibx.lib.multiModel.model.mc162.ModelMultiBase" : "MMM_ModelMultiBase");			Class MMM_TextureBox = Modchu_Reflect.loadClass(isLMMX ? "mmmlibx.lib.MMM_TextureBox" : "MMM_TextureBox");			//Modchu_Debug.mDebug("lmmTextureManagerInit() ModelMultiBase="+ModelMultiBase);			for (Object ltb : textures) {				String modelName = Modchu_CastHelper.String(Modchu_Reflect.getFieldObject(ltb.getClass(), "modelName", ltb));				//Modchu_Debug.mDebug("lmmTextureManagerInit() modelName="+modelName);				if (MMM_TextureBox.isInstance(ltb)) ;else {					Modchu_Debug.systemLogDebug("lmmTextureManagerInit() setModels !MMM_TextureBox ltb="+ltb);				}				if (modelName.isEmpty()) {					Modchu_Reflect.invokeMethod(MMM_TextureBox, "setModels", new Class[]{ String.class, ModelMultiBase, ModelMultiBase }, ltb, new Object[]{ defaultModelName, null, ldm });				} else {					//if (models.containsKey(modelName)) {						Object[] model1 = Modchu_CastHelper.ObjectArray(models.get(modelName));						if (ModelMultiBase.isInstance(model1)								&& ModelMultiBase.isInstance(ldm)) {							Modchu_Reflect.invokeMethod(MMM_TextureBox, "setModels", new Class[]{ String.class, ModelMultiBase, ModelMultiBase }, ltb, new Object[]{ modelName, model1, ldm });						} else {							if (!ModelMultiBase.isInstance(model1)) Modchu_Debug.mDebug("lmmTextureManagerInit() setModels !ModelMultiBase.isInstance model1="+model1);							if (!ModelMultiBase.isInstance(ldm)) Modchu_Debug.mDebug("lmmTextureManagerInit() setModels !ModelMultiBase.isInstance ldm="+ldm);						}						//Modchu_Debug.mDebug("lmmTextureManagerInit() setModels modelMap.get(modelName)="+modelMap.get(modelName));					//} else {						//Modchu_Debug.mDebug("lmmTextureManagerInit() setModels !modelMap.containsKey");					//}				}			}			for (Entry<String, Object[]> le : ((Map<String, Object[]>) models).entrySet()) {				String ls = Modchu_CastHelper.String(Modchu_Reflect.invokeMethod(le.getValue()[0].getClass(), "getUsingTexture", le.getValue()[0]));				//Modchu_Debug.mDebug("lmmTextureManagerInit() ls="+ls);				if (ls != null) {					if (Modchu_Reflect.invokeMethod(instance.getClass(), "getTextureBox", new Class[]{ String.class }, instance, ls + "_" + le.getKey()) == null) {						Object lbox = null;						for (Object ltb : textures) {							String packegeName = Modchu_CastHelper.String(Modchu_Reflect.getFieldObject(ltb.getClass(), "packegeName", ltb));							//Modchu_Debug.mDebug("lmmTextureManagerInit() packegeName="+packegeName);							if (packegeName.equals(ls)) {								lbox = ltb;								//Modchu_Debug.mDebug("lmmTextureManagerInit() lbox="+lbox);								break;							}						}						if (lbox != null) {							lbox = Modchu_Reflect.invokeMethod(lbox.getClass(), "duplicate", lbox);							Modchu_Reflect.invokeMethod(MMM_TextureBox, "setModels", new Class[]{ String.class, ModelMultiBase, ModelMultiBase }, lbox, new Object[]{ le.getKey(), null, le.getValue() });							textures.add(lbox);							//Modchu_Debug.mDebug("lmmTextureManagerInit() textures add lbox="+lbox);						}					}				}			}			for (int li = textures.size() - 1; li >= 0; li--) {				Object o = textures.get(li);				if (Modchu_Reflect.getFieldObject(o.getClass(), "models", o) == null) {					textures.remove(li);					//Modchu_Debug.mDebug("lmmTextureManagerInit() textures remove o="+o);				}			}			setLmmTextureManagerTextures(textures);			Modchu_Reflect.invokeMethod(instance.getClass(), "initTextureList", new Class[]{ boolean.class }, instance, new Object[]{ true });		}	}	public static Object getLmmTextureManagerTextures() {		Object instance = getLmmTextureManagerInstance();		return Modchu_Reflect.getFieldObject(instance.getClass(), "textures", instance);	}	public static void setLmmTextureManagerTextures(Object o) {		Object instance = getLmmTextureManagerInstance();		Modchu_Reflect.setFieldObject(instance.getClass(), "textures", instance, o);	}	public static Map getLmmTextureManagerModels() {		Object instance = getLmmTextureManagerInstance();		return Modchu_CastHelper.Map(Modchu_Main.getMinecraftVersion() > 169				&& !isLMMX ? Modchu_Reflect.getFieldObject(instance.getClass(), "models", instance) : Modchu_Reflect.getFieldObject(instance.getClass(), "modelMap", instance));	}	public static void setLmmTextureManagerModels(Map map) {		Object instance = getLmmTextureManagerInstance();		Modchu_Reflect.setFieldObject(instance.getClass(), Modchu_Main.getMinecraftVersion() > 169 				&& !isLMMX ? "models" : "modelMap", instance, map);	}	public static Map getLmmTextureManagerModelNames() {		if (Modchu_Main.getMinecraftVersion() < 170				| isLMMX) return null;		Object instance = getLmmTextureManagerInstance();		return Modchu_CastHelper.Map(Modchu_Reflect.getFieldObject(instance.getClass(), "modelNames", instance));	}	public static void setLmmTextureManagerModelNames(Map map) {		if (Modchu_Main.getMinecraftVersion() < 170				| isLMMX) return;		Object instance = getLmmTextureManagerInstance();		Modchu_Reflect.setFieldObject(instance.getClass(), "modelNames", instance, map);	}	public static Object getLmmTextureManagerInstance() {		String s = Modchu_Main.getMinecraftVersion() > 169 ? isLMMX ? "mmmlibx.lib.MMM_TextureManager" : "mmm.lib.multiModel.MultiModelManager" : "MMM_TextureManager";		return Modchu_Reflect.getFieldObject(s, "instance");	}	private static Object newModchu_LmmTextureBox(Modchu_TextureBoxBase mtb) {		String Modchu_LmmTextureBoxString = isLMMX ? "modchu.lib.lmm.characteristic.Modchu_LmmXTextureBox" : "modchu.lib.lmm.characteristic.Modchu_LmmTextureBox";		return Modchu_Reflect.newInstance(Modchu_LmmTextureBoxString, new Class[]{ Modchu_TextureBoxBase.class }, new Object[]{ mtb });	}	public static Class getModchuLmmModelClass() {		return Modchu_Reflect.loadClass(isLMMX ? "modchu.lib.lmm.characteristic.ModchuLmmXModel" : "modchu.lib.lmm.characteristic.ModchuLmmModel");	}	public static void addPflmTextureManagerModel(String modelName, Class<? extends MultiModelBaseBiped> c, MultiModelBaseBiped[] mlm) {		Modchu_Debug.mlDebug("addPflmTextureManagerModel modelName="+modelName);		if (modelName != null				&& !modelName.isEmpty()) ;else return;		if (mlm != null) ;else {			mlm = new MultiModelBaseBiped[3];			mlm[0] = (MultiModelBaseBiped) Modchu_Reflect.newInstance(c, new Class[]{ float.class }, new Object[]{ 0.0F });			float[] lsize = Modchu_CastHelper.FloatArray(Modchu_Reflect.invokeMethod(mlm[0].getClass(), "getArmorModelsSize", mlm[0]));			mlm[1] = (MultiModelBaseBiped) Modchu_Reflect.newInstance(c, new Class[]{ float.class }, new Object[]{ lsize[0] });			mlm[2] = (MultiModelBaseBiped) Modchu_Reflect.newInstance(c, new Class[]{ float.class }, new Object[]{ lsize[1] });		}		Modchu_TextureManagerBase.instance.modelMap.put(modelName, mlm);		MultiModelBaseBiped[] ldm = Modchu_TextureManagerBase.instance.modelMap.get(Modchu_TextureManagerBase.instance.defaultModelName);		if (ldm == null && !Modchu_TextureManagerBase.instance.modelMap.isEmpty()) {			ldm = (MultiModelBaseBiped[])Modchu_TextureManagerBase.instance.modelMap.values().toArray()[0];		}		String ls = mlm[0].getUsingTexture();		//Modchu_Debug.mDebug("addPflmTextureManagerModel ls="+ls);		if (ls != null) {			Modchu_Debug.mlDebug("addPflmTextureManagerModel getTextureBox="+Modchu_TextureManagerBase.instance.getTextureBox(ls.indexOf("_") > -1 ? ls : ls + "_" + modelName));			Modchu_TextureBoxBase lbox = Modchu_TextureManagerBase.instance.getTextureBox(ls.indexOf("_") > -1 ? ls : ls + "_" + modelName);			if (lbox != null) {				Modchu_Debug.mlDebug("addPflmTextureManagerModel lbox != null");				//lbox = (Modchu_TextureBoxBase) lbox.duplicate();				lbox = lbox.duplicate();				lbox.setModels(modelName, mlm, ldm);				Modchu_TextureManagerBase.instance.textures.add(lbox);				Modchu_Debug.mlDebug("addPflmTextureManagerModel textures add mlm="+mlm);			} else {				Modchu_Debug.mlDebug("addPflmTextureManagerModel lbox == null");			}		} else {			Modchu_Debug.mlDebug("addPflmTextureManagerModel getUsingTexture ls == null");		}		//Modchu_Debug.mDebug("addPflmTextureManagerModel end.");	}	public static void loadcfg() {		// cfg読み込み		if (Modchu_Main.cfgdir.exists()) {			if (!mainCfgfile.exists()) {				// cfgファイルが無い = 新規作成				String s[] = {						"AlphaBlend=true", "skirtFloats=true", "skirtFloatsVolume=1.0D", "transparency=1.0F", "modchuRemodelingModel=true",						"useInvisibilityBody=true", "useInvisibilityArmor=false", "useInvisibilityItem=false", "versionCheck=true",  "debugCustomModelMessage=false",						"modelForLittleMaidMob=true"				};				Modchu_Config.writerConfig(mainCfgfile, s);			} else {				// cfgファイルがある				ModchuModel_ConfigData.AlphaBlend = Modchu_CastHelper.Boolean(Modchu_Config.loadConfig(mainCfgfile, "AlphaBlend", ModchuModel_ConfigData.AlphaBlend));				ModchuModel_ConfigData.skirtFloats = Modchu_CastHelper.Boolean(Modchu_Config.loadConfig(mainCfgfile, "skirtFloats", ModchuModel_ConfigData.skirtFloats));				ModchuModel_ConfigData.skirtFloatsVolume = Modchu_CastHelper.Double(Modchu_Config.loadConfig(mainCfgfile, "skirtFloatsVolume", ModchuModel_ConfigData.skirtFloatsVolume));				ModchuModel_ConfigData.transparency = Modchu_CastHelper.Float(Modchu_Config.loadConfig(mainCfgfile, "transparency", ModchuModel_ConfigData.transparency));				ModchuModel_ConfigData.modchuRemodelingModel = Modchu_CastHelper.Boolean(Modchu_Config.loadConfig(mainCfgfile, "modchuRemodelingModel", ModchuModel_ConfigData.modchuRemodelingModel));				ModchuModel_ConfigData.useInvisibilityBody = Modchu_CastHelper.Boolean(Modchu_Config.loadConfig(mainCfgfile, "useInvisibilityBody", ModchuModel_ConfigData.useInvisibilityBody));				ModchuModel_ConfigData.useInvisibilityArmor = Modchu_CastHelper.Boolean(Modchu_Config.loadConfig(mainCfgfile, "useInvisibilityArmor", ModchuModel_ConfigData.useInvisibilityArmor));				ModchuModel_ConfigData.useInvisibilityItem = Modchu_CastHelper.Boolean(Modchu_Config.loadConfig(mainCfgfile, "useInvisibilityItem", ModchuModel_ConfigData.useInvisibilityItem));				ModchuModel_ConfigData.versionCheck = Modchu_CastHelper.Boolean(Modchu_Config.loadConfig(mainCfgfile, "versionCheck", ModchuModel_ConfigData.versionCheck));				ModchuModel_ConfigData.modelForLittleMaidMob = Modchu_CastHelper.Boolean(Modchu_Config.loadConfig(mainCfgfile, "modelForLittleMaidMob", ModchuModel_ConfigData.modelForLittleMaidMob));				Modchu_Debug.debugCustomModelMessage = Modchu_CastHelper.Boolean(Modchu_Config.loadConfig(mainCfgfile, "debugCustomModelMessage", Modchu_Debug.debugCustomModelMessage));				String k[] = {						"AlphaBlend", "skirtFloats", "skirtFloatsVolume", "transparency", "modchuRemodelingModel",						"useInvisibilityBody", "useInvisibilityArmor", "useInvisibilityItem", "versionCheck", "debugCustomModelMessage",						"modelForLittleMaidMob"				};				String k1[] = {						""+ModchuModel_ConfigData.AlphaBlend, ""+ModchuModel_ConfigData.skirtFloats, ""+ModchuModel_ConfigData.skirtFloatsVolume, ""+ModchuModel_ConfigData.transparency, ""+ModchuModel_ConfigData.modchuRemodelingModel,						""+ModchuModel_ConfigData.useInvisibilityBody, ""+ModchuModel_ConfigData.useInvisibilityArmor, ""+ModchuModel_ConfigData.useInvisibilityItem, ""+ModchuModel_ConfigData.versionCheck, ""+Modchu_Debug.debugCustomModelMessage,						""+ModchuModel_ConfigData.modelForLittleMaidMob				};				Modchu_Config.writerSupplementConfig(mainCfgfile, k, k1);			}			if (cfgfile.exists()) Modchu_Config.loadConfig(showModelList, cfgfile);		}		cfgMaxMinCheck();	}	public static void cfgMaxMinCheck() {		if (ModchuModel_ConfigData.skirtFloatsVolume < 0.0D) ModchuModel_ConfigData.skirtFloatsVolume = 0.0D;		if (ModchuModel_ConfigData.skirtFloatsVolume > 2.0D) ModchuModel_ConfigData.skirtFloatsVolume = 2.0D;		if (ModchuModel_ConfigData.transparency < 0.0F) ModchuModel_ConfigData.transparency = 0.0F;		if (ModchuModel_ConfigData.transparency > 1.0F) ModchuModel_ConfigData.transparency = 1.0F;	}	private static void startVersionCheckThread() {		ModchuModel_ThreadVersionCheck var0 = new ModchuModel_ThreadVersionCheck();		var0.start();	}/*	public static boolean onTickInGame(float f, Object minecraft, byte by, Object... tickData) {		return false;	}*/	public static String getPackege(int i, int j) {		return getTextureBoxTextureName(getTextureManagerTextures(j));	}	public static String getModelSpecificationArmorPackege(String s) {		s = Modchu_Main.lastIndexProcessing(s, "_");		String s1 = null;		Object ltb;		for (int color = 0 ; color < 16 ; color++) {			for (int i = 0 ; i < getTextureManagerTexturesSize() ; ++i) {				ltb = getTextureManagerTextures(i);				if (getTextureBoxHasArmor(ltb)) {					if (Modchu_Main.lastIndexProcessing(getTextureBoxTextureName(ltb), "_").equalsIgnoreCase(s)) {						//Modchu_Debug.mDebug("ltb.packegeName="+getTextureBoxFileName(ltb));						return getTextureBoxFileName(ltb);					}				}			}		}		return null;	}	public static Object getTextureBox(String s) {		s = textureNameCheck(s);		return Modchu_TextureManagerBase.instance.getTextureBox(s);	}	public static Object[] getTextureModels(Object entity, String s, Object[] option) {		return getTextureModels(entity, s, false, false, option);	}	public static Object[] getTextureModels(Object entity, String s, boolean b, boolean b1, Object[] option) {		if (b1) {			Object ltb = getTextureBox(s);			return Modchu_CastHelper.ObjectArray(Modchu_Reflect.getFieldObject(ltb.getClass(), "models", ltb));		} else {			return modelNewInstance(entity, s, b, true, option);		}	}	public static Object getTextureBox(int i) {		return getTextureManagerTextures(i);	}	public static Object[] getTextureModels(Object entity, int i, Object[] option) {		return getTextureModels(entity, i, false, false, option);	}	public static Object[] getTextureModels(Object entity, int i, boolean b, boolean b1, Object[] option) {		Object ltb = getTextureManagerTextures(i);		return b1 ? Modchu_CastHelper.ObjectArray(Modchu_Reflect.getFieldObject(ltb.getClass(), "models", ltb)) : modelNewInstance(entity, getTextureBoxTextureName(ltb), b, true, option);	}	public static Object[] modelNewInstance(Object entity, String s, boolean b, boolean useCustom, Object[] option) {		return modelNewInstance(entity, s, b, useCustom, option, true);	}	public static Object[] modelNewInstance(Object entity, String s, boolean b, boolean useCustom, Object[] option, boolean debug) {		Map<String, Object[]> map = null;		Object[] models = null;		s = textureNameCheck(s);		String s1 = Modchu_Main.lastIndexProcessing(s, "_");		if (entity != null) map = entityModelMapData.get(entity);		else map = dummyModelMapData;		if (!b) {			if (map != null) {				models = map.get(s);				if (models != null						&& models[0] != null						&& models[1] != null						&& models[2] != null) {					if (debug) Modchu_Debug.lDebug("modelNewInstance 1 return models. s="+s);					return models;				} else {					if (debug) Modchu_Debug.lDebug("modelNewInstance 1 models == null s="+s);				}			}		}		if (map != null) ;else {			map = new HashMap<String, Object[]>();			//Modchu_Debug.mDebug("modelNewInstance map = new HashMap");		}		if (debug) Modchu_Debug.lDebug1("modelNewInstance 2 s1="+s1+" modelNewInstanceNgList.contains(s1)="+modelNewInstanceNgList.contains(s1));		models = modelNewInstanceNgList.contains(s1) ? getTextureModels(entity, s, false, true, option) : modelNewInstance(s, useCustom, option);		if (models != null				&& models[0] != null				&& models[1] != null				&& models[2] != null) {			map.put(s, models);			if (entity != null) entityModelMapData.put(entity, map);			if (debug) Modchu_Debug.lDebug("modelNewInstance 3 return models="+models);			return models;		}		if (debug) Modchu_Debug.lDebug("modelNewInstance 4 return models="+models);		return models;	}	public static Object[] modelNewInstance(String s, boolean useCustom, Object[] option) {		Object[] models = new Object[3];		String s1 = s != null ? Modchu_Main.lastIndexProcessing(s, "_") : s;		String defaultModelName = Modchu_TextureManagerBase.defaultModelName;		boolean defaultFlag = s1 != null				&& (defaultModelName != null				&& s1.indexOf(defaultModelName) > -1);		String s2 = defaultFlag ? modelClassName : new StringBuilder().append(modelClassName).append("_").append(s1).toString();		String s3 = getModelClassName(s2);		//Modchu_Debug.lDebug("modelNewInstance s3="+s3);		Class c = Modchu_Reflect.loadClass(s3, -1);		//Modchu_Debug.lDebug("modelNewInstance c="+c);		if (c != null) {			//Modchu_Debug.lDebug("modelNewInstance s="+s+" c="+c);			Object o = modelNewInstance(c, new Class[]{ float.class, float.class, int.class, int.class, Object[].class }, new Object[]{ 0.0F, 0.0F, -1, -1, option });			if (o != null); else {				o = modelNewInstance(c, new Class[]{ float.class }, new Object[]{ 0.0F });			}			MultiModelBaseBiped multiModelBaseBiped = o != null					&& o instanceof MultiModelBaseBiped ? (MultiModelBaseBiped) o : null;			if (multiModelBaseBiped != null) {				models[0] = multiModelBaseBiped;/*//125delete				if (isSmartMoving						&& mod_pflm_playerformlittlemaid.playerFormLittleMaidVersion <= 124) {					boolean isBiped = modc_PFLM_PlayerFormLittleMaid.BipedClass != null ?							modc_PFLM_PlayerFormLittleMaid.BipedClass.isInstance(models[0]) : s.equalsIgnoreCase("Biped");					float[] f1 = new float[2];					f1[0] = isBiped ? 0.5F : 0.1F;					f1[1] = isBiped ? 1.0F : 0.5F;					//Modchu_Debug.mDebug("4modelNewInstance o != null isBiped="+isBiped);					models[1] = Modchu_Reflect.newInstance(c, new Class[]{ float.class, int.class, int.class }, new Object[]{ f1[0], MultiModelSmart.NoScaleStart, MultiModelSmart.Scale });					models[2] = Modchu_Reflect.newInstance(c, new Class[]{ float.class, int.class, int.class }, new Object[]{ f1[1], MultiModelSmart.NoScaleStart, MultiModelSmart.NoScaleEnd });					//Modchu_Debug.mDebug("5modelNewInstance o != null models[1] != null ? "+(models[1] != null));				} else {*///125delete					float[] f1 = getArmorModelsSize(models[0]);					//Modchu_Debug.mDebug("modelNewInstance getArmorModelsSize f1[0]="+f1[0]+" f1[1]="+f1[1]);					o = modelNewInstance(c, new Class[]{ float.class, float.class, int.class, int.class, Object[].class }, new Object[]{ f1[0], 0.0F, -1, -1, option });					if (o != null); else {						o = modelNewInstance(c, new Class[]{ float.class }, new Object[]{ f1[0] });					}					models[1] = o != null							&& o instanceof MultiModelBaseBiped ? (MultiModelBaseBiped) o : null;					o = modelNewInstance(c, new Class[]{ float.class, float.class, int.class, int.class, Object[].class }, new Object[]{ f1[1], 0.0F, -1, -1, option });					if (o != null); else {						o = modelNewInstance(c, new Class[]{ float.class }, new Object[]{ f1[1] });					}					models[2] = o != null							&& o instanceof MultiModelBaseBiped ? (MultiModelBaseBiped) o : null;/*//125delete				}*///125delete			} else {				Modchu_Debug.lDebug("modelNewInstance multiModelBaseBiped == null !! s="+s);			}		} else {			Object ltb = getTextureBox(s);			if (ltb != null) models = getTextureBoxModels(ltb);			Modchu_Debug.lDebug("modelNewInstance c == null ltb="+ltb+" s="+s+" models="+models);			if (useCustom					&& !defaultFlag) models = newModelCustom(models, s);		}		return models;	}	private static Object modelNewInstance(Class c, Class[] c1, Object[] o) {		Object o1 = null;		try {			Constructor co = Modchu_Reflect.getConstructor(c, c1, -1);			if (co != null) o1 = Modchu_Reflect.newInstance(c, c1, o);		} catch(Exception e) {			Modchu_Debug.systemLogDebug("modelNewInstance newInstance Exception !!");			Modchu_Debug.systemLogDebug("", e);		}		return o1;	}	public static Object[] newModelCustom(Object[] models, String s) {		return newModelCustom(models, s, null);	}	public static Object[] newModelCustom(Object[] models, String s, HashMap map) {		Class c = MultiModelCustom.class;		float[] f1;		if (models != null) ;else {			models = new MultiModel[3];			models[0] = new MultiModel(0.0F);			f1 = ((MultiModel) models[0]).getArmorModelsSize();			models[1] = new MultiModel(f1[0]);			models[2] = new MultiModel(f1[1]);		}		if (s.indexOf("_") < 0				| c.isInstance(models[0])) {			if (s.indexOf("_") < 0) Modchu_Debug.mlDebug1("newModelCustom s.indexOf(\"_\") < 0 return s="+s);			if (c.isInstance(models[0])) Modchu_Debug.mlDebug1("newModelCustom c.isInstance(models[0]) return s="+s);			return models;		}		//Modchu_Debug.mlDebug1("newModelCustom s="+s+" models[0].getClass()="+(models[0] != null ? models[0].getClass() : null));		if (c != null				&& models != null) {			if (models[0] != null) ;else Modchu_Debug.mDebug("models[0] == null !!");			if (models[0] != null) {				Object[] newModels = new Object[3];				newModels[0] = (MultiModelBaseBiped) Modchu_Reflect.newInstance(c, new Class[]{ float.class, Object.class, String.class, HashMap.class }, new Object[]{ 0.0F, models[0], s, map});				//Modchu_Debug.lDebug("newModelCustom newModels[0]="+newModels[0]);				if (newModels[0] != null) ;else {					//Modchu_Debug.lDebug("newModelCustom newModels[0] == null !!");					return null;				}				f1 = getArmorModelsSize(models[0]);				if (models[1] != null) ;else Modchu_Debug.mDebug("models[1] == null !!");				if (models[2] != null) ;else Modchu_Debug.mDebug("models[2] == null !!");				if (models[1] != null) {					newModels[1] = (MultiModelCustom) Modchu_Reflect.newInstance(c, new Class[]{ float.class, Object.class, String.class, HashMap.class }, new Object[]{ f1[0], models[1], s, map });				}				if (models[2] != null) {					newModels[2] = (MultiModelCustom) Modchu_Reflect.newInstance(c, new Class[]{ float.class, Object.class, String.class, HashMap.class }, new Object[]{ f1[1], models[2], s, map });				}				//Modchu_Debug.lDebug("newModelCustom return newModels[0]="+newModels[0]);				return newModels;			}		}		Modchu_Debug.lDebug("newModelCustom return null !! s="+s);		return null;	}	public static Object[] newOtherModel(String s, Class[] c, Object[] o, float[] f, boolean isChild) {		Object[] models = new Object[3];		float[] f1 = f != null ? f : new float[]{				0.0F, 0.5F, 1.0F		};		models[0] = getNewInstanceOtherModel(s, c, o, f1[0]);		if (models[0] != null) ;else return null;		Modchu_AS.set(Modchu_AS.modelBaseIsChild, models[0], isChild);		models[1] = getNewInstanceOtherModel(s, c, o, f1[1]);		Modchu_AS.set(Modchu_AS.modelBaseIsChild, models[1], isChild);		models[2] = getNewInstanceOtherModel(s, c, o, f1[2]);		Modchu_AS.set(Modchu_AS.modelBaseIsChild, models[2], isChild);		return models;	}	private static Object getNewInstanceOtherModel(String s, Class[] c, Object[] o, float f) {		if (c != null) {			return Modchu_Reflect.newInstance(s, c, o);		} else {			int mode = Modchu_Reflect.getConstructor(s, new Class[]{ float.class }, -1) != null ? 0 : Modchu_Reflect.getConstructor(s, new Class[]{ float.class, boolean.class }, -1) != null ? 1 : -1;			switch (mode) {			case -1:				return Modchu_Reflect.newInstance(s);			case 0:				return Modchu_Reflect.newInstance(s, new Class[]{ float.class }, new Object[]{ f });			case 1:				return Modchu_Reflect.newInstance(s, new Class[]{ float.class, boolean.class }, new Object[]{ f, false });			}		}		return null;	}	public static Object checkTexturePackege(String s, int i) {		Object ltb = getTextureBox(s);		if (ltb != null) {			Object s1 = textureManagerGetTexture(s, i);			if (s1 != null) {				//Modchu_Debug.mDebug("checkTexturePackege ok s1="+s1);				return ltb;			}		}		return null;	}	public static Object checkTextureArmorPackege(String s) {		Object ltb = getTextureBox(s);		if (ltb != null				&& getTextureBoxHasArmor(ltb)) {			Object s1 = textureManagerGetArmorTexture(s, 64, Modchu_Reflect.newInstance("ItemStack", new Class[]{ Modchu_Reflect.loadClass("Item") }, new Object[]{ Modchu_AS.get(Modchu_AS.getItem, "diamond_helmet") }));			if (s1 != null) {				//Modchu_Debug.mDebug("checkTextureArmorPackege ok s1="+s1);				return ltb;			}		}		return null;	}	public static Object textureManagerGetTexture(String s, int i) {		Object ltb = getTextureBox(s);		//Modchu_Debug.mDebug("textureManagerGetTextureName s="+textureNameCheck(s)+" i="+i);		if (ltb != null) return getTextureBoxTextureName(ltb, i);		Modchu_Debug.Debug1("textureManagerGetTextureName null !! default change. s="+textureNameCheck(s)+" i="+i);		s = textureNameCheck(null);		ltb = getTextureBox(s);		if (ltb != null) return getTextureBoxTextureName(ltb, i);		return null;	}	public static boolean textureColorChack(String s, int i) {		s = textureNameCheck(s);		Object ltb = getTextureBox(s);		if (ltb != null) return getTextureBoxHasColor(ltb, i);		//Modchu_Debug.mDebug("textureColorChack return null !! s="+s+" i="+i);		return false;	}	public static String textureNameCheck(String s) {		String s1 = Modchu_TextureManagerBase.defaultModelName;		if (s == null				| (s !=null				&& s.isEmpty())) {			if (s1 != null) {				s = "default_"+s1;				//Modchu_Debug.lDebug("Modchu_Main textureNameCheck default setting.");			}			else Modchu_Debug.lDebug("Modchu_Main textureNameCheck MMM_TextureManager defaultModelName == null !!");		} else {			if (s.indexOf("_") < 0) {				if (s1 != null) s = s+"_"+s1;			}		}		return s;	}	public static Object textureManagerGetArmorTexture(String s, int i, Object itemstack) {		//Modchu_Debug.mDebug("textureManagerGetArmorTextureName s="+s+" i="+i+" itemstack != null ? "+(itemstack != null));		s = textureNameCheck(s);		Object ltb = getTextureBox(s);		if (ltb != null) {			return ((Modchu_TextureBoxBase) ltb).getArmorTextureName(i, itemstack);		} else {			//Modchu_Debug.mDebug("textureManagerGetArmorTextureName ltb == null !!");		}		//Modchu_Debug.mDebug("textureManagerGetArmorTextureName return null !! s="+s+" i="+i);		return null;	}	public static String textureManagerGetNextPackege(String s, int i) {		return textureManagerGetPackege(s, i, 0);	}	public static String textureManagerGetPrevPackege(String s, int i) {		return textureManagerGetPackege(s, i, 1);	}	public static String textureManagerGetPackege(String s, int i, int i1) {		Object ltb = getTextureBox(s);		if (ltb != null) {			ltb = i1 == 0 ? Modchu_Reflect.invokeMethod(Modchu_TextureManagerBase.instance.getClass(), "getNextPackege", new Class[]{ ltb.getClass(), int.class }, Modchu_TextureManagerBase.instance, new Object[]{ ltb, i }) :				Modchu_Reflect.invokeMethod(Modchu_TextureManagerBase.instance.getClass(), "getPrevPackege", new Class[]{ ltb.getClass(), int.class }, Modchu_TextureManagerBase.instance, new Object[]{ ltb, i });			return getTextureBoxTextureName(ltb);		}		Modchu_Debug.mDebug("textureManagerGetPackege return null !! s="+s+" i="+i);		return null;	}	public static String textureManagerGetNextArmorPackege(String s) {		return textureManagerGetArmorPackege(s, 0);	}	public static String textureManagerGetPrevArmorPackege(String s) {		return textureManagerGetArmorPackege(s, 1);	}	public static String textureManagerGetArmorPackege(String s, int i) {		//Modchu_Debug.mDebug("textureManagerGetArmorPackege s="+s+" i="+i);		String s1 = Modchu_TextureManagerBase.defaultModelName;		int index = -1;		String s2 = s;		int i2 = s != null && !s.isEmpty() ? s.lastIndexOf(s1) : -1;		if (i2 > -1) {			s2 = s.substring(0, i2 - 1);		}		//Modchu_Debug.mDebug("textureManagerGetArmorPackege s2="+s2);		index = textureManagerGetArmorPackegeIndex(s2);		if (index == -1) {			index = textureManagerGetArmorPackegeIndex("default");			if (index == -1) {				Modchu_Debug.mDebug("textureManagerGetArmorPackege return index == -1 !!");				return null;			}		}		boolean flag = false;		List<Object> textures = getTextureManagerTextures();		Object ltb = getTextureBox(s);		for (int i1 = 0; i1 < textures.size(); i1++) {			index = i == 0 ? index + 1 : index - 1;			if (index >= textures.size()) index = 0;			if (index < 0) index = textures.size() - 1;			ltb = textures.get(index);			//ltb = i == 0 ? Modchu_Reflect.invokeMethod(MMM_TextureManager, "getNextArmorPackege", new Class[]{MMM_TextureBox}, textureManagerInstance, new Object[]{ltb}) :			//Modchu_Reflect.invokeMethod(MMM_TextureManager, "getPrevArmorPackege", new Class[]{MMM_TextureBox}, textureManagerInstance, new Object[]{ltb});			//Modchu_Debug.mDebug("textureManagerGetArmorPackege index for index="+index+" s="+(String) Modchu_Reflect.getFieldObject(ltb.getClass(), "fileName", ltb));			if (getTextureBoxHasArmor(ltb)) {				s = (String) Modchu_Reflect.getFieldObject(ltb.getClass(), "fileName", ltb);				if (!s.isEmpty()						&& !s.equals(s2)) {					//Modchu_Debug.mDebug("textureManagerGetArmorPackege flag ok.textures.size()="+textures.size());					//Modchu_Debug.mDebug("textureManagerGetArmorPackege flag ok.s="+s);					flag = true;					break;				}			}		}		if (!flag) Modchu_Debug.mDebug("textureManagerGetArmorPackege !flag !!");		i2 = s.lastIndexOf(s1);		if (i2 > -1) s = s.substring(0, i2);		//Modchu_Debug.mDebug("textureManagerGetArmorPackege return s="+s);		return s;	}	private static int textureManagerGetArmorPackegeIndex(String s) {		int index = -1;		List<Object> textures = getTextureManagerTextures();		Object ltb = getTextureBox(s);		for (int i1 = 0; i1 < textures.size(); i1++) {			ltb = textures.get(i1);			//Modchu_Debug.mDebug("textureManagerGetArmorPackegeIndex get "+((String) Modchu_Reflect.getFieldObject(ltb.getClass(), "fileName", ltb)));			if(((String) Modchu_Reflect.getFieldObject(ltb.getClass(), "fileName", ltb)).equals(s)) {				index = i1;				break;			}		}		return index;	}	public static Object[] getTextureBoxModels(Object ltb) {		return ltb != null ? (Object[])Modchu_Reflect.getFieldObject(ltb.getClass(), "models", ltb) : null;	}	public static boolean getTextureBoxHasArmor(Object ltb) {		return ltb != null ? (Boolean)Modchu_Reflect.invokeMethod(ltb.getClass(), "hasArmor", ltb) : false;	}	public static boolean getTextureBoxHasColor(Object ltb, int i) {		return ltb != null ? (Boolean)Modchu_Reflect.invokeMethod(ltb.getClass(), "hasColor", new Class[]{ int.class }, ltb, new Object[]{ i }) : false;	}	public static String getTextureBoxTextureName(Object ltb) {		return ltb != null ? Modchu_CastHelper.String(Modchu_Reflect.getFieldObject(ltb.getClass(), "textureName", ltb)) : null;	}	public static Object getTextureBoxTextureName(Object ltb, int i) {		return ltb != null ? Modchu_Reflect.invokeMethod(ltb.getClass(), "getTextureName", new Class[]{ int.class }, ltb, new Object[]{ i }) : null;	}	public static String getTextureBoxFileName(Object ltb) {		return ltb != null ? (String)Modchu_Reflect.getFieldObject(ltb.getClass(), "fileName", ltb) : null;	}	public static String getTextureBoxPackegeName(Object ltb) {		return ltb != null ? (String)Modchu_Reflect.getFieldObject(ltb.getClass(), "packegeName", ltb) : null;	}	public static List<Object> getTextureManagerTextures() {		return (List<Object>) Modchu_Reflect.getFieldObject(Modchu_TextureManagerBase.instance.getClass(), "textures", Modchu_TextureManagerBase.instance);	}	public static int getTextureManagerTexturesSize() {		return getTextureManagerTextures().size();	}	public static Object getTextureManagerTextures(int i) {		return getTextureManagerTextures().get(i);	}	public static String getModelClassName(String s) {		//Modchu_Debug.mDebug("getModelClassName s="+s);		s = Modchu_Main.lastIndexProcessing(s, "_");		for (Entry<String, MultiModelBaseBiped[]> en : Modchu_TextureManagerBase.instance.modelMap.entrySet()) {			String key = en.getKey();			//Modchu_Debug.mDebug1("getModelClassName key="+key);			if (key.equals(s)) {				MultiModelBaseBiped[] o = en.getValue();				return o[0].getClass().getName();			}		}		return s;	}	public static float[] getArmorModelsSize(Object o) {		Object o1 = Modchu_Reflect.invokeMethod(o.getClass(), "getArmorModelsSize", o, -1);		return o1 != null ? Modchu_CastHelper.FloatArray(o1) : new float[]{ 0.1F, 0.5F };	}	public static int getCapsInt(String s) {		int i = 0;		i = (Integer) Modchu_Reflect.getFieldObject(Modchu_IEntityCapsBase.class, s);		if (i > 0) return i;		i = (Integer) Modchu_Reflect.getFieldObject(Modchu_IEntityCapsBase.class, s);		return i;	}	public static void reverseActionRequest(int i) {		reverseActionRequest(Modchu_AS.get(Modchu_AS.minecraftThePlayer), i);	}	public static void reverseActionRequest(Object entity, int i) {		int actionRequestNumber = getActionRequestNumber(entity, false);		boolean actionFlag = getActionFlag(entity);		//Modchu_Debug.mDebug("actionFlag="+actionFlag);		if (actionFlag				&& actionRequestNumber == i) {			setActionRequest(entity, new boolean[]{ true, false, false });			Modchu_Debug.mDebug("setActionRequest false.解除要求");		} else {/*			if (!actionFlag					| (actionFlag							&& actionRequestNumber != i)) {*/			setActionRequestNumber(entity, i, false);			setActionRequest(entity, new boolean[]{ true, true, false });			Modchu_Debug.mDebug("setActionRequest true.実行要求");			//}		}	}	public static boolean getActionFlag() {		return getActionFlag(false);	}	public static boolean getActionFlag(boolean b) {		return getActionFlag(Modchu_AS.get(Modchu_AS.minecraftThePlayer), b);	}	public static boolean getActionFlag(Object entity) {		return getActionFlag(entity, false);	}	public static boolean getActionFlag(Object entity, boolean b) {		ModchuModel_ModelDataBase modelData = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		if (modelData != null) return modelData.getCapsValueBoolean(modelData.caps_actionFlag, b);		return false;	}	public static boolean[] getActionRequest() {		return getActionRequest(false);	}	public static boolean[] getActionRequest(boolean b) {		return getActionRequest(Modchu_AS.get(Modchu_AS.minecraftThePlayer), b);	}	public static boolean[] getActionRequest(Object entity) {		return getActionRequest(entity, false);	}	public static boolean[] getActionRequest(Object entity, boolean b) {		ModchuModel_ModelDataBase modelData = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		if (modelData != null) return modelData.getCapsValueBooleanArray(modelData.caps_actionRequest);		return null;	}	public static void setActionRequest(boolean[] b) {		setActionRequest(Modchu_AS.get(Modchu_AS.minecraftThePlayer), b);	}	public static void setActionRequest(Object entity, boolean[] b) {		//Modchu_Debug.mDebug("ModchuModel_Main setActionRequest entity="+entity+" ThePlayer="+Modchu_AS.get(Modchu_AS.minecraftThePlayer));		//Modchu_Debug.mDebug("ModchuModel_Main setActionRequest b[0]="+b[0]);		ModchuModel_ModelDataBase modelData = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		if (modelData != null) modelData.setCapsValue(modelData.caps_actionRequest, b);	}	public static int getActionRequestNumber(Object entity) {		return getActionRequestNumber(Modchu_AS.get(Modchu_AS.minecraftThePlayer), false);	}	public static int getActionRequestNumber(Object entity, boolean b) {		ModchuModel_ModelDataBase modelData = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		if (modelData != null) return modelData.getCapsValueInt(modelData.caps_actionRequestNumber, b);		return -1;	}	public static void setActionRequestNumber(int i) {		setActionRequestNumber(i, false);	}	public static void setActionRequestNumber(int i, boolean b) {		setActionRequestNumber(Modchu_AS.get(Modchu_AS.minecraftThePlayer), i, b);	}	public static void setActionRequestNumber(Object entity, int i) {		setActionRequestNumber(entity, i, false);	}	public static void setActionRequestNumber(Object entity, int i, boolean b) {		ModchuModel_ModelDataBase modelData = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		if (modelData != null) modelData.setCapsValue(modelData.caps_actionRequestNumber, i, b);	}	public static int getActionReleaseNumber() {		return getActionReleaseNumber(false);	}	public static int getActionReleaseNumber(boolean b) {		return getActionReleaseNumber(Modchu_AS.get(Modchu_AS.minecraftThePlayer), b);	}	public static int getActionReleaseNumber(Object entity) {		return getActionReleaseNumber(entity, false);	}	public static int getActionReleaseNumber(Object entity, boolean b) {		ModchuModel_ModelDataBase modelData = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		if (modelData != null) return modelData.getCapsValueInt(modelData.caps_actionReleaseNumber, b);		return -1;	}	public static void setActionReleaseNumber(int i) {		setActionReleaseNumber(i, false);	}	public static void setActionReleaseNumber(int i, boolean b) {		setActionReleaseNumber(Modchu_AS.get(Modchu_AS.minecraftThePlayer), i, b);	}	public static void setActionReleaseNumber(Object entity, int i) {		setActionReleaseNumber(entity, i, false);	}	public static void setActionReleaseNumber(Object entity, int i, boolean b) {		ModchuModel_ModelDataBase modelData = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		if (modelData != null) modelData.setCapsValue(modelData.caps_actionReleaseNumber, i);	}	public static boolean isLMMModel(Object model) {		String s = null;		Class c = null;		if (Modchu_Main.getMinecraftVersion() > 169) {			s = "mmm.lib.multiModel.model.AbstractModelBase";			c = Modchu_Reflect.loadClass(s);			if (c != null); else {				s = "mmmlibx.lib.multiModel.model.AbstractModelBase";				c = Modchu_Reflect.loadClass(s);			}		} else {			s = "MMM_ModelBase";			c = Modchu_Reflect.loadClass(s);		}		return c != null				&& c.isInstance(model);	}	public static boolean isPFLMModel(Object model) {		return model instanceof MultiModelBaseBiped;	}	public static Object getModelMaster(Object model) {		if (model != null				&& model instanceof Modchu_ModelBase) {			if (((Modchu_ModelBase) model).master instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) ((Modchu_ModelBase) model).master);		}		return model;	}}