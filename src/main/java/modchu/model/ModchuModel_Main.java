package modchu.model;import java.io.File;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import modchu.lib.Modchu_Config;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_Main;import modchu.lib.Modchu_Reflect;import modchu.lib.characteristic.Modchu_AS;import modchu.lib.characteristic.Modchu_Version;import modchu.lib.replacepoint.Modchu_IModelCapsReplacePoint;import modchu.lib.replacepoint.Modchu_ModelMultiReplacePoint;import modchu.model.multimodel.MultiModelCustom;import modchu.model.replacepoint.ModchuModel_HelperReplacePoint;import modchu.model.replacepoint.ModchuModel_TextureBoxReplacePoint;import modchu.model.replacepoint.ModchuModel_TextureManagerReplacePoint;import net.minecraft.src.MultiModel;import net.minecraft.src.modc_ModchuModel;public class ModchuModel_Main {	public static final String version = "2";	public static modc_ModchuModel baseModInstance;	//cfg書き込み項目	public static boolean skirtFloats = false;	public static double skirtFloatsVolume = 1.0D;	public static boolean modchuRemodelingModel = true;	public static boolean useInvisibilityBody = true;	public static boolean useInvisibilityArmor = false;	public static boolean useInvisibilityItem = false;	public static boolean versionCheck = true;	public static final String modName = "ModchuModel";	public static final String versionString = ""+ Modchu_Version.version + "-" + version;	public static String newVersion = "";	public static boolean isLMM = false;	public static boolean isPFLMF = false;	public static boolean isFavBlock = false;	public static boolean isDecoBlock = false;	public static boolean isBTW = false;	public static boolean isSSP = false;	public static boolean initModsLoaded= false;	public static HashMap<String, Object[]> checkModelsBox = new HashMap();	public static HashMap<Object, Map> entityModelMapData = new HashMap();	public static Map<String, Object[]> dummyModelMapData = new HashMap();	public static List<String> ngPlayerModelList = new ArrayList<String>();	public static String modelClassName = "MultiModel";	private static File cfgdir;	private static File mainCfgfile;	//不具合有り機能封印	private static boolean LMMarmorSupport = false;	public String getName() {		return modName;	}	public String getVersion() {		return versionString;	}	public static void load() {		//対応MOD導入チェック class直チェック		String className1[] = {				"net.minecraft.decoblock.DecoBlock", "net.minecraft.favstar.BlockFav", "EntityPlayerSP2", "net.minecraft.src.EntityPlayerSP2"		};		String test2 = null;		for(int n = 0 ; n < className1.length ; n++){			try {				test2 = className1[n];				test2 = ""+Class.forName(test2);				Modchu_Debug.lDebug(test2 + " Check ok.");				if(n == 0) isDecoBlock = true;				if(n == 1) isFavBlock = true;				if(n == 2						| n == 3) {					try {						String s = className1[n];						if (s != null) {							Object o = Modchu_Reflect.getFieldObject(s, "armor", -1);							if (o != null) isSSP = true;						}					} catch(Exception e) {					}				}			} catch (ClassNotFoundException e) {			}		}		cfgdir = new File(Modchu_AS.getFile(Modchu_AS.minecraftMcDataDir), "/config/");		mainCfgfile = new File(cfgdir, ("ModchuModel.cfg"));		loadcfg();		if (versionCheck) startVersionCheckThread();		new ModchuModel_RenderEngine();	}	public static void loadcfg() {		// cfg読み込み		if (cfgdir.exists()) {			if (!mainCfgfile.exists()) {				// cfgファイルが無い = 新規作成				String s[] = {						"skirtFloats=false", "skirtFloatsVolume=1.0D", "modchuRemodelingModel=true", "useInvisibilityBody=true", "useInvisibilityArmor=false",						"useInvisibilityItem=false", "versionCheck=true",  "debugCustomModelMessage=false"				};				Modchu_Config.writerConfig(mainCfgfile, s);			} else {				// cfgファイルがある				skirtFloats = Boolean.valueOf((Modchu_Config.loadConfig(mainCfgfile, "skirtFloats", skirtFloats)).toString());				skirtFloatsVolume = Double.valueOf((Modchu_Config.loadConfig(mainCfgfile, "skirtFloatsVolume", skirtFloatsVolume)).toString());				modchuRemodelingModel = Boolean.valueOf((Modchu_Config.loadConfig(mainCfgfile, "modchuRemodelingModel", modchuRemodelingModel)).toString());				useInvisibilityBody = Boolean.valueOf((Modchu_Config.loadConfig(mainCfgfile, "useInvisibilityBody", useInvisibilityBody)).toString());				useInvisibilityArmor = Boolean.valueOf((Modchu_Config.loadConfig(mainCfgfile, "useInvisibilityArmor", useInvisibilityArmor)).toString());				useInvisibilityItem = Boolean.valueOf((Modchu_Config.loadConfig(mainCfgfile, "useInvisibilityItem", useInvisibilityItem)).toString());				versionCheck = Boolean.valueOf((Modchu_Config.loadConfig(mainCfgfile, "versionCheck", versionCheck)).toString());				Modchu_Debug.debugCustomModelMessage = Boolean.valueOf((Modchu_Config.loadConfig(mainCfgfile, "debugCustomModelMessage", Modchu_Debug.debugCustomModelMessage)).toString());				String k[] = {						"skirtFloats", "skirtFloatsVolume", "modchuRemodelingModel", "useInvisibilityBody", "useInvisibilityArmor",						"useInvisibilityItem", "versionCheck", "debugCustomModelMessage"				};				String k1[] = {						""+skirtFloats, ""+skirtFloatsVolume, ""+modchuRemodelingModel, ""+useInvisibilityBody, ""+useInvisibilityArmor,						""+useInvisibilityItem, ""+versionCheck, ""+Modchu_Debug.debugCustomModelMessage				};				if (skirtFloatsVolume < 0.0D) skirtFloatsVolume = 0.0D;				if (skirtFloatsVolume > 2.0D) skirtFloatsVolume = 2.0D;				Modchu_Config.writerSupplementConfig(mainCfgfile, k, k1);			}		}	}	private static void startVersionCheckThread() {		ModchuModel_ThreadVersionCheck var0 = new ModchuModel_ThreadVersionCheck();		var0.start();	}	public static boolean onTickInGame(float f, Object minecraft, byte by, Object... tickData) {		return false;	}	public static String getPackege(int i, int j) {		return getTextureBoxFileName(getTextureManagerTextures(j));	}	public static String getModelSpecificationArmorPackege(String s) {		s = Modchu_Main.lastIndexProcessing(s, "_");		String s1 = null;		Object ltb;		for (int color = 0 ; color < 16 ; color++) {			for (int i = 0 ; i < getTextureManagerTexturesSize() ; ++i) {				ltb = getTextureManagerTextures(i);				if (getTextureBoxHasArmor(ltb)) {					if (Modchu_Main.lastIndexProcessing(getTextureBoxFileName(ltb), "_").equalsIgnoreCase(s)) {						//Modchu_Debug.mDebug("ltb.packegeName="+getTextureBoxFileName(ltb));						return getTextureBoxFileName(ltb);					}				}			}		}		return null;	}	public static Object getTextureBox(String s) {		s = textureNameCheck(s);		return ModchuModel_TextureManagerReplacePoint.instance.getTextureBox(s);	}	public static Object[] getTextureModels(Object entity, String s) {		return getTextureModels(entity, s, false);	}	public static Object[] getTextureModels(Object entity, String s, boolean b) {		return modelNewInstance(entity, s, b, true);	}	public static Object getTextureBox(int i) {		return getTextureManagerTextures(i);	}	public static Object[] getTextureModels(Object entity, int i) {		return getTextureModels(entity, i, false);	}	public static Object[] getTextureModels(Object entity, int i, boolean b) {		Object ltb = getTextureManagerTextures(i);		return modelNewInstance(entity, getTextureBoxFileName(ltb), b, true);	}	public static Object[] modelNewInstance(Object entity, String s, boolean b, boolean useCustom) {		Map<String, Object[]> map = null;		if (entity != null) map = entityModelMapData.get(entity);		else map = dummyModelMapData;		Object[] models = null;		s = textureNameCheck(s);		String s1 = Modchu_Main.lastIndexProcessing(s, "_");		if (map != null) {			if (!b) {				models = map.get(s);				if (models != null						&& models[0] != null						&& models[1] != null						&& models[2] != null) {					//Modchu_Debug.mDebug("modelNewInstance return models. s="+s);					return models;				} else {					//Modchu_Debug.mDebug("modelNewInstance models == null s="+s);				}			}		}		if (map != null) ;else {			map = new HashMap<String, Object[]>();			//Modchu_Debug.mDebug("modelNewInstance map = new HashMap");		}		models = modelNewInstance(s, useCustom);		if (models != null				&& models[0] != null				&& models[1] != null				&& models[2] != null) {			map.put(s, models);			if (entity != null) entityModelMapData.put(entity, map);			return models;		}		boolean isBiped = s1.equalsIgnoreCase("Biped");		String t = isBiped ? "Biped_Biped" : s;		models = modelNewInstance(t, useCustom);		if (models != null				&& models[0] != null				&& models[1] != null				&& models[2] != null) {			map.put(t, models);			if (entity != null) entityModelMapData.put(entity, map);		}		return models;	}	public static Object[] modelNewInstance(String s, boolean useCustom) {		Object[] models = new Object[3];		String s1 = s != null ? Modchu_Main.lastIndexProcessing(s, "_") : s;		String defaultModelName = ModchuModel_TextureManagerReplacePoint.defaultModelName;		String s2 = s1 != null				&& (defaultModelName != null				&& s1.indexOf(defaultModelName) == -1)				&& s.indexOf("_") > -1 ?				new StringBuilder().append(modelClassName).append("_").append(s1).toString()				: modelClassName;		Class c = Modchu_Reflect.loadClass(Modchu_Main.getClassName(s2), -1);		Modchu_Debug.mDebug("modelNewInstance c="+c);		if (c != null) {			//Modchu_Debug.mDebug("modelNewInstance s="+s+" c="+c);			Modchu_ModelMultiReplacePoint o = (Modchu_ModelMultiReplacePoint) Modchu_Reflect.newInstance(c, new Class[]{ float.class }, new Object[]{ 0.0F });			if (o != null) {				models[0] = o;/*//125delete				if (isSmartMoving						&& mod_pflm_playerformlittlemaid.playerFormLittleMaidVersion <= 124) {					boolean isBiped = modc_PFLM_PlayerFormLittleMaid.BipedClass != null ?							modc_PFLM_PlayerFormLittleMaid.BipedClass.isInstance(models[0]) : s.equalsIgnoreCase("Biped");					float[] f1 = new float[2];					f1[0] = isBiped ? 0.5F : 0.1F;					f1[1] = isBiped ? 1.0F : 0.5F;					//Modchu_Debug.mDebug("4modelNewInstance o != null isBiped="+isBiped);					models[1] = Modchu_Reflect.newInstance(c, new Class[]{ float.class, int.class, int.class }, new Object[]{ f1[0], MultiModelSmart.NoScaleStart, MultiModelSmart.Scale });					models[2] = Modchu_Reflect.newInstance(c, new Class[]{ float.class, int.class, int.class }, new Object[]{ f1[1], MultiModelSmart.NoScaleStart, MultiModelSmart.NoScaleEnd });					//Modchu_Debug.mDebug("5modelNewInstance o != null models[1] != null ? "+(models[1] != null));				} else {*///125delete					float[] f1 = getArmorModelsSize(models[0]);					//Modchu_Debug.mDebug("modelNewInstance getArmorModelsSize f1[0]="+f1[0]+" f1[1]="+f1[1]);					models[1] = (Modchu_ModelMultiReplacePoint) Modchu_Reflect.newInstance(c, new Class[]{ float.class }, new Object[]{ f1[0] });					models[2] = (Modchu_ModelMultiReplacePoint) Modchu_Reflect.newInstance(c, new Class[]{ float.class }, new Object[]{ f1[1] });/*//125delete				}*///125delete				models = entityTypeSetting(models);				return models;			}		} else {			Object ltb = getTextureBox(s);			if (ltb != null) models = getTextureBoxModels(ltb);		}		Modchu_Debug.mDebug("modelNewInstance c == null s="+s);		if (useCustom) models = newModelCustom(models, s);		models = entityTypeSetting(models);		return models;	}	private static Object[] entityTypeSetting(Object[] models) {		if (models != null) {			if (models[0] != null					&& models[0] instanceof MultiModelCustom) ((MultiModelCustom) models[0]).customModel.entityType = ((MultiModelCustom) models[0]).customModel.PFLM;			if (models[1] != null					&& models[1] instanceof MultiModelCustom) ((MultiModelCustom) models[1]).customModel.entityType = ((MultiModelCustom) models[1]).customModel.PFLM;			if (models[2] != null					&& models[2] instanceof MultiModelCustom) ((MultiModelCustom) models[2]).customModel.entityType = ((MultiModelCustom) models[2]).customModel.PFLM;		} else {			Modchu_Debug.lDebug("entityTypeSetting models == null");		}		return models;	}	public static Object[] newModelCustom(Object[] models, String s) {		Class c = Modchu_Reflect.loadClass(Modchu_Main.getClassName("MultiModel_Custom"), -1);		Modchu_Debug.mDebug("newModelCustom s="+s);		if (models != null) ;else {			models = new MultiModel[3];			models[0] = new MultiModel(0.0F);			float[] f = ((MultiModel) models[0]).getArmorModelsSize();			models[1] = new MultiModel(f[0]);			models[2] = new MultiModel(f[1]);		}		if (s.indexOf("_") < 0) return models;		if (c != null				&& models != null) {			if (models[0] != null) ;else Modchu_Debug.mDebug("models[0] == null !!");			if (models[0] != null) {				Object[] newModels = new Object[3];				newModels[0] = (Modchu_ModelMultiReplacePoint) Modchu_Reflect.newInstance(c, new Class[]{ float.class, Object.class, String.class }, new Object[]{ 0.0F, models[0], s});				if (newModels[0] != null) ;else {					Modchu_Debug.lDebug("newModelCustom newModels[0] == null !!");					return null;				}				float[] f1 = getArmorModelsSize(models[0]);				if (models[1] != null) ;else Modchu_Debug.mDebug("models[1] == null !!");				if (models[2] != null) ;else Modchu_Debug.mDebug("models[2] == null !!");				if (models[1] != null) {					if (LMMarmorSupport) newModels[1] = (MultiModelCustom) Modchu_Reflect.newInstance(c, new Class[]{ float.class, Object.class, String.class }, new Object[]{ f1[0], models[1], s });					else newModels[1] = models[1];				}				if (models[2] != null) {					if (LMMarmorSupport) newModels[2] = (MultiModelCustom) Modchu_Reflect.newInstance(c, new Class[]{ float.class, Object.class, String.class }, new Object[]{ f1[1], models[2], s });					else newModels[2] = models[2];				}				newModels = entityTypeSetting(newModels);				return newModels;			}		}		Modchu_Debug.lDebug("newModelCustom return null !! s="+s);		return null;	}	public static Object checkTexturePackege(String s, int i) {		Object ltb = getTextureBox(s);		if (ltb != null) {			Object s1 = textureManagerGetTexture(s, i);			if (s1 != null) {				//Modchu_Debug.mDebug("checkTexturePackege ok s1="+s1);				return ltb;			}		}		return null;	}	public static Object checkTextureArmorPackege(String s) {		Object ltb = getTextureBox(s);		if (ltb != null				&& getTextureBoxHasArmor(ltb)) {			Object s1 = textureManagerGetArmorTexture(s, 64, Modchu_Reflect.newInstance("ItemStack", new Class[]{ Modchu_Reflect.loadClass("Item") }, new Object[]{ Modchu_AS.get(Modchu_AS.getItem, "diamond_helmet") }));			if (s1 != null) {				//Modchu_Debug.mDebug("checkTextureArmorPackege ok s1="+s1);				return ltb;			}		}		return null;	}	public static Object textureManagerGetTexture(String s, int i) {		s = textureNameCheck(s);		Object ltb = getTextureBox(s);		if (ltb != null) return getTextureBoxTextureName(ltb, i);		//Modchu_Debug.mDebug("textureManagerGetTextureName return null !! s="+s+" i="+i);		s = textureNameCheck(null);		ltb = getTextureBox(s);		if (ltb != null) return getTextureBoxTextureName(ltb, i);		return null;	}	public static boolean textureColorChack(String s, int i) {		s = textureNameCheck(s);		Object ltb = getTextureBox(s);		if (ltb != null) return getTextureBoxHasColor(ltb, i);		//Modchu_Debug.mDebug("textureColorChack return null !! s="+s+" i="+i);		return false;	}	public static String textureNameCheck(String s) {		String s1 = ModchuModel_TextureManagerReplacePoint.defaultModelName;		if (s == null				| (s !=null				&& s.isEmpty())) {			if (s1 != null) {				s = "default_"+s1;				//Modchu_Debug.lDebug("Modchu_Main textureNameCheck default setting.");			}			else Modchu_Debug.lDebug("Modchu_Main textureNameCheck MMM_TextureManager defaultModelName == null !!");		} else {			if (s.indexOf("_") < 0) {				if (s1 != null) s = s+"_"+s1;			}		}		return s;	}	public static Object textureManagerGetArmorTexture(String s, int i, Object itemstack) {		//Modchu_Debug.mDebug("textureManagerGetArmorTextureName s="+s+" i="+i+" is != null ? "+(is != null));		s = textureNameCheck(s);		Object ltb = getTextureBox(s);		if (ltb != null) {			if (Modchu_Main.getMinecraftVersion() > 159) {				//Modchu_Debug.mDebug("textureManagerGetArmorTextureName return ="+Modchu_Reflect.invokeMethod(ModchuModel_TextureBoxReplacePoint.class, "getArmorTextureName", new Class[]{ int.class, ItemStack.class }, ltb, new Object[]{ i, is }));				return Modchu_Reflect.invokeMethod(ModchuModel_TextureBoxReplacePoint.class, "getArmorTextureName", new Class[]{ int.class, Modchu_Reflect.loadClass("ItemStack") }, ltb, new Object[]{ i, itemstack });			} else {				boolean b = i == 1 | i == 64;				return Modchu_Reflect.invokeMethod(ModchuModel_TextureBoxReplacePoint.class, "getArmorTextureName", new Class[]{ boolean.class, Modchu_Reflect.loadClass("ItemStack") }, ltb, new Object[]{ b, itemstack });			}		}		//Modchu_Debug.mDebug("textureManagerGetArmorTextureName return null !! s="+s+" i="+i);		return null;	}	public static String textureManagerGetNextPackege(String s, int i) {		return textureManagerGetPackege(s, i, 0);	}	public static String textureManagerGetPrevPackege(String s, int i) {		return textureManagerGetPackege(s, i, 1);	}	public static String textureManagerGetPackege(String s, int i, int i1) {		Object ltb = getTextureBox(s);		if (ltb != null) {			ltb = i1 == 0 ? Modchu_Reflect.invokeMethod(ModchuModel_TextureManagerReplacePoint.instance.getClass(), "getNextPackege", new Class[]{ ltb.getClass(), int.class }, ModchuModel_TextureManagerReplacePoint.instance, new Object[]{ ltb, i }) :				Modchu_Reflect.invokeMethod(ModchuModel_TextureManagerReplacePoint.instance.getClass(), "getPrevPackege", new Class[]{ ltb.getClass(), int.class }, ModchuModel_TextureManagerReplacePoint.instance, new Object[]{ ltb, i });			return getTextureBoxFileName(ltb);		}		Modchu_Debug.mDebug("textureManagerGetPackege return null !! s="+s+" i="+i);		return null;	}	public static String textureManagerGetNextArmorPackege(String s) {		return textureManagerGetArmorPackege(s, 0);	}	public static String textureManagerGetPrevArmorPackege(String s) {		return textureManagerGetArmorPackege(s, 1);	}	public static String textureManagerGetArmorPackege(String s, int i) {		Modchu_Debug.mDebug("textureManagerGetArmorPackege s="+s+" i="+i);		String s1 = ModchuModel_TextureManagerReplacePoint.defaultModelName;		List<Object> textures = getTextureManagerTextures();		Object ltb = getTextureBox(s);		int index = -1;		String s2 = s;		int i2 = s != null && !s.isEmpty() ? s.lastIndexOf(s1) : -1;		if (i2 > -1) {			s2 = s.substring(0, i2);		}		for(int i1 = 0; i1 < textures.size(); i1++) {			ltb = textures.get(i1);			if(((String) Modchu_Reflect.getFieldObject(ltb.getClass(), "fileName", ltb)).equals(s)) {				index = i1;				break;			}		}		if (index == -1) {			Modchu_Debug.mDebug("textureManagerGetArmorPackege return index == -1 !!");			return null;		}		boolean flag = false;		for(int i1 = 0; i1 < textures.size(); i1++) {			index = i == 0 ? index + 1 : index - 1;			if (index >= textures.size()) index = 0;			if (index < 0) index = textures.size() - 1;			ltb = textures.get(index);			//ltb = i == 0 ? Modchu_Reflect.invokeMethod(MMM_TextureManager, "getNextArmorPackege", new Class[]{MMM_TextureBox}, textureManagerInstance, new Object[]{ltb}) :			//Modchu_Reflect.invokeMethod(MMM_TextureManager, "getPrevArmorPackege", new Class[]{MMM_TextureBox}, textureManagerInstance, new Object[]{ltb});			Modchu_Debug.mDebug("textureManagerGetArmorPackege index for index="+index+" s="+(String) Modchu_Reflect.getFieldObject(ltb.getClass(), "fileName", ltb));			if (getTextureBoxHasArmor(ltb)) {				s = (String) Modchu_Reflect.getFieldObject(ltb.getClass(), "fileName", ltb);				if (!s.isEmpty()						&& !s.equals(s2)) {					Modchu_Debug.mDebug("textureManagerGetArmorPackege flag ok.textures.size()="+textures.size());					Modchu_Debug.mDebug("textureManagerGetArmorPackege flag ok.s="+s);					flag = true;					break;				}			}		}		if (!flag) Modchu_Debug.mDebug("textureManagerGetArmorPackege !flag !!");		i2 = s.lastIndexOf(s1);		if (i2 > -1) s = s.substring(0, i2);		Modchu_Debug.mDebug("textureManagerGetArmorPackege return s="+s);		return s;	}	public static Object[] getTextureBoxModels(Object ltb) {		return ltb != null ? (Object[])Modchu_Reflect.getFieldObject(ltb.getClass(), "models", ltb) : null;	}	public static boolean getTextureBoxHasArmor(Object ltb) {		return ltb != null ? (Boolean)Modchu_Reflect.invokeMethod(ltb.getClass(), "hasArmor", ltb) : false;	}	public static boolean getTextureBoxHasColor(Object ltb, int i) {		return ltb != null ? (Boolean)Modchu_Reflect.invokeMethod(ltb.getClass(), "hasColor", new Class[]{ int.class }, ltb, new Object[]{ i }) : false;	}	public static Object getTextureBoxTextureName(Object ltb, int i) {		return ltb != null ? Modchu_Reflect.invokeMethod(ltb.getClass(), "getTextureName", new Class[]{ int.class }, ltb, new Object[]{ i }) : null;	}	public static String getTextureBoxFileName(Object ltb) {		return ltb != null ? (String)Modchu_Reflect.getFieldObject(ltb.getClass(), "fileName", ltb) : null;	}	public static List<Object> getTextureManagerTextures() {		return (List<Object>) Modchu_Reflect.getFieldObject(ModchuModel_TextureManagerReplacePoint.instance.getClass(), "textures", ModchuModel_TextureManagerReplacePoint.instance);	}	public static int getTextureManagerTexturesSize() {		return getTextureManagerTextures().size();	}	public static Object getTextureManagerTextures(int i) {		return getTextureManagerTextures().get(i);	}	public static float[] getArmorModelsSize(Object o) {		return o != null ? (float[])Modchu_Reflect.invokeMethod(o.getClass(), "getArmorModelsSize", o) : null;	}	public static int getCapsInt(String s) {		int i = 0;		i = (Integer) Modchu_Reflect.getFieldObject(Modchu_IModelCapsReplacePoint.class, s);		if (i > 0) return i;		i = (Integer) Modchu_Reflect.getFieldObject(ModchuModel_IModelCaps.class, s);		return i;	}	public static void modsLoaded() {		if (initModsLoaded) return;		initModsLoaded = true;		//Modchu_Main.initModsLoadedCount 10		Modchu_Main.initModsLoadedCount = Modchu_Main.initModsLoadedCount + 10;		if (ModchuModel_TextureManagerReplacePoint.isModchu) {			// テクスチャパックの構築			ModchuModel_TextureManagerReplacePoint.instance.loadTextures();			if (ModchuModel_HelperReplacePoint.isClient) {				//ModchuModel_StabilizerManagerReplacePoint.loadStabilizer();				// テクスチャインデックスの構築				Modchu_Reflect.invokeMethod(ModchuModel_TextureManagerReplacePoint.instance.getClass(), "initTextureList", new Class[]{ boolean.class }, ModchuModel_TextureManagerReplacePoint.instance, new Object[]{ true });			} else {				ModchuModel_TextureManagerReplacePoint.instance.loadTextureServer();			}		}		//Modchu_Main.initModsLoadedCount 80		Modchu_Main.initModsLoadedCount = Modchu_Main.initModsLoadedCount + 70;/*		//対応MOD導入チェック ModLoader対応MOD		List list = ModLoaderModContainer.findAll(BaseMod.class);		int size = list.size();		for (int i = 0; i < size; i++)		{			BaseMod mod = (BaseMod)list.get(i);			String name = mod.getClass().getSimpleName();			if (name.equals("mod_DecoBlock")) {				isDecoBlock = true;				Modchu_Debug.lDebug("DecoBlock Check ok.");			}			else if (name.equals("mod_FavBlock")) {				isFavBlock = true;				Modchu_Debug.lDebug("FavBlock Check ok.");			}			else if (name.equals("mod_FCBetterThanWolves")) {				isBTW = true;				Modchu_Debug.lDebug("mod_FCBetterThanWolves Check ok.");			}			else if (name.equals("mod_MinecraftForge")) {				Modchu_Main.isForge = true;				Modchu_Debug.lDebug("mod_MinecraftForge Check ok.");			}			else if (name.equals("mod_LMM_littleMaidMob")) {				boolean b = false;				String s1 = (String) Modchu_Reflect.invokeMethod(Modchu_Reflect.loadClass("mod_LMM_littleMaidMob"), "getVersion", mod);				if (s1.startsWith("1.4.6")) ;else {					s1 = s1.substring(s1.length() - 1);					if (Integer.valueOf(s1) < 5) Modchu_Main.oldRenderItems = b;				}			}		}*/		Object o = Modchu_Reflect.invokeMethod("cpw.mods.fml.common.Loader", "instance");		if (o != null) {			List list = (List) Modchu_Reflect.invokeMethod("cpw.mods.fml.common.Loader", "getActiveModList", o);			if (list != null) {				int size = list.size();				String name = null;				for (int i = 0; i < size; i++) {					o = list.get(i);					name = (String) Modchu_Reflect.invokeMethod("cpw.mods.fml.common.ModContainer", "getName", o);					if (name.equals("DecoBlock")) {						isDecoBlock = true;						Modchu_Debug.lDebug("DecoBlock Check ok.");					}					else if (name.equals("FavBlock")) {						isFavBlock = true;						Modchu_Debug.lDebug("FavBlock Check ok.");					}					else if (name.equals("FCBetterThanWolves")) {						isBTW = true;						Modchu_Debug.lDebug("FCBetterThanWolves Check ok.");					}					else if (name.equals("Forge")) {						Modchu_Main.isForge = true;						Modchu_Debug.lDebug("MinecraftForge Check ok.");					}					else if (name.equals("LMM_littleMaidMob")) {						isLMM = true;						Modchu_Debug.lDebug("LMM_littleMaidMob Check ok.");					}				}			}		}		if (Modchu_Main.isModEnabled("net.minecraft.src.modc_PFLMF")) {/*			String s = Modchu_Main.getModVersion("net.minecraft.src.modc_PFLMF");			if (s != null) {				s = Modchu_Main.lastIndexProcessing(s, "_");				int i1 = Modchu_Main.getVersionStringConversionInt(s);				if (i1 < 401) {					Modchu_Debug.lDebug("modc_PFLMF Version is old !! VersionInt="+i1);					Modchu_Main.runtimeExceptionFlag = true;					Modchu_Main.runtimeExceptionString = "modc_PFLMF Version is old !!";				} else {*/					isPFLMF = true;					Modchu_Debug.lDebug("modc_PFLMF Check ok.");/*				}			}*/		}		//Modchu_Main.initModsLoadedCount 90		Modchu_Main.initModsLoadedCount = Modchu_Main.initModsLoadedCount + 10;	}}