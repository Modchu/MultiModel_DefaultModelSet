package modchu.model;import java.lang.reflect.Field;import java.util.ArrayList;import java.util.List;import java.util.Map.Entry;import java.util.concurrent.ConcurrentHashMap;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_Main;import modchu.lib.Modchu_Reflect;import modchu.lib.characteristic.Modchu_AS;import modchu.lib.characteristic.recompileonly.Modchu_CastHelper;import modchu.lib.characteristic.recompileonly.Modchu_ModelRenderer;import modchu.model.multimodel.base.MultiModelAction;import modchu.model.multimodel.base.MultiModelBaseBiped;import modchu.model.replacepoint.ModchuModel_EntityCapsReplacePoint;public class ModchuModel_ModelDataBase extends ModchuModel_EntityCapsReplacePoint implements ModchuModel_IModelCaps {	public static int allMultiModelActionMode = 0;	public static int allMultiModelActionRequestNumber = 0;	public static final int allMultiModelActionModeMax = 2;	public static final int allMultiModelActionMax = 30;	public static boolean allMultiModelActionFlag = false;	private Object subEntityCaps;	protected String textureName = null;	protected String modelArmorName = null;	protected int maidColor = 0;	private boolean isSitting = false;	private boolean[] actionRequest = new boolean[2];	private boolean actionFlag = false;	private boolean motionResetFlag = false;	private boolean motionSetFlag = false;	private boolean sleeping = false;	private boolean allMultiModelActionRunFlag = false;	private float actionSpeed = 0.0F;	private int skinMode = 0;	private int runActionNumber = 0;	private int actionRequestNumber = 0;	private int actionReleaseNumber = 0;	private int actionCount = 0;	private int actionTime = 0;	private int initFlag = 0;	private byte entityType = 1;	private List<String> showPartsHideList = new ArrayList();	private ConcurrentHashMap<String, String> showPartsRenemeMap = new ConcurrentHashMap();	private ConcurrentHashMap<String, Object> freeVariableMap;	private boolean allMultiModelActionRunInitFlag;	public ModchuModel_ModelDataBase() {		super();	}	@Override	public Object getCapsValue(int pIndex, Object ... pArg) {		return getCapsValue((MultiModelBaseBiped)null, pIndex, (Object[])pArg);	}	@Override	public Object getCapsValue(MultiModelBaseBiped model, ModchuModel_IModelCaps entityCaps, int pIndex, Object... pArg) {		return null;	}	@Override	public Object getCapsValue(MultiModelBaseBiped model, int pIndex, Object... pArg) {		switch (pIndex) {		case caps_EntityType:			return getEntityType();		case caps_textureName:			return getTextureName();		case caps_textureArmorName:			return getTextureArmorName();		case caps_maidColor:			return getMaidColor();		case caps_subEntityCaps:			return getSubEntityCaps();		case caps_isSitting:			return getIsSitting();		case caps_isSleeping:			return getIsSleeping();		case caps_initFlag:			return getInitFlag();		case caps_height:			return Modchu_AS.getFloat(Modchu_AS.entityHeight, getOwner());		case caps_width:			return Modchu_AS.getFloat(Modchu_AS.entityWidth, getOwner());		case caps_actionRequest:			return getActionRequest();		case caps_actionRequestNumber:			return getActionRequestNumber();		case caps_runActionNumber:			return getRunActionNumber();		case caps_actionReleaseNumber:			return getActionReleaseNumber();		case caps_actionFlag:			return getActionFlag();		case caps_actionCount:			return getActionCount();		case caps_actionTime:			return getActionTime();		case caps_actionSpeed:			return getActionSpeed();		case caps_skinMode:			return getSkinMode();		case caps_motionResetFlag:			return getMotionResetFlag();		case caps_motionSetFlag:			return getMotionSetFlag();		case caps_showPartsHideList:			return getShowPartsHideList();		case caps_showPartsRenemeMap:			return getShowPartsRenemeMap();		case caps_allMultiModelActionMode:			return getAllMultiModelActionMode();		case caps_allMultiModelActionModeMax:			return getAllMultiModelActionModeMax();		case caps_allMultiModelActionRequestNumber:			return getAllMultiModelActionRequestNumber();		case caps_allMultiModelActionFlag:			return getAllMultiModelActionFlag();		case caps_allMultiModelActionMax:			return getAllMultiModelActionMax();		case caps_firstPerson:			return getFirstPerson();		case caps_oldwalking:			return getOldwalking();		case caps_showPartsMap:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) return getShowPartsMap((Integer) pArg[0]);			break;		case caps_showPartsMapBoolean:			if (pArg != null			&& pArg.length > 1			&& pArg[0] != null			&& pArg[1] != null) {				return getShowPartsMapBoolean((String) pArg[0], (Integer) pArg[1]);			}			break;		case caps_showModelSettingBoolean:			if (pArg != null			&& pArg.length > 1			&& pArg[0] != null			&& pArg[1] != null) return getShowModelSettingBoolean((Modchu_ModelRenderer) pArg[0], (Integer) pArg[1]);			return true;		case caps_freeVariable:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				return getFreeVariable((String)pArg[0]);			}			break;		case caps_model:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) return getModel((Integer) pArg[0]);			break;		}		Object o = null;		if (model != null) {			o = model.getCapsValue(pIndex, (Object[]) pArg);		}		if (o != null) return o;		if (subEntityCaps != null) {			o = Modchu_Reflect.invokeMethod(subEntityCaps.getClass(), "getCapsValue", new Class[]{ int.class, Object[].class }, subEntityCaps, new Object[]{ pIndex, pArg });			return o;		}		return super.getCapsValue(pIndex, (Object[]) pArg);	}	@Override	public Object getCapsValue(ModchuModel_IModelCaps entityCaps, int pIndex, Object... pArg) {		return null;	}	@Override	public boolean setCapsValue(int pIndex, Object... pArg) {		return setCapsValue((MultiModelBaseBiped)null, pIndex, (Object[])pArg);	}	@Override	public boolean setCapsValue(MultiModelBaseBiped model, ModchuModel_IModelCaps entityCaps, int pIndex, Object... pArg) {		return false;	}	@Override	public boolean setCapsValue(MultiModelBaseBiped model, int pIndex, Object... pArg) {		switch (pIndex) {		case caps_Entity:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				setEntity(pArg[0]);				return true;			}			return false;		case caps_textureName:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				setTextureName((String) pArg[0]);				return true;			}			return false;		case caps_textureArmorName:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				setTextureArmorName((String) pArg[0]);				return true;			}			return false;		case caps_maidColor:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				setMaidColor((Integer) pArg[0]);				return true;			}			return false;		case caps_subEntityCaps:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				setSubEntityCaps(pArg[0]);				return true;			}			return false;		case caps_skinMode:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				setSkinMode((Integer) pArg[0]);				return true;			}			return false;		case caps_isSitting:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				setIsSitting((Boolean) pArg[0]);				return true;			}			return false;		case caps_isSleeping:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				setIsSleeping((Boolean) pArg[0]);				return true;			}			return false;		case caps_initFlag:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				setInitFlag((Integer) pArg[0]);				return true;			}			return false;		case caps_EntityType:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				setEntityType((Byte) pArg[0]);				return true;			}			return false;		case caps_actionRequest:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				setActionRequest((boolean[]) pArg[0]);				return true;			}			return false;		case caps_freeVariable:			if (pArg != null			&& pArg.length > 1			&& pArg[0] != null) {				setFreeVariable((String)pArg[0], pArg[1]);				return true;			}			return false;		case caps_actionRequestNumber:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				setActionRequestNumber((Integer) pArg[0]);				return true;			}			return false;		case caps_actionReleaseNumber:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				setActionReleaseNumber((Integer) pArg[0]);				return true;			}			return false;		case caps_actionCount:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				setActionCount((Integer) pArg[0]);				return true;			}			return false;		case caps_actionTime:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				setActionTime((Integer) pArg[0]);				return true;			}			return false;		case caps_actionFlag:			return false;		case caps_actionSpeed:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				setActionSpeed((Float) pArg[0]);				return true;			}			return false;		case caps_motionResetFlag:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				setMotionResetFlag((Boolean) pArg[0]);				return true;			}			return false;		case caps_motionSetFlag:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				setMotionSetFlag((Boolean) pArg[0]);				return true;			}			return false;		case caps_showPartsHideList:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				addShowPartsHideList((String[]) pArg[0]);				return true;			}			return false;		case caps_showPartsRenemeMap:			if (pArg != null			&& pArg.length > 1			&& pArg[0] != null			&& pArg[1] != null) {				addShowPartsRenemeMap((String[]) pArg[0], (String[]) pArg[1]);				return true;			}			return false;		case caps_actionInit:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				actionInit((Integer) pArg[0]);				return true;			}			return false;		case caps_actionRelease:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				actionRelease((Integer) pArg[0]);				return true;			}			return false;		case caps_setRotationAnglesBefore:			if (pArg != null			&& pArg.length > 6			&& pArg[0] != null			&& pArg[1] != null			&& pArg[2] != null			&& pArg[3] != null			&& pArg[4] != null			&& pArg[5] != null			&& pArg[6] != null) {				setRotationAnglesBefore(pArg[0], (Float) pArg[1] ,(Float) pArg[2], (Float) pArg[3], (Float) pArg[4], (Float) pArg[5], (Float) pArg[6]);				return true;			}			return false;		case caps_setRotationAnglesAfter:			if (pArg != null			&& pArg.length > 6			&& pArg[0] != null			&& pArg[1] != null			&& pArg[2] != null			&& pArg[3] != null			&& pArg[4] != null			&& pArg[5] != null			&& pArg[6] != null) {				setRotationAnglesAfter(pArg[0], (Float) pArg[1] ,(Float) pArg[2], (Float) pArg[3], (Float) pArg[4], (Float) pArg[5], (Float) pArg[6]);				return true;			}			return false;		case caps_allMultiModelActionMode:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				setAllMultiModelActionMode((Integer) pArg[0]);				return true;			}			return false;		case caps_allMultiModelActionRequestNumber:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				setAllMultiModelActionRequestNumber((Integer) pArg[0]);				return true;			}			return false;		case caps_allMultiModelActionFlag:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				setAllMultiModelActionFlag((Boolean) pArg[0]);				return true;			}			return false;		case caps_oldwalking:			if (pArg != null && pArg.length > 0 && pArg[0] != null) {				setOldwalking((Boolean) pArg[0]);				return true;			}			return false;		case caps_firstPerson:			if (pArg != null && pArg.length > 0 && pArg[0] != null) {				setFirstPerson((Boolean) pArg[0]);				return true;			}			return false;/*		case caps_showPartsNemeMap:			if (pArg != null			&& pArg.length > 1			&& pArg[0] != null			&& pArg[1] != null) {				setShowPartsNemeMap((Integer) pArg[0], (String) pArg[1]);				return true;			}*/		case caps_indexOfAllVisible:			if (pArg != null			&& pArg.length > 1			&& pArg[0] != null			&& pArg[1] != null) {				if (pArg.length > 2						&& pArg[2] != null) indexOfAllSetVisible((String) pArg[0], (Integer) pArg[1], (Boolean) pArg[2]);				else indexOfAllSetVisible((String) pArg[0], (Integer) pArg[1]);				return true;			}			return false;		case caps_showModelSettingReflects:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				showModelSettingReflects((Integer) pArg[0]);				return true;			}			return false;		case caps_defaultShowPartsMap:			if (pArg != null			&& pArg.length > 1			&& pArg[0] != null			&& pArg[1] != null) return getDefaultShowPartsMapBoolean((String) pArg[0], (Integer) pArg[1]);			break;		}		if (subEntityCaps != null) {			return (Boolean) (Modchu_Reflect.invokeMethod(subEntityCaps.getClass(), "setCapsValue", new Class[]{ int.class, Object[].class }, subEntityCaps, new Object[]{ pIndex, pArg }));		}		return super.setCapsValue(pIndex, (Object[]) pArg);	}	@Override	public boolean setCapsValue(ModchuModel_IModelCaps entityCaps, int pIndex, Object... pArg) {		return setCapsValue(pIndex, (Object[])pArg);	}	/**	 * setRotationAnglesLM 呼び出し前に呼ばれる。	 */	protected void setRotationAnglesBefore(Object model, float f, float f1, float f2, float f3, float f4, float f5) {	}	/**	 * setRotationAnglesLM 呼び出し後に呼ばれる。	 */	protected void setRotationAnglesAfter(Object model, float f, float f1, float f2, float f3, float f4, float f5) {		if (model != null				&& model instanceof MultiModelAction) ;else {					((MultiModelBaseBiped) model).boneProcessing(f, f1, f2, f3, f4, f5, this);					//Modchu_Debug.mDebug("setRotationAnglesAfter else");					return;				}		if (getAllMultiModelActionFlag()				&& getAllMultiModelActionModeCheck()) {			//Modchu_Debug.mDebug("setRotationAnglesAfter getAllMultiModelActionRequestNumber()="+getAllMultiModelActionRequestNumber());			if (getAllMultiModelActionRequestNumber() > 0) {				if (getActionRequestNumber() != getAllMultiModelActionRequestNumber()) {					setActionRequestNumber(getAllMultiModelActionRequestNumber());				}				if (allMultiModelActionRunInitFlag) {					setActionRequest(new boolean[]{ true, true });					allMultiModelActionRunFlag = true;					allMultiModelActionRunInitFlag = false;				}			} else {				setAllMultiModelActionFlag(false);				allMultiModelActionRunInitFlag = true;				setActionRequest(new boolean[]{ true, false });				allMultiModelActionRunFlag = false;			}		} else {			if (!allMultiModelActionRunInitFlag) allMultiModelActionRunInitFlag = true;			if (allMultiModelActionRunFlag) {				setActionRequest(new boolean[]{ true, false });				allMultiModelActionRunFlag = false;			}		}		//Modchu_Debug.mDebug("setRotationAnglesAfter getActionRequest()[0]="+getActionRequest()[0]);		int runActionNumber;		if (getActionRequest()[0]) {			runActionNumber = getRunActionNumber();			Modchu_Debug.mDebug("setRotationAnglesAfter getActionRequest()[0]="+getActionRequest()[0]+" getActionRequest()[1]="+getActionRequest()[1]);			Modchu_Debug.mDebug("setRotationAnglesAfter runActionNumber="+runActionNumber);			if (getActionRequest()[1]) {				Modchu_Debug.mDebug("setRotationAnglesAfter ActionRequest action実行処理");				int actionRequestNumber = getActionRequestNumber();				Modchu_Debug.mDebug("setRotationAnglesAfter actionRequestNumber="+actionRequestNumber);				if (actionRequestNumber > 0						&& actionRequestNumber != runActionNumber) {					Modchu_Debug.mDebug("setRotationAnglesAfter getActionRequest()[1]="+getActionRequest()[1]+" actionRequestNumber="+actionRequestNumber);					if (!getResetActionNumberFlag()) {						setActionFlag(true);					}					setRunActionNumber(actionRequestNumber);				}			} else {				Modchu_Debug.mDebug("setRotationAnglesAfter ActionRequest action解除処理");				if (!getResetActionNumberFlag()) {					setActionFlag(false);				}				if (setRunActionNumber(0)) {					setActionRequestNumber(0);				}			}			return;		}		runActionNumber = getRunActionNumber();		//Modchu_Debug.mDebug("setRotationAnglesAfter runActionNumber="+runActionNumber);		if (getActionFlag()				&& !getResetActionNumberFlag()				&& runActionNumber > 0) {			if (!getCapsValueBoolean(caps_isPlayer)) setActionReleaseNumber(runActionNumber);			float actionSpeed = ModchuModel_ModelDataMaster.instance.getActionSpeed(this);			setActionSpeed(actionSpeed);			//Modchu_Debug.mDebug("setRotationAnglesAfter actionSpeed="+actionSpeed);			Object[] model2 = getTextureDataModel();			if (model2 != null) {				for (int i = 0; i < model2.length; i++) {					if (MultiModelAction.class.isInstance(model2[i])) {						((MultiModelAction) model2[i]).action(f, f1, f2, f3, f4, f5, runActionNumber, this);					} else {						//Modchu_Debug.mDebug("setRotationAnglesAfter model2 !MultiModelAction.class.isInstance !!");					}					((MultiModelBaseBiped) model2[i]).boneProcessing(f, f1, f2, f3, f4, f5, this);				}			} else {				((MultiModelBaseBiped) model).boneProcessing(f, f1, f2, f3, f4, f5, this);			}			setActionSpeed(0.0F);		} else {			actionReleaseRun();			((MultiModelBaseBiped) model).boneProcessing(f, f1, f2, f3, f4, f5, this);		}	}	private void actionInit(int i) {		Object[] model2 = getTextureDataModel();		if (model2 != null) {			for (int i1 = 0; i1 < model2.length; i1++) {				if (MultiModelAction.class.isInstance(model2[i1])) {					((MultiModelAction) model2[i1]).actionInit(this, i);				} else {					Modchu_Debug.mDebug("actionInit model2 !MultiModelAction.class.isInstance !!");				}			}		}	}	private void actionRelease(int i) {		Object[] model2 = getTextureDataModel();		if (model2 != null) {			for (int i1 = 0; i1 < model2.length; i1++) {				if (MultiModelAction.class.isInstance(model2[i1])) {					((MultiModelAction) model2[i1]).actionRelease(this, i);				} else {					Modchu_Debug.mDebug("actionRelease model2 !MultiModelAction.class.isInstance !!");				}			}		}	}	protected Object[] getTextureDataModel() {		Object entity = Modchu_Reflect.invokeMethod(subEntityCaps.getClass(), "getCapsValue", new Class[]{ int.class, Object[].class }, subEntityCaps, new Object[]{ caps_Entity, null });		if (entity != null) {			Object textureData = Modchu_Reflect.getFieldObject(entity.getClass(), "textureData", entity);			if (textureData != null) {				return (Object[]) Modchu_Reflect.getFieldObject(textureData.getClass(), "textureModel", textureData);			}		}		return null;	}	private void setEntity(Object entity) {		Modchu_Reflect.setFieldObject(ModchuModel_ModelDataBase.class, "owner", this, entity);	}	private Object getSubEntityCaps() {		return subEntityCaps;	}	protected void setSubEntityCaps(Object entityCaps) {		subEntityCaps = entityCaps;	}	protected boolean getMotionResetFlag() {		return motionResetFlag;	}	protected void setMotionResetFlag(boolean b) {		motionResetFlag = b;	}	protected boolean getIsSitting() {		return isSitting;	}	protected void setIsSitting(boolean b) {		isSitting = b;	}	protected boolean getIsSleeping() {		Object owner = getOwner();		return (owner != null				&& isEntityPlayer(owner)				&& Modchu_AS.getBoolean(Modchu_AS.entityPlayerIsPlayerSleeping, owner))				| sleeping;	}	protected void setIsSleeping(boolean b) {		sleeping = b;	}	protected boolean[] getActionRequest() {		return actionRequest;	}	protected void setActionRequest(boolean[] b) {		actionRequest = b;	}	protected int getActionRequestNumber() {		return actionRequestNumber;	}	protected void setActionRequestNumber(int i) {		if (actionRequestNumber != i) {			actionRequestNumber = i;			//Modchu_Debug.mDebug("setActionRequestNumber i="+i);		} else {			//Modchu_Debug.mDebug("setActionRequestNumber else i="+i);		}	}	protected int getRunActionNumber() {		if (runActionNumber != getActionReleaseNumber()) {			actionReleaseRun();			setActionReleaseNumber(runActionNumber);		}		return runActionNumber;	}	protected boolean setRunActionNumber(int i) {		if (runActionNumber != i) {			actionReleaseRun();			runActionNumber = i;			setActionReleaseNumber(i);			//Modchu_Debug.mDebug("setRunActionNumber i="+i);		} else {			//Modchu_Debug.mDebug("setRunActionNumber else i="+i);		}		setActionRequest(new boolean[]{ false, false });		return true;	}	protected int getActionReleaseNumber() {		return actionReleaseNumber;	}	protected void setActionReleaseNumber(int i) {		//Modchu_Debug.mDebug("setActionReleaseNumber i="+i);		if (i != actionReleaseNumber) {			actionReleaseNumber = i;		}	}	protected boolean getResetActionNumberFlag() {		return false;	}	protected void setResetActionNumberFlag(boolean b) {	}	protected void actionReleaseRun() {		int i = getActionReleaseNumber();		actionReleaseRun(i);	}	protected void actionReleaseRun(int i) {		//Modchu_Debug.mDebug("actionReleaseRun() i="+i);		if (i > 0) {			//Modchu_Debug.mDebug("actionReleaseRun() i="+i);			setCapsValue(caps_actionRelease, i);			actionReleaseNumber = 0;		}	}	protected boolean getActionFlag() {		return actionFlag;	}	protected void setActionFlag(boolean b) {		actionFlag = b;	}	protected int getActionCount() {		return actionCount;	}	protected void setActionCount(int i) {		actionCount = i;	}	protected int getActionTime() {		return actionTime;	}	protected void setActionTime(int i) {		actionTime = i;	}	protected float getActionSpeed() {		return actionSpeed;	}	protected void setActionSpeed(float f) {		actionSpeed = f;	}	protected boolean getMotionSetFlag() {		return motionSetFlag;	}	protected void setMotionSetFlag(boolean b) {		motionSetFlag = b;	}	protected int getSkinMode() {		return skinMode;	}	protected void setSkinMode(int i) {		skinMode = i;	}	protected byte getEntityType() {		return entityType;	}	protected void setEntityType(byte b) {		entityType = b;	}	protected boolean getOldwalking() {		return Modchu_CastHelper.Boolean(getFreeVariable("oldwalking"));	}	protected void setOldwalking(boolean b) {		setFreeVariable("oldwalking", b);	}	protected boolean getFirstPerson() {		return Modchu_CastHelper.Boolean(getFreeVariable("firstPerson"));	}	protected void setFirstPerson(boolean b) {		setFreeVariable("firstPerson", b);	}	protected Object getFreeVariable(String s) {		return freeVariableMap != null				&& freeVariableMap.containsKey(s) ? freeVariableMap.get(s) : null;	}	protected void setFreeVariable(String s, Object o) {		if (freeVariableMap != null) ;else freeVariableMap = new ConcurrentHashMap();		if (o != null) freeVariableMap.put(s, o);		else if (freeVariableMap.containsKey(s)) freeVariableMap.remove(s);	}	protected ConcurrentHashMap<String, Boolean> getDefaultShowPartsMap(int i) {		return ModchuModel_Config.getDefaultShowPartsMap(getTextureName(), i);	}	protected boolean getDefaultShowPartsMapBoolean(String s, int i) {		return ModchuModel_Config.getDefaultShowPartsMapBoolean(getTextureName(), s, i);	}	protected void putDefaultShowPartsMap(String s, int i, boolean b) {		ModchuModel_Config.putDefaultShowPartsMap(getTextureName(), s, i, b);	}	protected ConcurrentHashMap<String, Boolean> getShowPartsMap(int i) {		return ModchuModel_Config.getConfigShowPartsMap(getTextureName(), getMaidColor(), i);	}	protected int getShowPartsMapBoolean(String s, int i) {		return ModchuModel_Config.getConfigShowPartsMapBoolean(getTextureName(), s, getMaidColor(), i);	}	protected int getShowModelSettingBoolean(Modchu_ModelRenderer modelRenderer, int i) {		ConcurrentHashMap<Modchu_ModelRenderer, Boolean> modelRendererBooleanMap = (ConcurrentHashMap<Modchu_ModelRenderer, Boolean>) getCapsValue(caps_freeVariable, "modelRendererBooleanMap");		if (modelRendererBooleanMap != null) ;else modelRendererBooleanMap = new ConcurrentHashMap();		if (modelRendererBooleanMap.containsKey(modelRenderer)) return modelRendererBooleanMap.get(modelRenderer) ? 1 : 0;		int i1 = -1;		String textureName = getTextureName();		ConcurrentHashMap<String, Boolean> showPartsMap = ModchuModel_Config.getConfigShowPartsMap(textureName, getMaidColor(), i);		Object model = getModel(i);		if (model != null) ;else {			//Modchu_Debug.mDebug("getShowModelSettingBoolean model == null !!");			return i1;		}		ConcurrentHashMap<String, Field> modelRendererMap = ModchuModel_Config.getConfigModelRendererMap(model, textureName, i);		if (modelRendererMap != null) ;else return -1;		if (showPartsMap != null				&& !showPartsMap.isEmpty()) {			i1 = getShowModelSettingBoolean(modelRenderer, modelRendererMap, showPartsMap, i);		}		modelRendererBooleanMap.put(modelRenderer, i1 != 0 ? true : false);		setCapsValue(caps_freeVariable, "modelRendererBooleanMap", modelRendererBooleanMap);		return i1;	}	protected int getShowModelSettingBoolean(Modchu_ModelRenderer modelRenderer, ConcurrentHashMap<String, Field> modelRendererMap, ConcurrentHashMap<String, Boolean> map, int i) {		Object model = getModel(i);		if (model != null) ;else {			//Modchu_Debug.mDebug("getShowModelSettingBoolean model == null !!");			return -1;		}		Field f = null;		Modchu_ModelRenderer tempModelRenderer = null;		for (Entry<String, Boolean> en : map.entrySet()) {			String s2 = en.getKey();			boolean b = en.getValue();			if (modelRendererMap.containsKey(s2)) f = modelRendererMap.get(s2);			else f = null;			//Modchu_Debug.mDebug("getShowModelSettingBoolean s2="+s2+" b="+b);			if (f != null) {				//Modchu_Debug.mDebug("getShowModelSettingBoolean f != null");				try {					Object o = f.get(model);					tempModelRenderer = o != null ? (Modchu_ModelRenderer) o : null;					if (tempModelRenderer != null							&& tempModelRenderer.equals(modelRenderer)) {						return b ? 1 : 0;					}				} catch (Exception e) {					//e.printStackTrace();				}			}		}		return -1;	}	/**	 * GUI パーツ表示・非表示反映	 */	protected void showModelSettingReflects(int i) {		//Modchu_Debug.mDebug("showModelSettingReflects i="+i);		ConcurrentHashMap<String, Boolean> showPartsMap = ModchuModel_Config.getConfigShowPartsMap(getTextureName(), getMaidColor(), i);		ConcurrentHashMap<String, Boolean> defaultShowPartsMap = getDefaultShowPartsMap(i);		Object model = getModel(i);		if (model != null) ;else {			//Modchu_Debug.mDebug("showModelSettingReflects model == null !!");			return;		}		String textureName = getTextureName();		ConcurrentHashMap<String, Field> modelRendererMap = ModchuModel_Config.getConfigModelRendererMap(model, textureName, i);		//Modchu_Debug.mDebug("showModelSettingReflects textureName="+textureName+" modelRendererMap != null ?"+(modelRendererMap != null));		if (modelRendererMap != null) ;else return;		if (defaultShowPartsMap != null) settingReflects(modelRendererMap, defaultShowPartsMap, null, null, i);		ConcurrentHashMap<String, Boolean> indexOfAllSetVisibleBooleanMap = ModchuModel_Config.getIndexOfAllSetVisibleBooleanMap(textureName, i);		if (showPartsMap != null				&& !showPartsMap.isEmpty()) settingReflects(modelRendererMap, showPartsMap, ModchuModel_Config.getIndexOfAllSetVisibleMap(textureName, i), indexOfAllSetVisibleBooleanMap, i);	}	protected void settingReflects(ConcurrentHashMap<String, Field> modelRendererMap, ConcurrentHashMap<String, Boolean> map,			ConcurrentHashMap<String, List<String>> indexOfAllSetVisibleMap, ConcurrentHashMap<String, Boolean> indexOfAllSetVisibleBooleanMap, int i) {		Object model = getModel(i);		if (model != null) ;else {			//Modchu_Debug.mDebug("settingReflects model == null !!");			return;		}		Field f = null;		Modchu_ModelRenderer modelRenderer = null;		for (Entry<String, Boolean> en : map.entrySet()) {			String s2 = en.getKey();			boolean b = en.getValue();			f = modelRendererMap.containsKey(s2) ? modelRendererMap.get(s2) : null;			//Modchu_Debug.mDebug("settingReflects s2="+s2+" b="+b);			if (f != null) {				//Modchu_Debug.mDebug("settingReflects f != null");				try {					Object o = f.get(model);					modelRenderer = o != null ? (Modchu_ModelRenderer) o : null;					if (modelRenderer != null) {						((MultiModelBaseBiped) model).setCapsValue(caps_visible, modelRenderer, b, true);						if (ModchuModel_Main.ngPlayerModelList != null								&& !ModchuModel_Main.ngPlayerModelList.contains(getTextureName())) ModchuModel_Main.ngPlayerModelList.add(getTextureName());					}				} catch (Exception e) {					//e.printStackTrace();				}			}		}		if (indexOfAllSetVisibleMap != null				&& !indexOfAllSetVisibleMap.isEmpty()) {			for (Entry<String, List<String>> en : indexOfAllSetVisibleMap.entrySet()) {				String s2 = en.getKey();				List<String> list = en.getValue();				f = modelRendererMap.containsKey(s2) ? modelRendererMap.get(s2) : null;				//Modchu_Debug.mDebug("settingReflects indexOfAllSetVisibleMap s2="+s2);				if (f != null) {					//Modchu_Debug.mDebug("settingReflects indexOfAllSetVisibleMap f != null");					try {						Object o = f.get(model);						modelRenderer = o != null ? (Modchu_ModelRenderer) o : null;						if (modelRenderer != null) {							boolean b = modelRenderer.showModel;							for(String s3 : list) {								f = modelRendererMap.containsKey(s3) ? modelRendererMap.get(s3) : null;								//Modchu_Debug.mDebug("settingReflects indexOfAllSetVisibleList s2="+s2);								if (f != null) {									//Modchu_Debug.mDebug("settingReflects indexOfAllSetVisibleList f != null");									try {										o = f.get(model);										modelRenderer = o != null ? (Modchu_ModelRenderer) o : null;										if (modelRenderer != null) {											((MultiModelBaseBiped) model).setCapsValue(caps_visible, modelRenderer, b, true);										}									} catch (Exception e) {									}								}							}						}					} catch (Exception e) {					}				}			}		}		if (indexOfAllSetVisibleBooleanMap != null				&& !indexOfAllSetVisibleBooleanMap.isEmpty()) {			for (Entry<String, Boolean> en : indexOfAllSetVisibleBooleanMap.entrySet()) {				String s2 = en.getKey();				boolean b = en.getValue();				for (Entry<String, Field> en2 : modelRendererMap.entrySet()) {					String s3 = en2.getKey();					f = en2.getValue();					if (s3.indexOf(s2) < 0) continue;					//Modchu_Debug.mDebug("settingReflects indexOfAllSetVisibleBooleanMap s3="+s3);					if (f != null) {						//Modchu_Debug.mDebug("settingReflects indexOfAllSetVisibleBooleanMap f != null");						try {							Object o = f.get(model);							modelRenderer = o != null ? (Modchu_ModelRenderer) o : null;							if (modelRenderer != null) {								((MultiModelBaseBiped) model).setCapsValue(caps_visible, modelRenderer, b, true);							}						} catch (Exception e) {						}					}				}			}		}	}	/**	 * indexOfで検索対象のパーツをまとめて指定パーツと同じ状態にセットするListへの追加	 */	protected void indexOfAllSetVisible(String s, int i) {		Object model = getModel(i);		if (model != null) ;else {			//Modchu_Debug.mDebug("settingReflects model == null !!");			return;		}		if (model instanceof MultiModelBaseBiped) ;else {			//Modchu_Debug.mDebug("settingReflects model != MultiModelBaseBiped !!");			return;		}		MultiModelBaseBiped model1 = (MultiModelBaseBiped) model;		String textureName = getTextureName();		List<String> indexOfAllSetVisibleList = ModchuModel_Config.getIndexOfAllSetVisibleMap(textureName, s, i);		ConcurrentHashMap<String, Field> modelRendererMap = ModchuModel_Config.getConfigModelRendererMap(model1, textureName, i);		if (modelRendererMap != null				&& modelRendererMap.containsKey(s)) ;else return;		Field f = modelRendererMap.get(s);		if (f != null) ;else return;		try {			Object o = f.get(model1);			if (o != null) ;else return;			boolean b = ((Modchu_ModelRenderer) o).showModel;			for (Entry<String, Field> en : modelRendererMap.entrySet()) {				String s0 = en.getKey();				if (s0 != null						&& s0.indexOf(s) > -1) {					if (!indexOfAllSetVisibleList.contains(s0)							&& !s0.equals(s)) {						indexOfAllSetVisibleList.add(s0);						//Modchu_Debug.mDebug("indexOfAllSetVisible add s0="+s0);						ModchuModel_Config.setIndexOfAllSetVisibleMap(getTextureName(), s, i, indexOfAllSetVisibleList);					}				}			}		} catch (Exception e1) {			e1.printStackTrace();		}	}	/**	 * indexOfで検索対象のパーツをまとめて指定booleanにセットするListへの追加	 */	protected void indexOfAllSetVisible(String s, int i, boolean b) {		String textureName = getTextureName();		ConcurrentHashMap<String, Boolean> indexOfAllSetVisibleBooleanMap = ModchuModel_Config.getIndexOfAllSetVisibleBooleanMap(textureName, i);		indexOfAllSetVisibleBooleanMap.put(s, b);		ModchuModel_Config.setIndexOfAllSetVisibleBooleanMap(textureName, i, indexOfAllSetVisibleBooleanMap);/*		ConcurrentHashMap<Integer, String> nemeMap = ModchuModel_Config.getConfigShowPartsNemeMap(s, i);		MultiModelBaseBiped model = (MultiModelBaseBiped) getModel(i);		ConcurrentHashMap<String, Field> modelRendererMap = ModchuModel_Config.getConfigModelRendererMap(model, textureName, i);		if (nemeMap != null) ;else return;		String s0 = null;		for(int i1 = 0; i1 < nemeMap.size(); i1++) {			s0 = nemeMap.get(i1);			if (s0.indexOf(s) > -1) {				try {					model.setCapsValue(caps_visible, (ModchuModel_ModelRenderer) modelRendererMap.get(s0).get(model), b);				} catch (Exception e) {					e.printStackTrace();				}			}		}*/	}	protected String getModelRendererName(Modchu_ModelRenderer modelRenderer, int i) {		Modchu_ModelRenderer modelRenderer2;		Object model = getModel(i);		if (model != null) ;else {			//Modchu_Debug.mDebug("getModelRendererName model == null !!");			return null;		}		Object o;		String textureName = getTextureName();		for (Entry<String, Field> en : ModchuModel_Config.getConfigModelRendererMap(model, textureName, i).entrySet()) {			String s = en.getKey();			Field f = en.getValue();			o = null;			//Modchu_Debug.mDebug("getModelRendererName s="+s);			try {				o = f.get(model);			} catch (Exception e) {				e.printStackTrace();			}			if (o != null) {				modelRenderer2 = (Modchu_ModelRenderer) o;				if (modelRenderer2.equals(modelRenderer)) {					return s;				}			}		}		return null;	}	private int getInitFlag() {		return initFlag;	}	private void setInitFlag(int i) {		initFlag = i;	}	private boolean getAllMultiModelActionModeCheck() {		switch(getAllMultiModelActionMode()) {		case 0:			return false;		case 1:			return true;		case 2:			return getCapsValueBoolean(caps_isPlayer) ? false : true;		}		return false;	}	protected Object getModel(int i) {		Object owner = getOwner();		if (owner != null) ;else {			return null;		}		int version = Modchu_Main.getMinecraftVersion();		Class c = version < 170 ? Modchu_Reflect.loadClass("LMM_EntityLittleMaid") : Modchu_Reflect.loadClass("mmm.littleMaidMob.entity.EntityLittleMaidBase");		if (c != null				&& c.isInstance(owner)) {			if (version < 170) {				Object textureData = Modchu_Reflect.getFieldObject(owner.getClass(), "textureData", owner);				if (textureData != null) {					Object[] textureBox = Modchu_CastHelper.ObjectArray(Modchu_Reflect.getFieldObject(textureData.getClass(), "textureBox", textureData));					if (textureBox != null) {						Class MMM_TextureBoxServer = Modchu_Reflect.loadClass("MMM_TextureBoxServer");						if (MMM_TextureBoxServer != null								&& MMM_TextureBoxServer.isInstance(textureBox[0])) ;else {							Object[] models = Modchu_CastHelper.ObjectArray(Modchu_Reflect.getFieldObject(textureBox[0].getClass(), "models", textureBox[0], Modchu_Main.isRelease() ? -1 : 0));							return models != null									&& i < models.length ? models[i] : null;						}					}				}			} else {				Object multiModel = Modchu_Reflect.getFieldObject(owner.getClass(), "multiModel", owner);				if (multiModel != null) {					Object[] model = Modchu_CastHelper.ObjectArray(Modchu_Reflect.getFieldObject(multiModel.getClass(), "model", multiModel));					if (model != null) {						Object[] models = Modchu_CastHelper.ObjectArray(Modchu_Reflect.invokeMethod(model.getClass(), "getModelClass", new Class[]{ int.class }, model, new Object[]{ getMaidColor() }));						return models != null								&& i < models.length ? models[i] : null;					}				}			}		} else {			Modchu_Debug.mDebug("getModel !c.isInstance owner="+owner);		}		return null;	}	protected String getTextureName() {		Object owner = getOwner();		int version = Modchu_Main.getMinecraftVersion();		Class c = version < 170 ? Modchu_Reflect.loadClass("LMM_EntityLittleMaid") : Modchu_Reflect.loadClass("mmm.littleMaidMob.entity.EntityLittleMaidBase");		if (c != null				&& c.isInstance(owner)) {			if (version > 169) {				Object multiModel = Modchu_Reflect.getFieldObject(owner.getClass(), "multiModel", owner);				if (multiModel != null) return Modchu_CastHelper.String(Modchu_Reflect.getFieldObject(multiModel.getClass(), "modelName", multiModel));			} else {				Object textureData = Modchu_Reflect.getFieldObject(owner.getClass(), "textureData", owner);				if (textureData != null) {					Object[] textureBox = Modchu_CastHelper.ObjectArray(Modchu_Reflect.getFieldObject(textureData.getClass(), "textureBox", textureData));					Class MMM_TextureBoxServer = Modchu_Reflect.loadClass("MMM_TextureBoxServer");					if (MMM_TextureBoxServer != null							&& MMM_TextureBoxServer.isInstance(textureBox[0])) ;else {						if (textureBox != null) return Modchu_CastHelper.String(Modchu_Reflect.getFieldObject("MMM_TextureBoxBase", "textureName", textureBox[0], Modchu_Main.isRelease() ? -1 : 0));					}				}			}		}		return textureName;	}	protected void setTextureName(String s) {		Object owner = getOwner();		int version = Modchu_Main.getMinecraftVersion();		Class c = version < 170 ? Modchu_Reflect.loadClass("LMM_EntityLittleMaid") : Modchu_Reflect.loadClass("mmm.littleMaidMob.entity.EntityLittleMaidBase");		if (c != null				&& c.isInstance(owner)) {			if (version > 169) {				Object multiModel = Modchu_Reflect.getFieldObject(owner.getClass(), "multiModel", owner);				if (multiModel != null) Modchu_Reflect.setFieldObject(multiModel.getClass(), "modelName", multiModel, s);			} else {				Object textureData = Modchu_Reflect.getFieldObject(owner.getClass(), "textureData", owner);				if (textureData != null) {					Object[] textureBox = Modchu_CastHelper.ObjectArray(Modchu_Reflect.getFieldObject(textureData.getClass(), "textureBox", textureData));					Class MMM_TextureBoxServer = Modchu_Reflect.loadClass("MMM_TextureBoxServer");					if (MMM_TextureBoxServer != null							&& MMM_TextureBoxServer.isInstance(textureBox[0])) ;else {						if (textureBox != null) Modchu_Reflect.setFieldObject("MMM_TextureBoxBase", "textureName", textureBox[0], s, Modchu_Main.isRelease() ? -1 : 0);					}				}			}			//else {				//Modchu_CastHelper.ObjectArray(Modchu_Reflect.getFieldObject("LMM_EntityLittleMaid", "textures", owner))[0] = s;			//}		}		textureName = s;	}	protected String getTextureArmorName() {		Object owner = getOwner();		int version = Modchu_Main.getMinecraftVersion();		Class c = version < 170 ? Modchu_Reflect.loadClass("LMM_EntityLittleMaid") : Modchu_Reflect.loadClass("mmm.littleMaidMob.entity.EntityLittleMaidBase");		if (c != null				&& c.isInstance(owner)) {			if (version > 169) {				Object multiModel = Modchu_Reflect.getFieldObject(owner.getClass(), "multiModel", owner);				if (multiModel != null) return Modchu_CastHelper.String(Modchu_Reflect.getFieldObject(multiModel.getClass(), "armorName", multiModel));			} else {				Object textureData = Modchu_Reflect.getFieldObject(owner.getClass(), "textureData", owner);				if (textureData != null) {					Object[] textureBox = Modchu_CastHelper.ObjectArray(Modchu_Reflect.getFieldObject(textureData.getClass(), "textureBox", textureData));					Class MMM_TextureBoxServer = Modchu_Reflect.loadClass("MMM_TextureBoxServer");					if (MMM_TextureBoxServer != null							&& MMM_TextureBoxServer.isInstance(textureBox[1])) ;else {						if (textureBox != null) return Modchu_CastHelper.String(Modchu_Reflect.getFieldObject(textureBox[1].getClass(), "textureName", textureBox[1], Modchu_Main.isRelease() ? -1 : 0));					}				}			}			//else {				//return Modchu_CastHelper.String(Modchu_CastHelper.ObjectArray(Modchu_Reflect.getFieldObject("LMM_EntityLittleMaid", "textureArmor1", owner))[0]);			//}		}		return modelArmorName;	}	protected void setTextureArmorName(String s) {		Object owner = getOwner();		int version = Modchu_Main.getMinecraftVersion();		Class c = version < 170 ? Modchu_Reflect.loadClass("LMM_EntityLittleMaid") : Modchu_Reflect.loadClass("mmm.littleMaidMob.entity.EntityLittleMaidBase");		if (c != null				&& c.isInstance(owner)) {			if (version > 169) {				Object multiModel = Modchu_Reflect.getFieldObject(owner.getClass(), "multiModel", owner);				if (multiModel != null) Modchu_Reflect.setFieldObject(multiModel.getClass(), "armorName", multiModel, s);			} else if (version > 159) {				Object textureData = Modchu_Reflect.getFieldObject(owner.getClass(), "textureData", owner);				if (textureData != null) {					Object[] textureBox = Modchu_CastHelper.ObjectArray(Modchu_Reflect.getFieldObject(textureData.getClass(), "textureBox", textureData));/*					Class MMM_TextureBoxServer = Modchu_Reflect.loadClass("MMM_TextureBoxServer");					if (MMM_TextureBoxServer != null							&& MMM_TextureBoxServer.isInstance(textureBox[1])) ;else {						if (textureBox != null) Modchu_Reflect.setFieldObject(textureBox[1].getClass(), "textureName", textureBox[1], s, Modchu_Main.isRelease() ? -1 : 0);					}*/				}			} else {			}		}		modelArmorName = s;	}	protected int getMaidColor() {		Object owner = getOwner();		int version = Modchu_Main.getMinecraftVersion();		Class c = version < 170 ? Modchu_Reflect.loadClass("LMM_EntityLittleMaid") : Modchu_Reflect.loadClass("mmm.littleMaidMob.entity.EntityLittleMaidBase");		if (c != null				&& c.isInstance(owner)) {			if (version > 169) {				Object multiModel = Modchu_Reflect.getFieldObject(owner.getClass(), "multiModel", owner);				if (multiModel != null) return Modchu_CastHelper.Int(Modchu_Reflect.getFieldObject(multiModel.getClass(), "color", multiModel));			} else if (version > 159) {				Object textureData = Modchu_Reflect.getFieldObject(owner.getClass(), "textureData", owner);				if (textureData != null) {					return Modchu_CastHelper.Int(Modchu_Reflect.getFieldObject(textureData.getClass(), "color", textureData));				}			} else {				return Modchu_CastHelper.Int(Modchu_Reflect.getFieldObject("LMM_EntityLittleMaid", "maidColor", owner));			}		}		return maidColor;	}	protected void setMaidColor(int i) {		Object owner = getOwner();		int version = Modchu_Main.getMinecraftVersion();		Class c = version < 170 ? Modchu_Reflect.loadClass("LMM_EntityLittleMaid") : Modchu_Reflect.loadClass("mmm.littleMaidMob.entity.EntityLittleMaidBase");		if (c != null				&& c.isInstance(owner)) {			if (version < 170) {				Object textureData = Modchu_Reflect.getFieldObject(owner.getClass(), "textureData", owner);				if (textureData != null) {					Modchu_Reflect.setFieldObject(textureData.getClass(), "color", textureData, i);				}			} else {				Object multiModel = Modchu_Reflect.getFieldObject(owner.getClass(), "multiModel", owner);				if (multiModel != null) Modchu_Reflect.setFieldObject(multiModel.getClass(), "color", multiModel, i);			}		}		maidColor = i;	}	public static int getAllMultiModelActionRequestNumber() {		return allMultiModelActionRequestNumber;	}	public static void setAllMultiModelActionRequestNumber(int i) {		allMultiModelActionRequestNumber = i;	}	public static int getAllMultiModelActionMode() {		return allMultiModelActionMode;	}	public static int getAllMultiModelActionMax() {		return allMultiModelActionMax;	}	public static void setAllMultiModelActionModePlus() {		allMultiModelActionMode++;		if (allMultiModelActionMode > allMultiModelActionModeMax) allMultiModelActionMode = 0;		return;	}	public static void setAllMultiModelActionModeMinus() {		allMultiModelActionMode--;		if (allMultiModelActionMode < 0) allMultiModelActionMode = allMultiModelActionModeMax;		return;	}	public static void setAllMultiModelActionPlus() {		allMultiModelActionRequestNumber++;		if (allMultiModelActionRequestNumber > allMultiModelActionMax) allMultiModelActionRequestNumber = 0;		return;	}	public static void setAllMultiModelActionMinus() {		allMultiModelActionRequestNumber--;		if (allMultiModelActionRequestNumber < 0) allMultiModelActionRequestNumber = allMultiModelActionMax;		return;	}	public static void setAllMultiModelActionMode(int i) {		allMultiModelActionMode = i;		if (allMultiModelActionMode > allMultiModelActionModeMax				| allMultiModelActionMode < 0) allMultiModelActionMode = 0;		return;	}	public static int getAllMultiModelActionModeMax() {		return allMultiModelActionModeMax;	}	public static boolean getAllMultiModelActionFlag() {		return allMultiModelActionFlag;	}	public static void setAllMultiModelActionFlag(boolean b) {		allMultiModelActionFlag = b;	}	public static String getAllMultiModelActionModeName(int i) {		String s = null;		switch (i) {		case 0:			s = "false";			break;		case 1:			s = "All";			break;		case 2:			s = "PlayersOther";			break;		}		return s;	}	protected Object getOwner() {		//Modchu_Debug.mDebug("getOwner "+Modchu_Reflect.getFieldObject(subEntityCaps != null ? subEntityCaps.getClass() : getClass(), "owner", subEntityCaps != null ? subEntityCaps : this));		return Modchu_Reflect.getFieldObject(subEntityCaps != null ? subEntityCaps.getClass() : getClass(), "owner", subEntityCaps != null ? subEntityCaps : this, -1);	}	protected boolean isEntityPlayer(Object entity) {		return entity != null				&& Modchu_Reflect.loadClass("EntityPlayer").isInstance(entity);	}	protected List<String> getShowPartsHideList() {		return showPartsHideList;	}	/**	 * GUI パーツ表示・非表示用 ボタン非表示リスト追加	 */	protected void addShowPartsHideList(String[] s) {		//Modchu_Debug.mDebug("addShowPartsHideList s.length="+s.length);		for(int i = 0; i < s.length; i++) {			showPartsHideList.add(s[i]);		}	}	protected ConcurrentHashMap<String, String> getShowPartsRenemeMap() {		return showPartsRenemeMap;	}	/**	 * GUI パーツ表示・非表示用 ボタン表示名リネーム用追加	 */	protected void addShowPartsRenemeMap(String[] s1, String[] s2) {		for(int i = 0; i < s1.length && i < s2.length; i++) {			showPartsRenemeMap.put(s1[i], s2[i]);		}	}	public int getCapsValueInt(int pIndex, Object ...pArg) {		Object o = getCapsValue((MultiModelBaseBiped)null, pIndex, pArg);		if (o instanceof Boolean) {			boolean b = (Boolean) o;			return b ? 2 : 1;		}		return o != null ? (Integer) o : 0;	}	public float getCapsValueFloat(int pIndex, Object ...pArg) {		Object o = getCapsValue((MultiModelBaseBiped)null, pIndex, pArg);		return o != null ? (Float) o : 0.0F;	}	public double getCapsValueDouble(int pIndex, Object ...pArg) {		Object o = getCapsValue((MultiModelBaseBiped)null, pIndex, pArg);		return o != null ? (Double) o : 0.0D;	}	public boolean getCapsValueBoolean(int pIndex, Object ...pArg) {		Object o = getCapsValue((MultiModelBaseBiped)null, pIndex, pArg);		return o != null ? (Boolean) o : false;	}	public boolean[] getCapsValueBooleanArray(int pIndex, Object ...pArg) {		Object o = getCapsValue((MultiModelBaseBiped)null, pIndex, pArg);		return o != null ? (boolean[]) o : null;	}}