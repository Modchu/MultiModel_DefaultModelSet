package modchu.model.multimodel.base;import java.lang.reflect.Field;import java.util.HashMap;import java.util.List;import java.util.concurrent.ConcurrentHashMap;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_Main;import modchu.lib.Modchu_EntityCapsHelper;import modchu.lib.Modchu_Reflect;import modchu.lib.characteristic.Modchu_CastHelper;import modchu.lib.characteristic.Modchu_ModelRenderer;import modchu.model.ModchuModel_Config;import modchu.model.ModchuModel_IEntityCaps;import modchu.model.ModchuModel_MotionData;import modchu.model.ModchuModel_MotionDataMaster;/** * Action機能追加用class */public abstract class MultiModelAction extends MultiModelBaseBiped {	public Modchu_ModelRenderer rightArm;	public Modchu_ModelRenderer rightArm2;	public Modchu_ModelRenderer rightArmPlus;	public Modchu_ModelRenderer rightArmPlus2;	public Modchu_ModelRenderer rightHand;	public Modchu_ModelRenderer rightLeg;	public Modchu_ModelRenderer rightLeg2;	public Modchu_ModelRenderer rightLegPlus;	public Modchu_ModelRenderer rightLegPlus2;	public Modchu_ModelRenderer leftArm;	public Modchu_ModelRenderer leftArm2;	public Modchu_ModelRenderer leftArmPlus;	public Modchu_ModelRenderer leftArmPlus2;	public Modchu_ModelRenderer leftHand;	public Modchu_ModelRenderer leftLeg;	public Modchu_ModelRenderer leftLeg2;	public Modchu_ModelRenderer leftLegPlus;	public Modchu_ModelRenderer leftLegPlus2;	public Modchu_ModelRenderer lowerBody;	public Modchu_ModelRenderer upperBody;	public Modchu_ModelRenderer hip;	public Modchu_ModelRenderer rightShoulder;	public Modchu_ModelRenderer leftShoulder;	public Modchu_ModelRenderer center;	public Modchu_ModelRenderer leftLegIK;	public Modchu_ModelRenderer rightLegIK;	public HashMap<String, String> motionRenameMap;	//private ModchuModel_MotionData motionData;	//private ConcurrentHashMap<Integer, ConcurrentHashMap> motionDataMap;	private ConcurrentHashMap<String, Modchu_ModelRenderer> stringModelRendererMap;	private List<Object[]> tempMotionDataList;	private boolean debug = false;	private boolean debugReload = false;	private boolean actionInit6Init = false;	/**	 * コンストラクタは全て継承させること	 */	public MultiModelAction() {		this(0.0F);	}	/**	 * コンストラクタは全て継承させること	 */	public MultiModelAction(float psize) {		this(psize, 0.0F);	}	/**	 * コンストラクタは全て継承させること	 */	public MultiModelAction(float psize, float pyoffset) {		this(psize, pyoffset, 64, 32);	}	public MultiModelAction(float psize, float pyoffset, int par3, int par4, Object... o) {		super(psize, pyoffset, par3 < 0 ? 64 : par3, par4 < 0 ? 32 : par4, (Object[]) o);	}	@Override	public void afterInit(float f, float f1) {		armsinit(f, f1);		bonesInit(f, f1);		actionPartsInit(f, f1);		defaultAddChild();	}	/**	 * action用手足分割パーツ初期化	 */	public void actionPartsInit(float f, float f1) {	}	/**	 * action用ボーンパーツ初期化	 */	public void bonesInit(float f, float f1) {		lowerBody = new Modchu_ModelRenderer(this);		upperBody = new Modchu_ModelRenderer(this);		hip = new Modchu_ModelRenderer(this);		rightShoulder = new Modchu_ModelRenderer(this);		leftShoulder = new Modchu_ModelRenderer(this);		center = new Modchu_ModelRenderer(this);		leftLegIK = new Modchu_ModelRenderer(this);		rightLegIK = new Modchu_ModelRenderer(this);	}	/**	 * ショートカットアクション時に呼ばれる	 */	public void actionInit(ModchuModel_IEntityCaps entityCaps, int i) {		Modchu_Debug.mDebug("actionInit i="+i);		Modchu_Reflect.invokeMethod(MultiModelAction.class, "actionInit"+i, new Class[]{ ModchuModel_IEntityCaps.class }, this, new Object[]{ entityCaps }, -1);	}	/**	 * アクション初めに一度呼ばれる。アクション用のパーツがある場合ここで準備する	 */	public void actionPartsAddChild() {		boolean b = false;		if (bipedLeftArm != null) setCapsValue(null, caps_visible, bipedLeftArm, b);		if (bipedRightArm != null) setCapsValue(null, caps_visible, bipedRightArm, b);		if (bipedLeftLeg != null) setCapsValue(null, caps_visible, bipedLeftLeg, b);		if (bipedRightLeg != null) setCapsValue(null, caps_visible, bipedRightLeg, b);		b = true;		if (rightArm != null) setCapsValue(null, caps_visible, rightArm, b);		if (rightArm2 != null) setCapsValue(null, caps_visible, rightArm2, b);		if (rightHand != null) setCapsValue(null, caps_visible, rightHand, b);		if (leftArm != null) setCapsValue(null, caps_visible, leftArm, b);		if (leftArm2 != null) setCapsValue(null, caps_visible, leftArm2, b);		if (leftHand != null) setCapsValue(null, caps_visible, leftHand, b);		if (rightLeg != null) setCapsValue(null, caps_visible, rightLeg, b);		if (rightLeg2 != null) setCapsValue(null, caps_visible, rightLeg2, b);		if (leftLeg != null) setCapsValue(null, caps_visible, leftLeg, b);		if (leftLeg2 != null) setCapsValue(null, caps_visible, leftLeg2, b);		if (bipedRightArm != null && bipedRightArm instanceof Modchu_ModelRenderer) {			bipedRightArm.removeChild((Modchu_ModelRenderer) Arms[0]);		}		if (bipedLeftArm != null && bipedLeftArm instanceof Modchu_ModelRenderer) {			bipedLeftArm.removeChild((Modchu_ModelRenderer) Arms[1]);		}		if (rightArm != null) {			if (rightArmPlus != null) rightArm.addChild(rightArmPlus);			if (rightArm2 != null) {				rightArm.addChild(rightArm2);				if (rightHand != null) {					rightArm2.addChild(rightHand);					if (Arms[0] != null) rightHand.addChild(Arms[0]);				}				if (rightArmPlus2 != null) rightArm2.addChild(rightArmPlus2);			}		}		if (leftArm != null) {			if (leftArmPlus != null) leftArm.addChild(leftArmPlus);			if (leftArm2 != null) {				leftArm.addChild(leftArm2);				if (leftHand != null) {					leftArm2.addChild(leftHand);					if (Arms[1] != null) leftHand.addChild(Arms[1]);				}				if (leftArmPlus2 != null) leftArm2.addChild(leftArmPlus2);			}		}		if (rightLeg != null) {			if (rightLegPlus != null) rightLeg.addChild(rightLegPlus);			if (rightLeg2 != null) {				rightLeg.addChild(rightLeg2);				if (rightLegPlus2 != null) rightLeg2.addChild(rightLegPlus2);			}			if (lowerBody != null) lowerBody.addBoneChild(rightLeg);		}		if (leftLeg != null) {			if (leftLegPlus != null) leftLeg.addChild(leftLegPlus);			if (leftLeg != null) {				leftLeg.addChild(leftLeg2);				if (leftLegPlus2 != null) leftLeg2.addChild(leftLegPlus2);			}			if (lowerBody != null) lowerBody.addBoneChild(leftLeg);		}		if (bipedBody != null) {			if (rightArm != null) bipedBody.addChild(rightArm);			if (leftArm != null) bipedBody.addChild(leftArm);			if (rightLeg != null) bipedBody.addChild(rightLeg);			if (leftLeg != null) bipedBody.addChild(leftLeg);		}		if (upperBody != null) {			if (rightLeg != null) upperBody.addBoneSpecialChild(rightLeg);			if (leftLeg != null) upperBody.addBoneSpecialChild(leftLeg);		}		if (lowerBody != null) {			if (rightLeg != null) lowerBody.addBoneChild(rightLeg);			if (leftLeg != null) lowerBody.addBoneChild(leftLeg);		}		if (hip != null) {			if (rightLeg != null) hip.addBoneChild(rightLeg);			if (leftLeg != null) hip.addBoneChild(leftLeg);		}		if (rightShoulder != null) {			if (rightArm != null) rightShoulder.addBoneChild(rightArm);		}		if (leftShoulder != null) {			if (leftArm != null) leftShoulder.addBoneChild(leftArm);		}		if (center != null) {			if (rightLeg != null) center.addBoneChild(rightLeg);			if (leftLeg != null) center.addBoneChild(leftLeg);		}		if (leftLegIK != null) {			if (leftLeg != null) leftLegIK.addBoneChild(leftLeg);			if (leftLeg2 != null) leftLegIK.addBoneSpecialChild(leftLeg2);		}		if (rightLegIK != null) {			if (rightLeg != null) rightLegIK.addBoneChild(rightLeg);			if (rightLeg2 != null) rightLegIK.addBoneSpecialChild(rightLeg2);		}	}	public void actionInit1(ModchuModel_IEntityCaps entityCaps) {		//Modchu_Debug.mDebug("actionInit1");		entityCaps.setCapsValue(caps_actionCount, 0);		actionPartsAddChild();		Arms[0].setRotationPoint(0.5F, 0.0F, 0.0F);		Arms[1].setRotationPoint(-0.5F, 0.0F, 0.0F);		//Modchu_Debug.mDebug("actionInit1 entityCaps="+entityCaps);		entityCaps.setCapsValue(caps_freeVariable, "sneakBan", true);		entityCaps.setCapsValue(caps_freeVariable, "waitBan", true);		entityCaps.setCapsValue(caps_freeVariable, "sittingBan", true);		entityCaps.setCapsValue(caps_freeVariable, "aimedBowBan", false);		entityCaps.setCapsValue(caps_freeVariable, "sleepingBan", false);		bipedHead.rotateAngleZ = bipedBody.rotateAngleZ = 0.0F;	}	public void actionInit2(ModchuModel_IEntityCaps entityCaps) {		entityCaps.setCapsValue(caps_actionCount, 0);		entityCaps.setCapsValue(caps_freeVariable, "waitBan", true);		entityCaps.setCapsValue(caps_freeVariable, "sneakBan", false);		entityCaps.setCapsValue(caps_freeVariable, "sittingBan", false);		entityCaps.setCapsValue(caps_freeVariable, "aimedBowBan", false);		entityCaps.setCapsValue(caps_freeVariable, "sleepingBan", false);	}	public void actionInit3(ModchuModel_IEntityCaps entityCaps) {		entityCaps.setCapsValue(caps_freeVariable, "waitBan", true);		entityCaps.setCapsValue(caps_freeVariable, "sneakBan", false);		entityCaps.setCapsValue(caps_freeVariable, "sittingBan", false);		entityCaps.setCapsValue(caps_freeVariable, "aimedBowBan", false);		entityCaps.setCapsValue(caps_freeVariable, "sleepingBan", false);	}	public void actionInit4(ModchuModel_IEntityCaps entityCaps) {		entityCaps.setCapsValue(caps_freeVariable, "waitBan", true);		entityCaps.setCapsValue(caps_freeVariable, "sneakBan", false);		entityCaps.setCapsValue(caps_freeVariable, "sittingBan", false);		entityCaps.setCapsValue(caps_freeVariable, "aimedBowBan", false);		entityCaps.setCapsValue(caps_freeVariable, "sleepingBan", false);	}	public void actionInit5(ModchuModel_IEntityCaps entityCaps) {	}	public void actionInit6(ModchuModel_IEntityCaps entityCaps) {		actionInit1(entityCaps);		String[] s1 = {				"センター", "すべての親", "上半身", "下半身", "左足ＩＫ",				"右足ＩＫ",				"左腕",				"左ひじ", "右腕", "右肩", "左肩", "頭",				"腰", "右ひじ", "左手アイテム", "右手アイテム", "首",				"左足", "左ひざ", "右足", "右ひざ", "スカート前",				"スカート後", "スカート右", "スカート左", "頭アクセサリ", "頭載せアクセサリ"		};		String[] s2 = {				"center", "mainFrame", "upperBody", "lowerBody", "leftLegIK",				"rightLegIK",				"leftArm",				"leftArm2", "rightArm", "rightShoulder", "leftShoulder", "",				"hip", "rightArm2", "Arms[1]", "Arms[0]", "bipedHead",				"leftLeg", "leftLeg2", "rightLeg", "rightLeg2", "SkirtFront",				"SkirtBack", "SkirtRight", "SkirtLeft", "HeadMount", "HeadTop"		};		if (motionRenameMap != null) ;else motionRenameMap = new HashMap();		for (int i = 0; i < s1.length; i++) {			motionRenameMap.put(s1[i], s2[i]);		}		boolean debug = true;		//ConcurrentHashMap<Integer, Integer> dataFrameMap = new ConcurrentHashMap();		ModchuModel_MotionData motionData = ModchuModel_MotionDataMaster.loadMotionData(0, s1, null, null);		if (motionData != null) ;else {			Modchu_Debug.dDebug("action6 data now loading...", 0, 50);			entityCaps.setCapsValue(caps_actionRequest, new boolean[]{ true, false });			return;		}		if (ModchuModel_MotionDataMaster.debugD) Modchu_Debug.debugStringClear();		if (actionInit6Init				&& motionData != null) {			if (debug) Modchu_Debug.mDebug("actionInit6Init true end.");			//return;		}		String s = Modchu_CastHelper.String(Modchu_EntityCapsHelper.getCapsValue(entityCaps, entityCaps.caps_textureName));		int i = Modchu_EntityCapsHelper.getCapsValueInt(this, entityCaps, entityCaps.caps_maidColor);		//nemeMap = PFLM_Config.getConfigShowPartsNemeMap(s, i);		ConcurrentHashMap<String, Field> modelRendererMap = ModchuModel_Config.getConfigModelRendererMap(this, s, i);		List<String> nameList = motionData.getNameList();		String s3 = null;		Field field;		Modchu_ModelRenderer modelRenderer;		for(int i1 = 0; i1 < nameList.size(); i1++) {			s3 = getMotionRenameMap(nameList.get(i1));			if (s3 != null) ;else continue;			field = modelRendererMap.get(s3);			if (field != null) ;else {				if (debug) Modchu_Debug.mDebug("actionInit6 field == null !! s3="+s3);				continue;			}			modelRenderer = (Modchu_ModelRenderer) Modchu_Reflect.getFieldObject(field, this);			if (modelRenderer != null) ;else {				if (debug) Modchu_Debug.mDebug("actionInit6 modelRenderer == null !! s3="+s3);				continue;			}			putStringModelRendererMap(s3, modelRenderer);		}		actionInit6Init = true;		if (debug) Modchu_Debug.mDebug("actionInit6 end.");	}	public void actionInit7(ModchuModel_IEntityCaps entityCaps) {	}	public void actionInit8(ModchuModel_IEntityCaps entityCaps) {	}	public void actionInit9(ModchuModel_IEntityCaps entityCaps) {	}	public void actionInit30(ModchuModel_IEntityCaps entityCaps) {	}	/**	 * ショートカットアクション解除時に呼ばれる。	 */	public void actionRelease(ModchuModel_IEntityCaps entityCaps, int i) {		Modchu_Reflect.invokeMethod(MultiModelAction.class, "actionRelease"+i, new Class[]{ ModchuModel_IEntityCaps.class }, this, new Object[]{ entityCaps }, -1);		entityCaps.setCapsValue(caps_freeVariable, "sneakBan", false);		entityCaps.setCapsValue(caps_freeVariable, "waitBan", false);		entityCaps.setCapsValue(caps_freeVariable, "sittingBan", false);		entityCaps.setCapsValue(caps_freeVariable, "aimedBowBan", false);		entityCaps.setCapsValue(caps_freeVariable, "sleepingBan", false);		entityCaps.setCapsValue(caps_freeVariable, "actionInitNumber", 0);	}	public void actionRelease1(ModchuModel_IEntityCaps entityCaps) {		bipedBody.setRotateAngle(0.0F, 0.0F, 0.0F);		bipedHead.setRotateAngle(0.0F, 0.0F, 0.0F);		bipedHead.setRotationPoint(0.0F, 0.0F, 0.0F);		upperBody.setRotateAngle(0.0F, 0.0F, 0.0F);		lowerBody.setRotateAngle(0.0F, 0.0F, 0.0F);		hip.setRotateAngle(0.0F, 0.0F, 0.0F);		center.setRotateAngle(0.0F, 0.0F, 0.0F);		defaultAddChild();	}	public void actionRelease2(ModchuModel_IEntityCaps entityCaps) {	}	public void actionRelease3(ModchuModel_IEntityCaps entityCaps) {	}	public void actionRelease4(ModchuModel_IEntityCaps entityCaps) {	}	public void actionRelease5(ModchuModel_IEntityCaps entityCaps) {	}	public void actionRelease6(ModchuModel_IEntityCaps entityCaps) {		actionRelease1(entityCaps);		mainFrame.setRotationPoint(0.0F, 0.0F, 0.0F);		mainFrame.setRotateAngle(0.0F, 0.0F, 0.0F);		if (ModchuModel_MotionDataMaster.debugD) Modchu_Debug.debugStringClear();	}	public void actionRelease7(ModchuModel_IEntityCaps entityCaps) {	}	public void actionRelease8(ModchuModel_IEntityCaps entityCaps) {	}	public void actionRelease9(ModchuModel_IEntityCaps entityCaps) {	}	public void actionRelease30(ModchuModel_IEntityCaps entityCaps) {	}	public void action(float f, float f1, float f2, float f3, float f4, float f5, int i, ModchuModel_IEntityCaps entityCaps) {		if (entityCaps != null) ;else {			Modchu_Debug.mDebug("MultiModelAction action i="+i+" entityCaps == null !!");			return;		}		int actionInitNumber = Modchu_EntityCapsHelper.getCapsValueInt(this, entityCaps, caps_freeVariable, "actionInitNumber");		if (i != actionInitNumber) {			Modchu_Debug.mDebug("MultiModelAction action i="+i+" actionInitNumber="+actionInitNumber);			entityCaps.setCapsValue(caps_actionInit, i);			entityCaps.setCapsValue(caps_freeVariable, "actionInitNumber", i);		} else {			//Modchu_Debug.mDebug("MultiModelAction action else i="+i+" actionInitNumber="+actionInitNumber);		}		Modchu_Reflect.invokeMethod(MultiModelAction.class, "action"+i, new Class[]{ float.class, float.class, float.class, float.class, float.class, float.class, ModchuModel_IEntityCaps.class }, this, new Object[]{ f, f1, f2, f3, f4, f5, entityCaps }, -1);	}	public void action1(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IEntityCaps entityCaps) {		// ｳｯｰｳｯｰｳﾏｳﾏ(ﾟ∀ﾟ)		//Modchu_Debug.Debug("action1");		float speed = Modchu_EntityCapsHelper.getCapsValueFloat(this, entityCaps, caps_actionSpeed) / 1200;		//Modchu_Debug.mDebug("action1 entityCaps != null?"+(entityCaps != null));		//Modchu_Debug.Debug("action1 "+(Modchu_EntityCapsHelper.getCapsValueFloat(this, entityCaps, caps_actionSpeed))+" speed="+speed+" Type="+Modchu_EntityCapsHelper.getCapsValue(this, entityCaps, caps_armorType));		if (speed < 0.0F) return;		//Modchu_Debug.mDebug("action1 1 speed="+speed);		action1Reset(f, f1, f2, f3, f4, f5, entityCaps);		int actionCount = Modchu_EntityCapsHelper.getCapsValueInt(this, entityCaps, caps_actionCount);		float f6 = (float) (actionCount) / 10000F;		float maxf = 0.544F;		float minf = -0.388F;		//Modchu_Debug.mDebug("action1 actionCount="+actionCount);		//Modchu_Debug.mDebug("action1 f6="+f6);		//actionSpeed = 0.1F;		//left		//f6 = maxf;		//middle		//f6 = -0.07F;		//right		//f6 = minf;		hip.rotateAngleZ = f6;		rightLeg.rotationPointZ = -0.01F;		leftLeg.rotationPointZ = -0.01F;		rightLeg2.rotationPointX = -0.001F;		rightLeg2.rotationPointZ = -0.02F;		leftLeg2.rotationPointX = 0.001F;		rightArm.rotateAngleY = f6 * 0.09328361F;		rightHand.rotateAngleX = -f6 * 1.86567233F;		if (!Modchu_EntityCapsHelper.getCapsValueBoolean(this, entityCaps, caps_freeVariable, "actionReverse")) {			if (f6 < maxf + speed) f6 += speed;		} else {			if (f6 > minf - speed) f6 -= speed;		}		if (f6 > maxf) {			f6 = maxf;			entityCaps.setCapsValue(caps_freeVariable, "actionReverse", true);		}		if (f6 < minf) {			f6 = minf;			entityCaps.setCapsValue(caps_freeVariable, "actionReverse", false);		}		//f6 = maxf;		//f6 = 0.01F;		//f6 = minf;		//hip.rotateAngleZ = f6;		if (f6 > 0.0F) {			bipedBody.rotationPointY += f6 * 1.30889264F;			rightLeg.rotationPointY += f6 * 1.30889264F;			rightLeg2.rotationPointY -= f6 * 2.61778528F;			leftLeg.rotationPointY -= f6 * 1.86567233F;			//leftLeg2.rotationPointY -= f6 * 1.30889264F;			//leftLeg2.rotationPointZ = -f6 * 0.74626893F;			//leftLeg.rotationPointY -= f6 * 0.14592575F;			//rightLeg2.rotationPointY += f6 * 1.30889264F;			//leftLeg2.rotationPointY -= f6 * 1.30889264F;			//leftLeg2.rotationPointZ = -0.02F;			//rightLeg.rotationPointY -= -f6 * 2.61778528F;			//leftLeg.rotationPointY -= -f6 * 2.61778528F;			//hip.rotateAngleX += f6 * 0.186567233F;			//bipedBody.rotationPointY += f6 * 4.10447914F;			rightArm.rotateAngleZ = 2.05619449F - (f6 * 1.1194034F);			rightArm2.rotateAngleZ = 1.3619449F + (f6 * 1.3059706F);			leftArm.rotateAngleX = -rightArm.rotateAngleX;			leftArm.rotateAngleY = -rightArm.rotateAngleY;			leftArm.rotateAngleZ = -rightArm.rotateAngleZ;			leftArm2.rotateAngleX = -rightArm2.rotateAngleX;			leftArm2.rotateAngleY = -rightArm2.rotateAngleY;			leftArm2.rotateAngleZ = -rightArm2.rotateAngleZ;			rightLeg.rotateAngleX = 0.0F;			//rightLeg.rotateAngleY = f6 * 0.52355705F;			rightLeg.rotateAngleZ = -f6;			rightLeg2.rotateAngleX = f6 * 1.30889264F;			leftLeg.rotateAngleX = 0.0F;			leftLeg.rotateAngleY = 0.0F;			leftLeg.rotateAngleZ = -f6;			leftLeg2.rotateAngleX = 0.0F;			leftLeg2.rotateAngleZ = 0.0F;			//bipedHead.rotationPointY = bipedBody.rotationPointY - 7.5F + (f6 * 2.61778528F);		} else {			//bipedBody.rotationPointY -= f6 * 4.10447914F;			rightLeg.rotationPointY -= f6 * 0.93283616F;			//rightLeg2.rotationPointY -= f6 * 0.93283616F;			leftLeg.rotationPointY -= f6 * 1.86567233F;			leftLeg2.rotationPointY += f6 * 2.61778528F;			//leftLeg2.rotationPointZ = -f6 * 0.74626893F;			rightArm.rotateAngleX = 0.0F;			rightArm.rotateAngleZ = 2.05619449F + (f6 * 1.8324496927929884191796750961971F);			rightArm2.rotateAngleZ = 1.3619449F - (f6 * 0.52355705F);			leftArm.rotateAngleX = -rightArm.rotateAngleX;			leftArm.rotateAngleY = -rightArm.rotateAngleY;			leftArm.rotateAngleZ = -rightArm.rotateAngleZ;			leftArm2.rotateAngleX = -rightArm2.rotateAngleX;			leftArm2.rotateAngleY = -rightArm2.rotateAngleY;			leftArm2.rotateAngleZ = -rightArm2.rotateAngleZ;			rightLeg.rotateAngleX = f6 * 0.186567233F;			rightLeg.rotateAngleZ = -f6 * 1.30597063F;			leftLeg.rotateAngleX = -f6 * 0.186567233F;			leftLeg.rotateAngleY = f6 * 0.5597017F;			leftLeg.rotateAngleZ = -f6 * 1.02611976F;			leftLeg2.rotateAngleX = -f6 * 1.30597063F;			//bipedHead.rotationPointY = bipedBody.rotationPointY - 7.5F - (f6 * 2.61778528F);			rightHand.rotateAngleX = -rightHand.rotateAngleX;		}		//bipedHead.rotationPointX = f6 * 2.10447914F;		//bipedHead.rotateAngleX = -f6 * 0.2F;		//bipedHead.rotateAngleY = f6 * 0.2F;		//bipedHead.rotateAngleZ = f6;		leftHand.rotateAngleX = rightHand.rotateAngleX;		leftHand.rotateAngleY = rightHand.rotateAngleY;		leftHand.rotateAngleZ = rightHand.rotateAngleZ;		//bipedBody.rotateAngleZ = f6;		hip.rotateAngleZ = f6;		rightLeg.rotateAngleZ = f6;		leftLeg.rotateAngleZ = f6;		mainFrame.rotationPointX = f6 * 10F;		//Modchu_Debug.dDebug("action1");		//Modchu_Debug.mDebug("action1 end. set actionCount="+((int) (f6 * 10000)));		entityCaps.setCapsValue(caps_actionCount, (int) (f6 * 10000));	}	public void action1Reset(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IEntityCaps entityCaps) {		rightArm.rotationPointX = bipedRightArm.rotationPointX;		rightArm.rotationPointY = bipedRightArm.rotationPointY;		rightArm.rotationPointZ = bipedRightArm.rotationPointZ;		leftArm.rotationPointX = bipedLeftArm.rotationPointX;		leftArm.rotationPointY = bipedLeftArm.rotationPointY;		leftArm.rotationPointZ = bipedLeftArm.rotationPointZ;		rightArm2.rotationPointX = 0.0F;		rightArm2.rotationPointY = 4.0F;		rightArm2.rotationPointZ = 0.0F;		leftArm2.rotationPointX = 0.0F;		leftArm2.rotationPointY = 4.0F;		leftArm2.rotationPointZ = 0.0F;		rightLeg.rotationPointX = bipedRightLeg.rotationPointX;		rightLeg.rotationPointY = bipedRightLeg.rotationPointY;		rightLeg.rotationPointZ = bipedRightLeg.rotationPointZ;		leftLeg.rotationPointX = -rightLeg.rotationPointX;		leftLeg.rotationPointY = bipedLeftLeg.rotationPointY;		leftLeg.rotationPointZ = bipedLeftLeg.rotationPointZ;		rightLeg2.rotationPointX = 0.0F;		int boxSizeY = rightLeg.getBoxSizeY();		rightLeg2.rotationPointY = boxSizeY;		rightLeg2.rotationPointZ = 0.0F;		leftLeg2.rotationPointX = rightLeg2.rotationPointX;		leftLeg2.rotationPointY = rightLeg2.rotationPointY;		leftLeg2.rotationPointZ = rightLeg2.rotationPointZ;		rightArm.rotateAngleX = bipedRightArm.rotateAngleX;		rightArm.rotateAngleY = bipedRightArm.rotateAngleY;		rightArm.rotateAngleZ = bipedRightArm.rotateAngleZ;		leftArm.rotateAngleX = bipedLeftArm.rotateAngleX;		leftArm.rotateAngleY = bipedLeftArm.rotateAngleY;		leftArm.rotateAngleZ = bipedLeftArm.rotateAngleZ;		rightLeg.rotateAngleX = bipedRightLeg.rotateAngleX;		rightLeg.rotateAngleY = bipedRightLeg.rotateAngleY;		rightLeg.rotateAngleZ = bipedRightLeg.rotateAngleZ;		leftLeg.rotateAngleX = bipedLeftLeg.rotateAngleX;		leftLeg.rotateAngleY = bipedLeftLeg.rotateAngleY;		leftLeg.rotateAngleZ = bipedLeftLeg.rotateAngleZ;		rightArm2.rotateAngleX = rightArm2.rotateAngleY = rightArm2.rotateAngleZ =				leftArm2.rotateAngleX = leftArm2.rotateAngleY = leftArm2.rotateAngleZ =				rightLeg2.rotateAngleX = rightLeg2.rotateAngleY = rightLeg2.rotateAngleZ =				leftLeg2.rotateAngleX = leftLeg2.rotateAngleY = leftLeg2.rotateAngleZ = 0.0F;	}	public void action2(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IEntityCaps entityCaps) {		// 手を上げるモーション		Modchu_ModelRenderer arm = (Modchu_ModelRenderer) getCapsValue(entityCaps, caps_dominantArmModelRenderer, entityCaps);		arm.rotateAngleX -= 0.2F;		arm.rotateAngleY -= 1.0F;		arm.rotateAngleZ = Modchu_EntityCapsHelper.getCapsValueInt(this, entityCaps, caps_dominantArm) == 0 ? 2.1F : -2.1F;	}	public void action3(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IEntityCaps entityCaps) {		// 手を上げて振るモーション		//Modchu_Debug.mDebug("armorType="+armorType+" actionSpeed="+actionSpeed);		float actionSpeed = Modchu_EntityCapsHelper.getCapsValueFloat(this, entityCaps, caps_actionSpeed);		if (actionSpeed < 0.0F) return;		int i = (int) (actionSpeed / 30);		if (i < 0) i = 0;		boolean actionReverse = Modchu_EntityCapsHelper.getCapsValueBoolean(this, entityCaps, caps_freeVariable, "actionReverse");		int actionCount = Modchu_EntityCapsHelper.getCapsValueInt(this, entityCaps, caps_actionCount);		actionCount = (int) (actionReverse ? actionCount - i : actionCount + i);		entityCaps.setCapsValue(caps_actionCount, actionCount);		//Modchu_Debug.mDebug("actionReverse="+actionReverse+" actionCount="+actionCount+" "+((float) (actionCount - 15)) / 30.0F);		Modchu_ModelRenderer arm = (Modchu_ModelRenderer) getCapsValue(entityCaps, caps_dominantArmModelRenderer, entityCaps);		arm.rotateAngleZ = 2.0F - ((float) (actionCount - 15)) / 20.0F;		if (Modchu_EntityCapsHelper.getCapsValueInt(this, entityCaps, caps_dominantArm) == 1) arm.rotateAngleZ = -arm.rotateAngleZ;		if (actionCount > 30) {			entityCaps.setCapsValue(caps_freeVariable, "actionReverse", true);			entityCaps.setCapsValue(caps_actionCount, 30);		}		if (actionCount < 0) {			entityCaps.setCapsValue(caps_freeVariable, "actionReverse", false);			entityCaps.setCapsValue(caps_actionCount, 0);		}	}	public void action4(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IEntityCaps entityCaps) {		// 両手を前に出すモーション		Modchu_ModelRenderer bipedRightArm = ((Modchu_ModelRenderer) getCapsValue(entityCaps, caps_bipedRightArm, entityCaps));		Modchu_ModelRenderer bipedLeftArm = ((Modchu_ModelRenderer) getCapsValue(entityCaps, caps_bipedLeftArm, entityCaps));		if (onGrounds[dominantArm] > 0F) {			switch (dominantArm) {			case 0:				bipedRightArm.rotateAngleX += -1.570796313F;				bipedLeftArm.rotateAngleX = -1.570796313F;				break;			case 1:				bipedLeftArm.rotateAngleX += -1.570796313F;				bipedRightArm.rotateAngleX = -1.570796313F;				break;			}		} else {			bipedRightArm.rotateAngleX = bipedLeftArm.rotateAngleX = -1.570796313F;		}		bipedRightArm.rotateAngleY = bipedLeftArm.rotateAngleY = 0.0F;		bipedRightArm.rotateAngleZ = bipedLeftArm.rotateAngleZ = 0.0F;	}	public void action5(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IEntityCaps entityCaps) {		// 両手を上げるモーション		Modchu_ModelRenderer arm = (Modchu_ModelRenderer) getCapsValue(entityCaps, caps_dominantArmModelRenderer, entityCaps);		//arm.rotateAngleX -= 0.2F;		//arm.rotateAngleY -= 1.0F;		arm.rotateAngleZ = Modchu_EntityCapsHelper.getCapsValueInt(this, entityCaps, caps_dominantArm) == 0 ? 2.4F : -2.4F;		arm = (Modchu_ModelRenderer) getCapsValue(entityCaps, caps_notDominantArmModelRenderer, entityCaps);		//arm.rotateAngleX -= 0.2F;		//arm.rotateAngleY -= 1.0F;		arm.rotateAngleZ = Modchu_EntityCapsHelper.getCapsValueInt(this, entityCaps, caps_dominantArm) == 0 ? -2.4F : 2.4F;	}	public void action6(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IEntityCaps entityCaps) {		//Modchu_Debug.mDebug("action6");		setMotionDefaultPause(f, f1, f2, f3, f4, f5, entityCaps);		motionModelCorrectionBefore(f, f1, f2, f3, f4, f5, entityCaps);		int actionCount = Modchu_EntityCapsHelper.getCapsValueInt(this, entityCaps, caps_actionCount);//debug = true;//actionCount = (int) (Modchu_Debug.debaf1 * 10);//Modchu_Debug.dDebug("debaf1="+Modchu_Debug.debaf1+" actionCount="+actionCount);		//if (debug) Modchu_Debug.mDebug("action6 1 actionCount="+actionCount);		ModchuModel_MotionData motionData = ModchuModel_MotionDataMaster.loadMotionData(0, null, null, null);		if (motionData != null) ;else return;		List<Object[]> motionDataList = motionData.getDataList(actionCount);		if (motionDataList != null && !motionDataList.isEmpty()) ;else {			motionDataList = tempMotionDataList;			if (debug) Modchu_Debug.mDebug("action6 tempMotionDataList actionCount="+actionCount+" completeDataCount="+motionData.getCompleteDataCount());			if (motionDataList != null && !motionDataList.isEmpty()) ;else {				if (debug) Modchu_Debug.mDebug("action6 error !! modelRendererMotionDataList == null !! return");				return;			}		}		Modchu_ModelRenderer modelRenderer = null;		float[] data1 = null;		Object[] o;		int[] setDataInt;		float x = 0.0F;		float y = 0.0F;		float z = 0.0F;		String name;		//if (debug) Modchu_Debug.mDebug("action6 1 motionDataList.size()="+motionDataList.size());		for (int i1 = 0; i1 < motionDataList.size(); i1++) {			if (debug) Modchu_Debug.mDebug("action6 ----- i1="+i1);			o = motionDataList.get(i1);			name = getMotionRenameMap((String)o[0]);			modelRenderer = getStringModelRendererMap(name);			//if (debug) Modchu_Debug.mDebug("action6 modelRenderer="+modelRenderer+" name="+name);			if (modelRenderer != null) ;else continue;			data1 = (float[]) o[1];			setDataInt = getMotionModelRendererSettingInt(name);			if (setDataInt[6] > 0) {				x = modelRenderer.rotationPointX + data1[0];				y = modelRenderer.rotationPointY + data1[1];				z = modelRenderer.rotationPointZ + data1[2];				modelRenderer.setRotationPoint(x, y, z);				if (debug) Modchu_Debug.mDebug("action6 setRotationPoint x="+x + " y="+y + " z="+z);			}			x = setDataInt[3] > -1 ? modelRenderer.rotateAngleX + (setDataInt[3] == 0 ? data1[setDataInt[0]] : -data1[setDataInt[0]]) : 0.0F;			y = setDataInt[4] > -1 ? modelRenderer.rotateAngleY + (setDataInt[4] == 0 ? data1[setDataInt[1]] : -data1[setDataInt[1]]) : 0.0F;			z = setDataInt[5] > -1 ? modelRenderer.rotateAngleZ + (setDataInt[5] == 0 ? data1[setDataInt[2]] : -data1[setDataInt[2]]) : 0.0F;			if (debug) {				Modchu_Debug.mDebug("action6 name="+name);				String d = Modchu_Debug.getDebugArrayString("data1", data1);				Modchu_Debug.mDebug("action6 "+d);				String d2 = Modchu_Debug.getDebugArrayString("setDataInt", setDataInt);				Modchu_Debug.mDebug("action6 "+d2);				Modchu_Debug.mDebug("action6 setDataInt[5] z="+(setDataInt[5] == 0 ? data1[setDataInt[2]] : -data1[setDataInt[2]]));				Modchu_Debug.mDebug("action6 setRotateAngleDeg x="+x + " y="+y + " z="+z);			}			modelRenderer.setRotateAngle(x, y, z);			//modelRenderer.setRotateAngleDeg(Modchu_Debug.debaf1, Modchu_Debug.debaf2, Modchu_Debug.debaf3);			//Modchu_Debug.dDebug("debaf1="+Modchu_Debug.debaf1+" debaf2="+Modchu_Debug.debaf2+" debaf3="+Modchu_Debug.debaf3);			if (debug) Modchu_Debug.mDebug("action6 2 x="+x+" y="+y+" z="+z);			//if (debug) Modchu_Debug.mDebug("action6 data1[3]="+data1[3] + " data1[4]="+data1[4] + " data1[5]="+data1[5]);		}		motionModelCorrectionAfter(f, f1, f2, f3, f4, f5, entityCaps);		float speed = Modchu_EntityCapsHelper.getCapsValueFloat(this, entityCaps, caps_actionSpeed) / 1200;		if (speed < 0.0F) return;		String waitVariable = "action6_wait";		float wait = Modchu_EntityCapsHelper.getCapsValueFloat(this, entityCaps, caps_freeVariable, waitVariable);		wait += speed;		if (wait < 0.07F) {			entityCaps.setCapsValue(caps_freeVariable, waitVariable, wait);		} else {			entityCaps.setCapsValue(caps_freeVariable, waitVariable, 0.0F);			actionCount++;			if (actionCount > motionData.getMaxMotionFrame()) {				actionCount = 0;				//debug = false;			}			entityCaps.setCapsValue(caps_actionCount, actionCount);		}		tempMotionDataList = motionDataList;		//if (debug) Modchu_Debug.mDebug("action6 motionData.getMaxMotionFrame()="+motionData.getMaxMotionFrame());		//if (debug) Modchu_Debug.mDebug("action6 end.");	}	public void setMotionDefaultPause(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IEntityCaps entityCaps) {	}	public void action7(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IEntityCaps entityCaps) {	}	public void action8(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IEntityCaps entityCaps) {	}	public void action9(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IEntityCaps entityCaps) {	}	public void action30(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IEntityCaps entityCaps) {/*		//デバック用		if (mod_mod_Modchu_ModchuLib.modchu_Main.getPackage() == null) return;		boolean b = true;		if (rightArm != null) setCapsValue(entityCaps, caps_visible, rightArm, b);		if (rightArm2 != null) setCapsValue(entityCaps, caps_visible, rightArm2, b);		if (rightArmPlus != null) setCapsValue(entityCaps, caps_visible, rightArmPlus, b);		if (rightArmPlus2 != null) setCapsValue(entityCaps, caps_visible, rightArmPlus2, b);		if (rightHand != null) setCapsValue(entityCaps, caps_visible, rightHand, b);		if (leftArm != null) setCapsValue(entityCaps, caps_visible, leftArm, b);		if (leftArm2 != null) setCapsValue(entityCaps, caps_visible, leftArm2, b);		if (leftArmPlus != null) setCapsValue(entityCaps, caps_visible, leftArmPlus, b);		if (leftArmPlus2 != null) setCapsValue(entityCaps, caps_visible, leftArmPlus2, b);		if (leftHand != null) setCapsValue(entityCaps, caps_visible, leftHand, b);		if (rightLeg != null) setCapsValue(entityCaps, caps_visible, rightLeg, b);		if (rightLeg2 != null) setCapsValue(entityCaps, caps_visible, rightLeg2, b);		if (rightLegPlus != null) setCapsValue(entityCaps, caps_visible, rightLegPlus, b);		if (rightLegPlus2 != null) setCapsValue(entityCaps, caps_visible, rightLegPlus2, b);		if (leftLeg != null) setCapsValue(entityCaps, caps_visible, leftLeg, b);		if (leftLeg2 != null) setCapsValue(entityCaps, caps_visible, leftLeg2, b);		if (leftLegPlus != null) setCapsValue(entityCaps, caps_visible, leftLegPlus, b);		if (leftLegPlus2 != null) setCapsValue(entityCaps, caps_visible, leftLegPlus2, b);*/	}	@Override	public void boneProcessing(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IEntityCaps entityCaps) {		Modchu_ModelRenderer m;/*		center.rotationPointX = Modchu_Debug.debaf1;		center.rotationPointY = Modchu_Debug.debaf2;		center.rotationPointZ = Modchu_Debug.debaf3;*//*		rightLegIK.rotationPointX = Modchu_Debug.debaf1;		rightLegIK.rotationPointY = Modchu_Debug.debaf2;		rightLegIK.rotationPointZ = Modchu_Debug.debaf3;		//Modchu_Debug.debafNormalise(-3.141592653F, 3.141592653F);		Modchu_Debug.dDebug("debaf1="+Modchu_Debug.debaf1+" debaf2="+Modchu_Debug.debaf2+" debaf3="+Modchu_Debug.debaf3);*/		int boxSizeX;		int boxSizeY;		int boxSizeZ;		float X = 0.0F;		float Y = 0.0F;		float Z = 0.0F;		float tempX = 0.0F;		float f7 = 0.0F;		//Modchu_Debug.mDebug("boneProcessing center.rotationPointX="+center.rotationPointX);		//Modchu_Debug.mDebug("boneProcessing center.rotationPointY="+center.rotationPointY);		//Modchu_Debug.mDebug("boneProcessing center.rotationPointZ="+center.rotationPointZ);		List<Modchu_ModelRenderer> boneChildModels = center != null ? center.getBoneChildModels() : null;		if (boneChildModels != null				&& !boneChildModels.isEmpty()) {			mainFrame.rotationPointX += center.rotationPointX;			mainFrame.rotationPointY += center.rotationPointY;			mainFrame.rotationPointZ += center.rotationPointZ;/*			leftLegIK.rotationPointX -= center.rotationPointX;			leftLegIK.rotationPointY -= center.rotationPointY;			leftLegIK.rotationPointZ -= center.rotationPointZ;			rightLegIK.rotationPointX -= center.rotationPointX;			rightLegIK.rotationPointY -= center.rotationPointY;			rightLegIK.rotationPointZ -= center.rotationPointZ;*/			upperBody.rotateAngleX += center.rotateAngleX;			upperBody.rotateAngleY += center.rotateAngleY;			upperBody.rotateAngleZ += center.rotateAngleZ;		}		boneChildModels = hip != null ? hip.getBoneChildModels() : null;		if (boneChildModels != null				&& !boneChildModels.isEmpty()) {			upperBody.setRotateAngle(upperBody.rotateAngleX - hip.rotateAngleX, upperBody.rotateAngleY - hip.rotateAngleY, upperBody.rotateAngleZ - hip.rotateAngleZ);			//lowerBody.setRotateAngle(lowerBody.rotateAngleX - hip.rotateAngleX, lowerBody.rotateAngleY + hip.rotateAngleY, lowerBody.rotateAngleZ + hip.rotateAngleZ);/*			int bodyBoxSizeX = bipedBody.getBoxSizeX();			int bodyBoxSizeY = bipedBody.getBoxSizeY();			int bodyBoxSizeZ = bipedBody.getBoxSizeZ();			for (int i = 0; i < hip.boneChildModels.size(); i++) {				m = (ModchuModel_ModelRenderer) hip.boneChildModels.get(i);				if (m != null) ;else continue;				boxSizeX = m.getBoxSizeX();				boxSizeY = m.getBoxSizeY();				boxSizeZ = m.getBoxSizeZ();				f7 = hip.rotateAngleX > 0.0F ? hip.rotateAngleX : -hip.rotateAngleX;				Y = bodyBoxSizeY * (1.0F - mh_cos(f7));				Z = bodyBoxSizeY * mh_sin(f7);				//Modchu_Debug.mDebug("boneProcessing f7="+f7);				//Modchu_Debug.mDebug("boneProcessing 2 ="+(mh_cos(hip.rotateAngleX)));				m.rotationPointY += hip.rotateAngleX > 0.0F ? -Y : -Y;				m.rotationPointZ += hip.rotateAngleX > 0.0F ? -Z : Z;				//f7 = hip.rotateAngleX > 0.0F ? hip.rotateAngleX : -hip.rotateAngleX;				//Y = boxSizeY * (1.0F - mh_cos(f7));				//Z = boxSizeY * mh_sin(f7);				//m.rotationPointY += hip.rotateAngleX > 0.0F ? -Y : -Y;				//m.rotationPointZ += hip.rotateAngleX > 0.0F ? -Z : Z;				//Modchu_Debug.mDebug("boneProcessing mh_cos(hip.rotateAngleX)="+mh_cos(hip.rotateAngleX));				//Modchu_Debug.mDebug("boneProcessing hip.rotateAngleX="+hip.rotateAngleX);				//Modchu_Debug.dDebug("boneProcessing debaY="+Y+" debaZ="+Z+" mh_cos:"+mh_cos(hip.rotateAngleX));				//m.rotationPointX += 6F * mh_cos(hip.rotateAngleZ);				//Y = boxSizeZ * (1.0F - mh_cos(f7));				//Z = boxSizeZ * mh_sin(f7);				//m.rotationPointY += hip.rotateAngleX > 0.0F ? Y : Y;				//m.rotationPointZ += hip.rotateAngleX > 0.0F ? -Z : Z;				//Modchu_Debug.mDebug("boneProcessing f7="+f7);				//Modchu_Debug.mDebug("boneProcessing Y="+Y);				f7 = hip.rotateAngleZ > 0.0F ? hip.rotateAngleZ : -hip.rotateAngleZ;				X = boxSizeX * mh_sin(f7);				Y = (boxSizeX / 2.0F) * (1.0F - mh_cos(f7));				//Modchu_Debug.mDebug("boneProcessing f7="+f7);				//Modchu_Debug.mDebug("boneProcessing X="+X);				m.rotationPointX += hip.rotateAngleZ > 0.0F ? X : -X;				m.rotationPointY += -Y;				tempX = (boxSizeX * 1.5F) * mh_sin(f7);			}*/		}		boneChildModels = lowerBody != null ? lowerBody.getBoneChildModels() : null;		if (boneChildModels != null				&& !boneChildModels.isEmpty()) {			//Modchu_Debug.mDebug("lowerBody lowerBody.rotateAngleX="+lowerBody.rotateAngleX);			//Modchu_Debug.mDebug("lowerBody lowerBody.rotateAngleY="+lowerBody.rotateAngleY);			//Modchu_Debug.mDebug("lowerBody lowerBody.rotateAngleZ="+lowerBody.rotateAngleZ);			for (int i = 0; i < boneChildModels.size(); i++) {				m = boneChildModels.get(i);				if (m != null) ;else continue;				boxSizeX = m.getBoxSizeX();				boxSizeY = m.getBoxSizeY();				boxSizeZ = m.getBoxSizeZ();				f7 = lowerBody.rotateAngleX > 0.0F ? lowerBody.rotateAngleX : -lowerBody.rotateAngleX;				X = (boxSizeX / 1.5F) * mh_sin(f7);				Y = boxSizeX * (1.0F - mh_cos(f7));				Z = (boxSizeX / 2.0F) * (1.0F - mh_cos(f7));				//Z = (boxSizeX / 2.0F) * mh_sin(f7);				//Modchu_Debug.mDebug("boneProcessing boxSizeX="+boxSizeX);				//Modchu_Debug.mDebug("boneProcessing f7="+f7);				//Modchu_Debug.mDebug("boneProcessing X="+X);				//Modchu_Debug.mDebug("boneProcessing Y="+Y);				//m.rotationPointX -= lowerBody.rotateAngleX > 0.0F ? -X : X;				m.rotationPointY -= Y > 1.0F ? 1.0F : Y < 0.0F ? 0.0F : Y;				if (Z > 1.5F) Z = 1.5F;				if (Z < -1.5F) Z = -1.5F;				m.rotationPointZ -= lowerBody.rotateAngleX > 0.0F ? Z : -Z;				//X = X / 10.0F;				Y = Y * 5.0F;				if (Y > 0.5F) Y = 0.5F;				if (Y < -0.5F) Y = -0.5F;				m.rotateAngleX += lowerBody.rotateAngleX > 0.0F ? Y : -Y;				//m.rotateAngleY += lowerBody.rotateAngleY > 0.0F ? X : X;/*				Vector3f result = new Vector3f(m.rotationPointX, m.rotationPointY, m.rotationPointZ);				result = ModchuModel_rotateUtil.setRotation(0.0F, boxSizeY, 0.0F, X, Y, Z, m.rotateAngleX, m.rotateAngleY, m.rotateAngleZ, result);				X = result.x;				Y = result.y;				Z = result.z;				m.rotateAngleX += X;				Modchu_Debug.dDebug("boneProcessing X="+X+" Y="+Y+" Z="+Z, 1);*//*				f7 = lowerBody.rotateAngleY > 0.0F ? lowerBody.rotateAngleY : -lowerBody.rotateAngleY;				X = (boxSizeX / 1.5F) * mh_sin(f7);				Y += (boxSizeX / 5.0F) * (1.0F - mh_cos(f7));				Z = (boxSizeX * 2.0F) * mh_sin(f7);				//Modchu_Debug.mDebug("boneProcessing X="+X);				//m.rotationPointX += -X;				//m.rotationPointY += -Y;				//m.rotationPointZ -= -Z;				X = X / 2.0F;				m.rotateAngleX -= -X;*/				f7 = lowerBody.rotateAngleZ > 0.0F ? lowerBody.rotateAngleZ : -lowerBody.rotateAngleZ;				m.rotationPointX += lowerBody.rotateAngleZ > 0.0F ? tempX : -tempX;				//X = (boxSizeX / 2.0F) * mh_sin(f7);				Y = boxSizeX * mh_sin(f7) < 0.5F ? boxSizeX * mh_sin(f7) : 0.5F;				Z = boxSizeX * (1.0F - mh_cos(f7));				//Modchu_Debug.mDebug("boneProcessing Z="+Z);				//m.rotationPointX += lowerBody.rotateAngleZ > 0.0F ? X : -X;				//m.rotationPointY += -Y;				//m.rotationPointZ += -Z;				Z = Z * 5.0F;				if (Z > 0.5F) Z = 0.5F;				if (Z < -0.5F) Z = -0.5F;				m.rotateAngleZ += lowerBody.rotateAngleZ > 0.0F ? Z : -Z;			}		}		boneChildModels = upperBody != null ? upperBody.getBoneChildModels() : null;		if (boneChildModels != null				&& !boneChildModels.isEmpty()) {			//Modchu_Debug.mDebug("boneProcessing upperBody.boneChildModels.size()="+upperBody.boneChildModels.size());			for (int i = 0; i < boneChildModels.size(); i++) {				m = boneChildModels.get(i);				if (m != null) ;else continue;				m.rotateAngleX += upperBody.rotateAngleX;				m.rotateAngleY += upperBody.rotateAngleY;				m.rotateAngleZ += upperBody.rotateAngleZ;				boxSizeX = m.getBoxSizeX();				boxSizeY = m.getBoxSizeY();				boxSizeZ = m.getBoxSizeZ();				f7 = upperBody.rotateAngleX > 0.0F ? upperBody.rotateAngleX : -upperBody.rotateAngleX;				m.rotationPointY += upperBody.rotateAngleX > 0.0F ? Y : Y;				Y = (boxSizeZ / 2.0F) * (1.0F - mh_cos(f7));				Z = (boxSizeZ / 2.0F) * (1.0F - mh_cos(f7));				//Modchu_Debug.mDebug("boneProcessing upperBody f7="+f7);				//Modchu_Debug.mDebug("boneProcessing upperBody boxSizeZ="+boxSizeZ);				//Modchu_Debug.mDebug("boneProcessing upperBody Z="+Z);				m.rotationPointY += upperBody.rotateAngleX > 0.0F ? Y : Y;				m.rotationPointZ += upperBody.rotateAngleX > 0.0F ? -Z : Z;				f7 = upperBody.rotateAngleZ > 0.0F ? upperBody.rotateAngleZ : -upperBody.rotateAngleZ;				X = (boxSizeX / 2.0F) * mh_sin(f7);				Y = (boxSizeX / 2.0F) * (1.0F - mh_cos(f7));				//Modchu_Debug.mDebug("boneProcessing upperBody X="+X);				m.rotationPointX += upperBody.rotateAngleZ > 0.0F ? X : -X;				m.rotationPointY += Y;			}			List<Modchu_ModelRenderer> boneSpecialChildModels = upperBody != null ? upperBody.getBoneSpecialChildModels() : null;			for (int i = 0; i < boneSpecialChildModels.size(); i++) {				m = boneSpecialChildModels.get(i);				if (m != null) ;else continue;				boxSizeX = m.getBoxSizeX();				boxSizeY = m.getBoxSizeY();				boxSizeZ = m.getBoxSizeZ();				m.rotateAngleX -= upperBody.rotateAngleX;				m.rotateAngleZ -= upperBody.rotateAngleZ;/*				f7 = upperBody.rotateAngleY > 0.0F ? upperBody.rotateAngleY : -upperBody.rotateAngleY;				Y = (boxSizeY / 2.0F) * mh_sin(f7);				Z = (boxSizeZ / 2.0F) * (1.0F - mh_cos(f7));				m.rotateAngleX -= upperBody.rotateAngleY > 0.0F ? Y : Y;				m.rotateAngleZ -= upperBody.rotateAngleY > 0.0F ? Z : Z;*/			}		}		//Modchu_Debug.mDebug("mainFrame.boneChildModels="+mainFrame.boneChildModels);		boneChildModels = rightShoulder != null ? rightShoulder.getBoneChildModels() : null;		if (boneChildModels != null				&& !boneChildModels.isEmpty()) {			for (int i = 0; i < boneChildModels.size(); i++) {				m = boneChildModels.get(i);				if (m != null) ;else continue;				m.rotateAngleX += rightShoulder.rotateAngleX;				m.rotateAngleY += rightShoulder.rotateAngleY;				m.rotateAngleZ += rightShoulder.rotateAngleZ;			}		}		boneChildModels = leftShoulder != null ? leftShoulder.getBoneChildModels() : null;		if (boneChildModels != null				&& !boneChildModels.isEmpty()) {			for (int i = 0; i < boneChildModels.size(); i++) {				m = boneChildModels.get(i);				if (m != null) ;else continue;				m.rotateAngleX += leftShoulder.rotateAngleX;				m.rotateAngleY += leftShoulder.rotateAngleY;				m.rotateAngleZ += leftShoulder.rotateAngleZ;			}		}		IKProcessing(leftLegIK);		IKProcessing(rightLegIK);	}	public void IKProcessing(Modchu_ModelRenderer IK) {		Modchu_ModelRenderer m;		int boxSizeX;		int boxSizeY;		int boxSizeZ;		float X = 0.0F;		float Y = 0.0F;		float Z = 0.0F;		float f7 = 0.0F;		List<Modchu_ModelRenderer> boneChildModels = IK != null ? IK.getBoneChildModels() : null;		if (boneChildModels != null				&& !boneChildModels.isEmpty()) ;else return;		for (int i = 0; i < boneChildModels.size(); i++) {			m = boneChildModels.get(i);			if (m != null) ;else continue;			boxSizeX = m.getBoxSizeX();			boxSizeY = m.getBoxSizeY();			boxSizeZ = m.getBoxSizeZ();			float fz1 = IK.rotationPointX;			float fz2 = -boxSizeY;			if (fz1 == 0.0F					&& fz2 == 0.0F) {				X = 0.0F;			} else {				X = (float) Math.atan2(fz2, fz1) + 1.570796313F;			}			m.rotateAngleZ += X;/*			fz1 = IK.rotationPointY;			fz2 = -boxSizeY;			if (fz1 == 0.0F					&& fz2 == 0.0F) {				Y = 0.0F;			} else {				Y = (float) Math.atan2(fz2, fz1) + 1.570796313F;			}			m.rotateAngleX += Y;*/			fz1 = IK.rotationPointZ;			fz2 = -boxSizeY;			if (fz1 == 0.0F					&& fz2 == 0.0F) {				Z = 0.0F;			} else {				Z = (float) Math.atan2(fz2, fz1) + 1.570796313F;			}			m.rotateAngleX += Z;			//Modchu_Debug.dDebug("leftLegIK X="+X+" Z="+Z, 1);		}		int boxSizeY2 = 0;		Modchu_ModelRenderer m2 = null;		int i = 0;		for (Modchu_ModelRenderer m1 : boneChildModels) {			if (m1 != null) ;else continue;			boxSizeY = m1.getBoxSizeY();			List<Modchu_ModelRenderer> boneSpecialChildModels = m1.getBoneSpecialChildModels();			if (boneSpecialChildModels != null					&& !boneSpecialChildModels.isEmpty()) ;else {				//Modchu_Debug.mDebug("boneSpecialChildModels == null !! m1.getBoxName()="+m1.getBoxName());				//Modchu_Debug.mDebug("boneSpecialChildModels == null !! boneSpecialChildModels="+boneSpecialChildModels);				continue;			}			Modchu_Debug.mDebug("boneSpecialChildModels != null !! boneSpecialChildModels="+boneSpecialChildModels);			if (i >= boneSpecialChildModels.size()) break;			m2 = boneSpecialChildModels.get(i);			i++;			if (m2 != null) boxSizeY2 = m2.getBoxSizeY();			else continue;			//Modchu_Debug.mDebug("m2 != null boxSizeY2="+boxSizeY2);			boxSizeY += boxSizeY2;			float x1 = 0.0F;			float y1 = 0.0F;			float z1 = 0.0F;			float x2 = IK.rotationPointX;			float y2 = IK.rotationPointY + boxSizeY;			float z2 = IK.rotationPointZ;			float ff1 = (float)Math.sqrt((double)(x1-x2)*(double)(x1-x2) + (double)(y1-y2)*(double)(y1-y2) + (double)(z1-z2)*(double)(z1-z2));			//f7 = IK.rotationPointY > boxSizeY ? boxSizeY : IK.rotationPointY;			if (ff1 < boxSizeY) {				ff1 = 1.570796313F * (ff1 - boxSizeY);				m1.addRotateAngleX(ff1);				m2.addRotateAngleX(-ff1 * 2F);			}			m1.rotateAngleX = Modchu_Main.floatNormalise(m1.rotateAngleX, -1.570796313F, 1.570796313F);			if (m2.rotateAngleX > 3.14159265F) m2.rotateAngleX = Modchu_Main.floatNormalise(m2.rotateAngleX, -3.14159265F, 3.14159265F);			Modchu_Debug.dDebug("leftLegIK 距離="+ff1, 2);			Modchu_Debug.dDebug("leftLegIK boxSizeY="+boxSizeY, 3);			Modchu_Debug.dDebug("leftLegIK m.rotateAngleX="+m1.rotateAngleX, 3);		}	}	public void motionModelCorrectionBefore(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IEntityCaps entityCaps) {	}	public void motionModelCorrectionAfter(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IEntityCaps entityCaps) {	}	private Modchu_ModelRenderer partsCorrection(Modchu_ModelRenderer modelRenderer) {		int boxSizeX = modelRenderer.getBoxSizeX();		int boxSizeY = modelRenderer.getBoxSizeY();		//int boxSizeZ = modelRenderer.getBoxSizeZ();		modelRenderer.rotationPointX -= boxSizeX * mh_cos(modelRenderer.rotateAngleX);		modelRenderer.rotationPointY += boxSizeY * mh_sin(modelRenderer.rotateAngleY);		//modelRenderer.rotationPointZ -= boxSizeZ * mh_cos(modelRenderer.rotateAngleZ);		//Modchu_Debug.mDebug("motionModelCorrection boxSizeX="+boxSizeX+" boxSizeY="+boxSizeY+" boxSizeZ="+boxSizeZ);		//Modchu_Debug.mDebug("motionModelCorrection rotationPointX="+modelRenderer.rotationPointX+" rotationPointY="+modelRenderer.rotationPointY+" rotationPointZ="+modelRenderer.rotationPointZ);		return modelRenderer;	}	@Override	public void setArmorBipedRightArmShowModel(ModchuModel_IEntityCaps entityCaps, boolean b) {		if (Modchu_EntityCapsHelper.getCapsValueBoolean(this, entityCaps, caps_actionFlag) && Modchu_EntityCapsHelper.getCapsValueInt(this, entityCaps, caps_actionRequestNumber) == 1 | Modchu_EntityCapsHelper.getCapsValueInt(this, entityCaps, caps_actionRequestNumber) == 6) {			setCapsValue(entityCaps, caps_visible, bipedRightArm, false);		} else setCapsValue(entityCaps, caps_visible, bipedRightArm, b);		if (rightArm != null) setCapsValue(entityCaps, caps_visible, rightArm, b);		if (rightArm2 != null) setCapsValue(entityCaps, caps_visible, rightArm2, b);		if (rightHand != null) setCapsValue(entityCaps, caps_visible, rightHand, b);	}	@Override	public void setArmorBipedLeftArmShowModel(ModchuModel_IEntityCaps entityCaps, boolean b) {		if (Modchu_EntityCapsHelper.getCapsValueBoolean(this, entityCaps, caps_actionFlag) && Modchu_EntityCapsHelper.getCapsValueInt(this, entityCaps, caps_actionRequestNumber) == 1 | Modchu_EntityCapsHelper.getCapsValueInt(this, entityCaps, caps_actionRequestNumber) == 6) {			setCapsValue(entityCaps, caps_visible, bipedLeftArm, false);		} else setCapsValue(entityCaps, caps_visible, bipedLeftArm, b);		if (leftArm != null) setCapsValue(entityCaps, caps_visible, leftArm, b);		if (leftArm2 != null) setCapsValue(entityCaps, caps_visible, leftArm2, b);		if (leftHand != null) setCapsValue(entityCaps, caps_visible, leftHand, b);	}	@Override	public void setArmorBipedRightLegShowModel(ModchuModel_IEntityCaps entityCaps, boolean b) {		if (Modchu_EntityCapsHelper.getCapsValueBoolean(this, entityCaps, caps_actionFlag) && Modchu_EntityCapsHelper.getCapsValueInt(this, entityCaps, caps_actionRequestNumber) == 1 | Modchu_EntityCapsHelper.getCapsValueInt(this, entityCaps, caps_actionRequestNumber) == 6) {			setCapsValue(entityCaps, caps_visible, bipedRightLeg, false);		} else setCapsValue(entityCaps, caps_visible, bipedRightLeg, b);		if (rightLeg != null) setCapsValue(entityCaps, caps_visible, rightLeg, b);		if (rightLeg2 != null) setCapsValue(entityCaps, caps_visible, rightLeg2, b);	}	@Override	public void setArmorBipedLeftLegShowModel(ModchuModel_IEntityCaps entityCaps, boolean b) {		if (Modchu_EntityCapsHelper.getCapsValueBoolean(this, entityCaps, caps_actionFlag) && Modchu_EntityCapsHelper.getCapsValueInt(this, entityCaps, caps_actionRequestNumber) == 1 | Modchu_EntityCapsHelper.getCapsValueInt(this, entityCaps, caps_actionRequestNumber) == 6) {			setCapsValue(entityCaps, caps_visible, bipedLeftLeg, false);		} else setCapsValue(entityCaps, caps_visible, bipedLeftLeg, b);		if (leftLeg != null) setCapsValue(entityCaps, caps_visible, leftLeg, b);		if (leftLeg2 != null) setCapsValue(entityCaps, caps_visible, leftLeg2, b);	}	public void setArmorBipedOtherShowModel(ModchuModel_IEntityCaps entityCaps, boolean b) {		setCapsValue(entityCaps, caps_visible, bipedHeadwear, b);	}	public int[] getMotionModelRendererSettingInt(String s) {		int[] i = new int[7];		if (s.lastIndexOf("mainFrame") > -1				| s.lastIndexOf("center") > -1) {			i[0] = 3;			i[1] = 4;			i[2] = 5;			i[3] = 1;			i[4] = 0;			i[5] = 1;			i[6] = 1;		} else if (s.lastIndexOf("Shoulder") > -1) {			i[0] = 3;			i[1] = 4;			i[2] = 5;			i[3] = 1;			i[4] = 1;			i[5] = 1;			i[6] = 1;		} else if (s.lastIndexOf("Body") > -1) {			i[0] = 3;			i[1] = 4;			i[2] = 5;			i[3] = 1;			i[4] = 1;			i[5] = 1;			i[6] = 0;		} else if (s.lastIndexOf("Arm") > -1) {			i[0] = 3;			i[1] = 4;			i[2] = 5;			i[3] = 1;			i[4] = 1;			i[5] = 1;			i[6] = 0;		} else if (s.lastIndexOf("Leg") > -1) {			i[0] = 3;			i[1] = 4;			i[2] = 5;			i[3] = 1;			i[4] = 1;			i[5] = 1;			i[6] = 0;		} else if (s.lastIndexOf("hip") > -1) {			i[0] = 3;			i[1] = 4;			i[2] = 5;			i[3] = 1;			i[4] = 1;			i[5] = 1;			i[6] = 0;		} else {			i[0] = 3;			i[1] = 4;			i[2] = 5;			i[3] = 1;			i[4] = 1;			i[5] = 1;			i[6] = 0;		}		//if (debug) Modchu_Debug.mDebug("actionInit6 i[0]="+i[0]+" i[1]="+i[1]+" i[2]="+i[2]+" i[3]="+i[3]+" i[4]="+i[4]+" i[5]="+i[5]+" i[6]="+i[6]);		return i;	}	public HashMap<String, String> getMotionRenameMap() {		return motionRenameMap;	}	public void setMotionRenameMap(HashMap map) {		motionRenameMap = map;	}	public String getMotionRenameMap(String s) {		String s1 = motionRenameMap.get(s);		return s1 != null ? s1 : s;	}	public void putMotionRenameMap(String s, String s1) {		motionRenameMap.put(s, s1);	}	public void motionRenameMapClear() {		motionRenameMap.clear();	}	public Modchu_ModelRenderer getStringModelRendererMap(String s) {		return stringModelRendererMap != null				&& stringModelRendererMap.containsKey(s) ? stringModelRendererMap.get(s) : null;	}	public void putStringModelRendererMap(String s, Modchu_ModelRenderer m) {		if (stringModelRendererMap != null) ;else stringModelRendererMap = new ConcurrentHashMap();		if (!stringModelRendererMap.containsKey(s)) stringModelRendererMap.put(s, m);	}}