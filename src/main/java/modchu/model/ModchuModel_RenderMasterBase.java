package modchu.model;import java.awt.image.BufferedImage;import java.io.Closeable;import java.io.FileNotFoundException;import java.io.IOException;import java.io.InputStream;import java.lang.reflect.Method;import java.util.HashMap;import java.util.List;import java.util.Map;import org.lwjgl.opengl.GL11;import org.lwjgl.opengl.GL12;import modchu.lib.Modchu_AS;import modchu.lib.Modchu_CastHelper;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_GlStateManager;import modchu.lib.Modchu_ISimpleTexture;import modchu.lib.Modchu_Main;import modchu.lib.Modchu_Reflect;import modchu.lib.Modchu_RenderEngine;import modchu.lib.Modchu_RendererLivingEntityMasterBasis;import modchu.model.multimodel.base.MultiModelBaseBiped;public class ModchuModel_RenderMasterBase extends Modchu_RendererLivingEntityMasterBasis {	public Object modelBase;	public Object armorBase;	public ModchuModel_ModelBaseSolo modelMain;	public ModchuModel_ModelBaseDuo modelFATT;	public static Object[] armorItemStack = { Modchu_Reflect.newInstance("ItemStack", new Class[]{ Modchu_Reflect.loadClass("Item") }, new Object[]{ Modchu_AS.get(Modchu_AS.getItem, "diamond_helmet") }), Modchu_Reflect.newInstance("ItemStack", new Class[]{ Modchu_Reflect.loadClass("Item") }, new Object[]{ Modchu_AS.get(Modchu_AS.getItem, "diamond_chestplate") }), Modchu_Reflect.newInstance("ItemStack", new Class[]{ Modchu_Reflect.loadClass("Item") }, new Object[]{ Modchu_AS.get(Modchu_AS.getItem, "diamond_leggings") }), Modchu_Reflect.newInstance("ItemStack", new Class[]{ Modchu_Reflect.loadClass("Item") }, new Object[]{ Modchu_AS.get(Modchu_AS.getItem, "diamond_boots") }) };	public boolean checkGlEnableWrapper = true;	public boolean checkGlDisableWrapper = true;	public boolean shadersHurtFlashFlag = false;	public final boolean slimFlag;	private int glTextureId;	public ModchuModel_RenderMasterBase(HashMap<String, Object> map) {		super(map);		Modchu_Debug.lDebug("ModchuModel_RenderMasterBase init base=" + base);		modelBase = Modchu_Main.newModchuCharacteristicObject("Modchu_ModelBiped", ModchuModel_ModelBaseSolo.class);		modelMain = (ModchuModel_ModelBaseSolo) Modchu_Main.getModchuCharacteristicObjectMaster(modelBase);		modelMain.isModelAlphablend = ModchuModel_ConfigData.AlphaBlend;		armorBase = Modchu_Main.newModchuCharacteristicObject("Modchu_ModelBiped", ModchuModel_ModelBaseDuo.class);		modelFATT = (ModchuModel_ModelBaseDuo) Modchu_Main.getModchuCharacteristicObjectMaster(armorBase);		modelFATT.isModelAlphablend = ModchuModel_ConfigData.AlphaBlend;		modelMain.capsLink = modelFATT;		if (Modchu_Main.getMinecraftVersion() > 159 && Modchu_Main.mmmLibVersion > 499) {			int i2 = 15728784;			modelMain.lighting = i2;			modelFATT.lighting = i2;		}		slimFlag = map != null && map.containsKey("boolean") ? Modchu_CastHelper.Boolean(map.get("boolean")) : false;		Modchu_Debug.lDebug("ModchuModel_RenderMasterBase init slimFlag=" + slimFlag);		int version = Modchu_Main.getMinecraftVersion();		if (version > 179) {			Object layerArmorBase = Modchu_Main.newModchuCharacteristicObject("Modchu_LayerArmorBase", ModchuModel_LayerArmorBaseMaster.class, base);			Modchu_Debug.lDebug("ModchuModel_RenderMasterBase init layerBipedArmor=" + layerArmorBase);			if (layerArmorBase != null) base.setLayer(Modchu_Reflect.loadClass("LayerArmorBase"), layerArmorBase);			Object layerHeldItem = Modchu_Main.newModchuCharacteristicObject("Modchu_LayerHeldItem", ModchuModel_LayerHeldItemMaster.class, base);			Modchu_Debug.lDebug("ModchuModel_RenderMasterBase init layerHeldItem=" + layerHeldItem);			if (layerHeldItem != null) base.setLayer(Modchu_Reflect.loadClass("LayerHeldItem"), layerHeldItem);			Object layerCustomHead = Modchu_Main.newModchuCharacteristicObject("Modchu_LayerCustomHead", ModchuModel_LayerCustomHeadMaster.class, null);			Modchu_Debug.lDebug("ModchuModel_RenderMasterBase init layerCustomHead=" + layerCustomHead);			if (layerCustomHead != null) base.setLayer(Modchu_Reflect.loadClass("LayerCustomHead"), layerCustomHead);		}	}	@Override	public int setArmorModel(Object entity, int i, float f) {		return setArmorModel(null, entity, i, f, 0);	}	@Override	public int setArmorModel(Object model, Object entity, int i, float f, int i2) {		// アーマーの表示設定		//Modchu_Debug.mDebug("ModchuModel_RenderMasterBase setArmorModel 0 i="+i);		if (!Modchu_AS.getBoolean(Modchu_AS.worldIsRemote, entity)) {			//Modchu_Debug.mDebug("setArmorModel worldIsRemote return");			return -1;		}		ModchuModel_ModelDataBase entityCaps = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		byte byte0 = -1;		//Modchu_Debug.mDebug("setArmorModel showArmor="+entityCaps.getCapsValueBoolean(entityCaps.caps_freeVariable, "showArmor"));		if (entityCaps != null				&& entityCaps.getCapsValueBoolean(entityCaps.caps_freeVariable, "showArmor")); else return byte0;		//Modchu_Debug.mDebug("setArmorModel 1 i="+i);		Object itemstack = getArmorItemStack(entity, i);		//Modchu_Debug.mDebug("setArmorModel itemstack="+itemstack);		//if (itemstack != null) Modchu_Debug.mDebug("setArmorModel itemStackStackSize="+(Modchu_AS.getInt(Modchu_AS.itemStackStackSize, itemstack)));		if (itemstack != null				&& Modchu_AS.getInt(Modchu_AS.itemStackStackSize, itemstack) > 0); else {			//Modchu_Debug.mDebug("setArmorModel return byte0="+byte0);			return byte0;		}		if (model != null); else {			modelFATT.renderParts = i;			modelFATT.shouldRenderPass = -1;		}		if (i == 3) {			int version = Modchu_Main.getMinecraftVersion();			if ((version > 129					&& !ModchuModel_ConfigData.useInvisibilityArmor)					| (version > 129							&& ModchuModel_ConfigData.useInvisibilityArmor							&& !Modchu_AS.getBoolean(Modchu_AS.entityIsInvisible))					| version < 130) {				modelFATT.setArmorRendering(true);			} else {				modelFATT.setArmorRendering(false);			}		}		if (model != null) {			((MultiModelBaseBiped) model).showAllParts(entityCaps);		} else {			//Modchu_Debug.mDebug("setArmorModel showAllParts i="+i);			if (entityCaps.models[1] != null) entityCaps.models[1].showAllParts(entityCaps);			if (entityCaps.models[2] != null) entityCaps.models[2].showAllParts(entityCaps);		}		//Modchu_Debug.mDebug("setArmorModel 2 i="+i);		Object item = Modchu_AS.get(Modchu_AS.itemStackGetItem, itemstack);		if (item != null				&& Modchu_Reflect.loadClass("ItemArmor").isInstance(item)); else return byte0;		if (model != null) {			((MultiModelBaseBiped) model).showArmorParts(entityCaps, i, i2);		} else {			if (entityCaps.models[1] != null) entityCaps.models[1].showArmorParts(entityCaps, i, 0);			if (entityCaps.models[2] != null) entityCaps.models[2].showArmorParts(entityCaps, i, 1);		}/*		Modchu_Debug.mDebug1("ModchuModel_RenderMasterBase setArmorModel deba all ---------------------------- i="+i);		Map<String, Object> map = Modchu_Reflect.getAllFieldObject(entityCaps.models[2]);		for (Entry<String, Object> en : ((Map<String, Object>) map).entrySet()) {			String debas = en.getKey();			Object debao = en.getValue();			if (debao instanceof ModchuModel_ModelRenderer) {				Modchu_Debug.mDebug1(""+i+": ModchuModel_RenderMasterBase setArmorModel "+debas+".showModel="+((ModchuModel_ModelRenderer) debao).showModel);			}		}*//*		entityCaps.models[1].bipedBody.showModel = true;		entityCaps.models[1].bipedHead.showModel = true;		entityCaps.models[1].bipedLeftLeg.showModel = true;		entityCaps.models[1].bipedRightLeg.showModel = true;		entityCaps.models[1].bipedLeftArm.showModel = true;		entityCaps.models[1].bipedRightArm.showModel = true;		entityCaps.models[2].bipedBody.showModel = true;		entityCaps.models[2].bipedHead.showModel = true;		entityCaps.models[2].bipedLeftLeg.showModel = true;		entityCaps.models[2].bipedRightLeg.showModel = true;		entityCaps.models[2].bipedLeftArm.showModel = true;		entityCaps.models[2].bipedRightArm.showModel = true;*/		armorTextureSetting(entity, entityCaps, itemstack, i);		boolean isItemEnchanted = Modchu_AS.getBoolean(Modchu_AS.itemStackIsItemEnchanted, itemstack);		int armorColor = Modchu_AS.getInt(Modchu_AS.itemArmorGetColor, Modchu_AS.get(Modchu_AS.itemStackGetItem, itemstack), itemstack);		if (armorColor != -1) {			//Modchu_Debug.mDebug("ModchuModel_RenderMasterBase setArmorModel armorColor != -1 armorColor="+armorColor);			Object o = entityCaps.getCapsValue(entityCaps.caps_freeVariable, "itemArmorColor" + i);			boolean flag = true;			if (o != null) {				int i3 = Modchu_CastHelper.Int(o);				if (armorColor == i3) flag = false;				else entityCaps.setCapsValue(entityCaps.caps_freeVariable, "itemArmorColor" + i, armorColor);			} else {				entityCaps.setCapsValue(entityCaps.caps_freeVariable, "itemArmorColor" + i, armorColor);			}			if (flag) {				o = entityCaps.getCapsValue(entityCaps.caps_freeVariable, "itemArmorColorFloat" + i);				float[] f0 = Modchu_AS.getFloatArray(Modchu_AS.convertGlColor, armorColor);				//Modchu_Debug.mDebug("f0="+f0[0]+" 1="+f0[1]+" 2="+f0[2]);				entityCaps.setCapsValue(entityCaps.caps_freeVariable, "itemArmorColorFloat" + i, f0);			}			if (isItemEnchanted) {				byte0 = (byte) 31;				modelFATT.shouldRenderPass = byte0;				return byte0;			}			byte0 = (byte) 16;			modelFATT.shouldRenderPass = byte0;			return byte0;		} else {			entityCaps.setCapsValue(entityCaps.caps_freeVariable, "itemArmorColor" + i, null);			entityCaps.setCapsValue(entityCaps.caps_freeVariable, "itemArmorColorFloat" + i, null);		}		//-@-b181		byte0 = (byte) (isItemEnchanted ? 15 : 1);		//@-@b181		modelFATT.shouldRenderPass = byte0;		return byte0;	}	public Object getArmorItemStack(Object entity, int i) {		//Modchu_Debug.mDebug("ModchuModel_RenderMasterBase getArmorItemStack ");		Object o = Modchu_Reflect.loadClass("EntityLiving").isInstance(entity) ? Modchu_AS.get(Modchu_AS.entityLivingGetCurrentArmor, entity, i) : null;		//Modchu_Debug.mDebug("ModchuModel_RenderMasterBase getArmorItemStack entity="+entity);		//Modchu_Debug.mDebug("ModchuModel_RenderMasterBase getArmorItemStack o="+o);		return o;	}	protected void armorTextureSetting(Object entity, ModchuModel_ModelDataBase entityCaps, Object itemStack, int i) {		if (entityCaps.getCapsValueBoolean(entityCaps.caps_freeVariable, "cancelArmorTextureSetting")) return;		int i2 = i;		String t = Modchu_CastHelper.String(entityCaps.getCapsValue(entityCaps.caps_textureArmorName));		//Modchu_Debug.mDebug("ModchuModel_RenderMasterBase armorTextureSetting t="+t);		boolean isBiped = ModchuModel_Main.bipedCheck(entityCaps.models[0]);		if (t != null) ;		else t = isBiped ? "Biped" : "default";		if (t.equals("NULL")) {			if (modelFATT != null) {				if (entityCaps.textures[1] != null) entityCaps.textures[1][i] = null;				if (entityCaps.textures[2] != null) entityCaps.textures[2][i] = null;			}			return;		}		if (isBiped) {			Object t1 = Modchu_AS.get(Modchu_AS.getBipedArmor, entity, itemStack, 1, i, null);			Object t2 = Modchu_AS.get(Modchu_AS.getBipedArmor, entity, itemStack, 2, i, null);			//Object t3 = Modchu_AS.get(Modchu_AS.getBipedArmor, entity, itemStack, 1, i, "overlay");			//Object t4 = Modchu_AS.get(Modchu_AS.getBipedArmor, entity, itemStack, 2, i, "overlay");			//Object t5 = Modchu_AS.get(Modchu_AS.getBipedArmor, entity, itemStack, Modchu_AS.get("EntityEquipmentSlot", "LEGS"), i, null);			//Modchu_Debug.mDebug("setArmorModel isBiped t1="+t1);			//Modchu_Debug.mDebug("setArmorModel isBiped t2="+t2);			//Modchu_Debug.mDebug("setArmorModel isBiped t3="+t3);			//Modchu_Debug.mDebug("setArmorModel isBiped t4="+t4);			//if (entityCaps.textures[5] != null) entityCaps.textures[5][i] = t3;			//if (entityCaps.textures[6] != null) entityCaps.textures[6][i] = t4;			int version = Modchu_Main.getMinecraftVersion();			if (Modchu_Main.isForge && version > 159) {				if (version > 189) {					//Modchu_Debug.mDebug("setArmorModel isBiped i="+i);					if (i == 1) {						if (entityCaps.textures[1] != null) entityCaps.textures[1][i] = t2;					} else {						if (entityCaps.textures[2] != null) entityCaps.textures[2][i] = t2;					}					//Modchu_Debug.mDebug("setArmorModel isBiped entityCaps.textures[2]="+entityCaps.textures[2]);				} else {					if (i == 1) {						if (entityCaps.textures[1] != null) entityCaps.textures[1][i] = t2;					}					if (entityCaps.textures[2] != null) entityCaps.textures[2][i] = t1;				}			} else {				if (version > 159) {					if (entityCaps.textures[1] != null) entityCaps.textures[1][i] = t2;					if (entityCaps.textures[2] != null) entityCaps.textures[2][i] = t1;				} else {					Object t5 = ModchuModel_TextureManagerBase.instance.textureManagerGetArmorTexture(t, 64, itemStack);					Object t6 = ModchuModel_TextureManagerBase.instance.textureManagerGetArmorTexture(t, 80, itemStack);					if (entityCaps.textures[1] != null) entityCaps.textures[1][i] = t5 != null ? t5 : t2;					if (entityCaps.textures[2] != null) entityCaps.textures[2][i] = t6 != null ? t6 : t1;				}			}		} else {			if (entityCaps.textures[1] != null) {				Object o = ModchuModel_TextureManagerBase.instance.textureManagerGetArmorTexture(t, 64, itemStack);				if (entityCaps.textures[1][i] != o) {					entityCaps.textures[1][i] = o;				}				/*								Object o1 = ModchuModel_TextureManagerBase.instance.textureManagerGetArmorTexture(t, 69, itemStack);								if (entityCaps.textures[5][i] != o1) {									entityCaps.textures[5][i] = o1;								}				*/			}			if (entityCaps.textures[2] != null) {				Object o = ModchuModel_TextureManagerBase.instance.textureManagerGetArmorTexture(t, 80, itemStack);				if (entityCaps.textures[2][i] != o) {					entityCaps.textures[2][i] = o;				}				/*								Object o1 = ModchuModel_TextureManagerBase.instance.textureManagerGetArmorTexture(t, 85, itemStack);								if (entityCaps.textures[6][i] != o1) {									entityCaps.textures[6][i] = o1;								}				*/			}		}		/*				Modchu_Debug.mDebug("setArmorModel entityCaps.models[1]="+entityCaps.models[1]);				Modchu_Debug.mDebug("setArmorModel entityCaps.models[2]="+entityCaps.models[2]);				Modchu_Debug.mDebug("setArmorModel entityCaps.textures[1]["+i+"]="+entityCaps.textures[1][i]);				Modchu_Debug.mDebug("setArmorModel entityCaps.textures[2]["+i+"]="+entityCaps.textures[2][i]);		*/	}	@Override	public int shouldRenderPass(Object entityliving, int i, float f) {		ModchuModel_ModelDataBase entityCaps = ModchuModel_ModelDataMaster.instance.getPlayerData(entityliving);		modelFATT.isRendering = true;		if (Modchu_Main.getMinecraftVersion() > 179) {			//setRenderPassModel(entityCaps.models[1], entityCaps.models[2]);		} else {			setRenderPassModel(armorBase);		}		//Modchu_Debug.mDebug("PFLM_RenderPlayerDummyMaster shouldRenderPass entity.showArmor="+entityCaps.getCapsValue(entityCaps.caps_freeVariable, "showArmor"));		return entityCaps.getCapsValueBoolean(entityCaps.caps_freeVariable, "showArmor") ? 1 : -1;	}	@Override	public void preRenderCallback(Object entity, float par2) {		renderScale(entity, par2);	}	@Override	public void renderScale(Object entity, float f) {		ModchuModel_ModelDataBase entityCaps = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		float f1 = entityCaps.getCapsValueFloat(entityCaps.caps_modelScale);		//Modchu_Debug.mDebug("preRenderCallback f1="+f1);		if (f1 == 0.0F) {			f1 = entityCaps.models[0] instanceof MultiModelBaseBiped ? entityCaps.models[0].getModelScale(entityCaps) : 0.9375F;		}		GL11.glScalef(f1, f1, f1);		return;	}	public void oldDoRenderLivingPFLM(ModchuModel_ModelDataBase entityCaps, Object entity, double d, double d1, double d2, float f, float f1) {		//Modchu_Debug.mDebug("ModchuModel_RenderMasterBase oldDoRenderLivingPFLM");		GL11.glEnable(GL11.GL_COLOR_MATERIAL);		GL11.glPushMatrix();		Modchu_AS.set(Modchu_AS.renderHelperEnableStandardItemLighting);		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);		if (ModchuModel_Main.isShaders && !shadersHurtFlashFlag) {			//Shaders.glDisableWrapper(k1);			shadersGlDisableWrapper(GL11.GL_CULL_FACE);		} else {			GL11.glDisable(GL11.GL_CULL_FACE);		}		int version = Modchu_Main.getMinecraftVersion();		try {			float f2;			float f3;			float f4;			float prevRenderYawOffset = Modchu_AS.getFloat(Modchu_AS.entityLivingBasePrevRenderYawOffset, entity);			float renderYawOffset = Modchu_AS.getFloat(Modchu_AS.entityLivingBaseRenderYawOffset, entity);			float prevRotationYawHead = Modchu_AS.getFloat(Modchu_AS.entityLivingBasePrevRotationYawHead, entity);			float rotationYawHead = Modchu_AS.getFloat(Modchu_AS.entityLivingBaseRotationYawHead, entity);			float prevLimbSwingAmount = Modchu_AS.getFloat(Modchu_AS.entityLivingBasePrevLimbSwingAmount, entity);			float limbSwingAmount = Modchu_AS.getFloat(Modchu_AS.entityLivingBaseLimbSwingAmount, entity);			float limbSwing = Modchu_AS.getFloat(Modchu_AS.entityLivingBaseLimbSwing, entity);			float prevRotationYaw = Modchu_AS.getFloat(Modchu_AS.entityPrevRotationYaw, entity);			float rotationYaw = Modchu_AS.getFloat(Modchu_AS.entityRotationYaw, entity);			float prevRotationPitch = Modchu_AS.getFloat(Modchu_AS.entityPrevRotationPitch, entity);			float rotationPitch = Modchu_AS.getFloat(Modchu_AS.entityRotationPitch, entity);			if (version < 140) {				f2 = prevRenderYawOffset + (renderYawOffset - prevRenderYawOffset) * f1;				f3 = prevRotationYaw + (rotationYaw - prevRotationYaw) * f1;				f4 = prevRotationPitch + (rotationPitch - prevRotationPitch) * f1;			} else {				f2 = interpolateRotation(prevRenderYawOffset, renderYawOffset, f1);				f3 = interpolateRotation(prevRotationYawHead, rotationYawHead, f1);				f4 = prevRotationPitch + (rotationPitch - prevRotationPitch) * f1;			}			renderLivingAt(entity, d, d1, d2);			float f5 = handleRotationFloat(entity, f1);			applyRotations(entity, f5, f2, f1);			float f6 = 0.0625F;			if (ModchuModel_Main.isShaders && !shadersHurtFlashFlag) {				//Shaders.glEnableWrapper(GL12.GL_RESCALE_NORMAL);				shadersGlEnableWrapper(GL12.GL_RESCALE_NORMAL);			} else {				GL11.glEnable(GL12.GL_RESCALE_NORMAL);			}			GL11.glScalef(-1F, -1F, 1.0F);			preRenderCallback(entity, f1);			GL11.glTranslatef(0.0F, -24F * f6 - 0.0078125F, 0.0F);			float f7 = prevLimbSwingAmount + (limbSwingAmount - prevLimbSwingAmount) * f1;			float f8 = limbSwing - limbSwingAmount * (1.0F - f1);			if (version > 89 && Modchu_AS.getBoolean(Modchu_AS.entityLivingBaseIsChild, entity)) {				f8 *= 3F;			}			if (f7 > 1.0F) {				f7 = 1.0F;			}			settingDoRenderLivingAlphaBlend();			//entityCaps.setCapsValue(entityCaps.caps_Entity, entity);			Modchu_AS.set(Modchu_AS.modelBaseSetLivingAnimations, modelBase, entity, f8, f7, f1);			renderModel(entity, entityCaps, f8, f7, f5, f3 - f2, f4, f6);			float f9 = 1.0F;			if (version < 80) {				//if (currentScreen == null | currentScreen instanceof GuiIngameMenu)				f9 = (Float) Modchu_Reflect.invokeMethod("Entity", "func_382_a", "getEntityBrightness", new Class[]{ float.class }, entity, new Object[]{ f1 });			}			Object renderPassModel = getRenderPassModel();			for (int i = 0; i < 4; i++) {				int j = setArmorModel(entity, i, f);				if (j <= 0) {					continue;				}				for (int l = 0; l < 5; l += 4) {					if (shouldRenderPass(entity, i + l, f1) < 0) {						continue;					}					float f10 = 1.0F;					if (ModchuModel_ConfigData.AlphaBlend) {						if (ModchuModel_Main.isShaders && !shadersHurtFlashFlag) {							//Shaders.glEnableWrapper(GL11.GL_BLEND);							shadersGlEnableWrapper(GL11.GL_BLEND);						} else {							GL11.glEnable(GL11.GL_BLEND);						}						GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);					}					f10 = ModchuModel_ConfigData.transparency;					GL11.glColor4f(f9, f9, f9, f10);					//modelMain.setEntityCaps(entityCaps);					Modchu_AS.set(Modchu_AS.modelBaseSetLivingAnimations, renderPassModel, entity, f8, f7, f1);					//renderPassModel.setLivingAnimations(entity, f8, f7, f1);					Modchu_AS.set(Modchu_AS.setArmorRendering, renderPassModel, true);					if ((version > 129 && !ModchuModel_ConfigData.useInvisibilityArmor) | (ModchuModel_ConfigData.useInvisibilityArmor && !Modchu_AS.getBoolean(Modchu_AS.entityIsInvisible, entity)) | version < 130) {						Modchu_AS.set(Modchu_AS.modelBaseRender, renderPassModel, entity, f8, f7, f5, f3 - f2, f4, f6);					}					if (ModchuModel_ConfigData.transparency != 1.0F) GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);					if (version < 90 | j != 15) {						continue;					}					float f11 = Modchu_AS.getInt(Modchu_AS.entityTicksExisted, entity) + f1;					Modchu_AS.set(Modchu_AS.renderBindTexture, base, version > 159 ? Modchu_AS.get(Modchu_AS.rendererLivingEntityRES_ITEM_GLINT, base) : "%blur%/misc/glint.png");					if (ModchuModel_Main.isShaders && !shadersHurtFlashFlag) {						//Shaders.glEnableWrapper(GL11.GL_BLEND);						shadersGlEnableWrapper(GL11.GL_BLEND);					} else {						GL11.glEnable(GL11.GL_BLEND);					}					float f13 = 0.5F;					GL11.glColor4f(f13, f13, f13, 1.0F);					GL11.glDepthFunc(GL11.GL_EQUAL);					GL11.glDepthMask(false);					for (int j1 = 0; j1 < 2; j1++) {						if (ModchuModel_Main.isShaders && !shadersHurtFlashFlag) {							//Shaders.glDisableWrapper(GL11.GL_LIGHTING);							shadersGlDisableWrapper(GL11.GL_LIGHTING);						} else {							GL11.glDisable(GL11.GL_LIGHTING);						}						float f16 = 0.76F;						GL11.glColor4f(0.5F * f16, 0.25F * f16, 0.8F * f16, 1.0F);						GL11.glBlendFunc(GL11.GL_SRC_COLOR, GL11.GL_ONE);						GL11.glMatrixMode(GL11.GL_TEXTURE);						GL11.glLoadIdentity();						float f17 = f11 * (0.001F + j1 * 0.003F) * 20F;						float f18 = 0.3333333F;						GL11.glScalef(f18, f18, f18);						GL11.glRotatef(30F - j1 * 60F, 0.0F, 0.0F, 1.0F);						GL11.glTranslatef(0.0F, f17, 0.0F);						GL11.glMatrixMode(GL11.GL_MODELVIEW);						if ((version > 129 && !ModchuModel_ConfigData.useInvisibilityArmor) | (version > 129 && ModchuModel_ConfigData.useInvisibilityArmor && !Modchu_AS.getBoolean(Modchu_AS.entityIsInvisible, entity)) | version < 130) {							Modchu_AS.set(Modchu_AS.modelBaseRender, renderPassModel, entity, f8, f7, f5, f3 - f2, f4, f6);						}					}					GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);					GL11.glMatrixMode(GL11.GL_TEXTURE);					GL11.glDepthMask(true);					GL11.glLoadIdentity();					GL11.glMatrixMode(GL11.GL_MODELVIEW);					if (ModchuModel_Main.isShaders && !shadersHurtFlashFlag) {						//Shaders.glEnableWrapper(GL11.GL_LIGHTING);						shadersGlEnableWrapper(GL11.GL_LIGHTING);					} else {						GL11.glEnable(GL11.GL_LIGHTING);					}					if (ModchuModel_ConfigData.AlphaBlend) {						if (ModchuModel_Main.isShaders && !shadersHurtFlashFlag) {							//Shaders.glEnableWrapper(GL11.GL_BLEND);							shadersGlEnableWrapper(GL11.GL_BLEND);						} else {							GL11.glEnable(GL11.GL_BLEND);						}						GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);					} else {						if (ModchuModel_Main.isShaders && !shadersHurtFlashFlag) {							//Shaders.glDisableWrapper(GL11.GL_BLEND);							shadersGlDisableWrapper(GL11.GL_BLEND);						} else {							GL11.glDisable(GL11.GL_BLEND);						}					}					GL11.glDepthFunc(GL11.GL_LEQUAL);				}				GL11.glEnable(GL11.GL_ALPHA_TEST);			}			if (ModchuModel_Main.isShaders && !shadersHurtFlashFlag) {				//Shaders.glDisableWrapper(GL11.GL_BLEND);				shadersGlDisableWrapper(GL11.GL_BLEND);				//Shaders.glEnableWrapper(GL11.GL_ALPHA_TEST);				shadersGlEnableWrapper(GL11.GL_ALPHA_TEST);			} else {				GL11.glDisable(GL11.GL_BLEND);				GL11.glEnable(GL11.GL_ALPHA_TEST);			}			if (version < 80) GL11.glColor4f(f9, f9, f9, 1.0F);			//modelMain.setEntityCaps(entityCaps);			/*						if (version > 129								&& entity.isInvisible()								| version < 130) {			*/			Modchu_AS.set(Modchu_AS.modelBaseSetRotationAngles, modelBase, f8, f7, f5, f3 - f2, f4, f6, entity);			Modchu_AS.set(Modchu_AS.modelBaseSetRotationAngles, armorBase, f8, f7, f5, f3 - f2, f4, f6, entity);			/*						}			*/			if (ModchuModel_Main.isShaders && shadersHurtFlashFlag && (Boolean) Modchu_Reflect.getFieldObject("Shaders", "useEntityHurtFlash")) {				Modchu_Reflect.invokeMethod("Shaders", "setEntityHurtFlash", new Class[]{ int.class, int.class }, new Object[]{ 0, 0 });			}			renderEquippedItems(entity, f1);			boolean hurtFlag = ModchuModel_Main.isShaders && shadersHurtFlashFlag && !(Boolean) Modchu_Reflect.getFieldObject("Shaders", "useEntityHurtFlash") ? true : false;			if (!hurtFlag) {				f9 = Modchu_AS.getFloat(Modchu_AS.entityGetBrightness, f1);				int k = getColorMultiplier(entity, f9, f1);				Modchu_AS.set(Modchu_AS.openGlHelperSetActiveTexture, Modchu_AS.getInt(Modchu_AS.openGlHelperLightmapTexUnit));				if (ModchuModel_Main.isShaders && !shadersHurtFlashFlag) {					//Shaders.glDisableWrapper(GL11.GL_TEXTURE_2D);					shadersGlDisableWrapper(GL11.GL_TEXTURE_2D);				} else {					GL11.glDisable(GL11.GL_TEXTURE_2D);				}				if (ModchuModel_Main.isShaders && shadersHurtFlashFlag) Modchu_Reflect.invokeMethod("Shaders", "disableLightmap");				Modchu_AS.set(Modchu_AS.openGlHelperSetActiveTexture, Modchu_AS.getInt(Modchu_AS.openGlHelperDefaultTexUnit));				int hurtTime = Modchu_AS.getInt(Modchu_AS.entityLivingBaseHurtTime, entity);				int deathTime = Modchu_AS.getInt(Modchu_AS.entityLivingBaseDeathTime, entity);				if ((k >> 24 & 0xff) > 0 || hurtTime > 0 || deathTime > 0) {					if (ModchuModel_Main.isShaders && shadersHurtFlashFlag) Modchu_Reflect.invokeMethod("Shaders", "beginLivingDamage");					if (ModchuModel_Main.isShaders && !shadersHurtFlashFlag) {						//Shaders.glDisableWrapper(GL11.GL_TEXTURE_2D);						shadersGlDisableWrapper(GL11.GL_TEXTURE_2D);						//Shaders.glDisableWrapper(GL11.GL_ALPHA_TEST);						shadersGlDisableWrapper(GL11.GL_ALPHA_TEST);						//Shaders.glEnableWrapper(GL11.GL_BLEND);						shadersGlEnableWrapper(GL11.GL_BLEND);					} else {						GL11.glDisable(GL11.GL_TEXTURE_2D);						GL11.glDisable(GL11.GL_ALPHA_TEST);						GL11.glEnable(GL11.GL_BLEND);					}					GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);					GL11.glDepthFunc(GL11.GL_EQUAL);					if (hurtTime > 0 || deathTime > 0) {						GL11.glColor4f(f9, 0.0F, 0.0F, 0.4F);						entityCaps.models[0].render(entityCaps, f8, f7, f5, f3 - f2, f4, f6, true);						for (int i1 = 0; i1 < 4; i1++) {							if (inheritRenderPass(entity, i1, f1) >= 0) {								GL11.glColor4f(f9, 0.0F, 0.0F, 0.4F);								Modchu_AS.set(Modchu_AS.modelBaseRender, renderPassModel, entity, f8, f7, f5, f3 - f2, f4, f6);							}						}					}					if ((k >> 24 & 0xff) > 0) {						float f10 = (k >> 16 & 0xff) / 255F;						float f12 = (k >> 8 & 0xff) / 255F;						float f14 = (k & 0xff) / 255F;						float f15 = (k >> 24 & 0xff) / 255F;						GL11.glColor4f(f10, f12, f14, f15);						entityCaps.models[0].render(entityCaps, f8, f7, f5, f3 - f2, f4, f6, true);						for (int k1 = 0; k1 < 4; k1++) {							if (inheritRenderPass(entity, k1, f1) >= 0) {								GL11.glColor4f(f10, f12, f14, f15);								Modchu_AS.set(Modchu_AS.modelBaseRender, renderPassModel, entity, f8, f7, f5, f3 - f2, f4, f6);							}						}					}					GL11.glDepthFunc(GL11.GL_LEQUAL);					if (ModchuModel_Main.isShaders && !shadersHurtFlashFlag) {						//Shaders.glDisableWrapper(GL11.GL_BLEND);						shadersGlDisableWrapper(GL11.GL_BLEND);						//Shaders.glEnableWrapper(GL11.GL_ALPHA_TEST);						shadersGlEnableWrapper(GL11.GL_ALPHA_TEST);						//Shaders.glEnableWrapper(GL11.GL_TEXTURE_2D);						shadersGlEnableWrapper(GL11.GL_TEXTURE_2D);					} else {						GL11.glDisable(GL11.GL_BLEND);						GL11.glEnable(GL11.GL_ALPHA_TEST);						GL11.glEnable(GL11.GL_TEXTURE_2D);					}					if (ModchuModel_Main.isShaders && shadersHurtFlashFlag) Modchu_Reflect.invokeMethod("Shaders", "endLivingDamage");				}				if (ModchuModel_Main.isShaders && !shadersHurtFlashFlag) {					//Shaders.glDisableWrapper(GL12.GL_RESCALE_NORMAL);					shadersGlDisableWrapper(GL12.GL_RESCALE_NORMAL);				} else {					GL11.glDisable(GL12.GL_RESCALE_NORMAL);				}			}		} catch (Exception exception) {			exception.printStackTrace();		}		Modchu_AS.set(Modchu_AS.openGlHelperSetActiveTexture, Modchu_AS.getInt(Modchu_AS.openGlHelperLightmapTexUnit));		if (ModchuModel_Main.isShaders && !shadersHurtFlashFlag) {			//Shaders.glEnableWrapper(GL11.GL_TEXTURE_2D);			shadersGlEnableWrapper(GL11.GL_TEXTURE_2D);		} else {			GL11.glEnable(GL11.GL_TEXTURE_2D);		}		Modchu_AS.set(Modchu_AS.openGlHelperSetActiveTexture, Modchu_AS.getInt(Modchu_AS.openGlHelperDefaultTexUnit));		if (ModchuModel_Main.isShaders && !shadersHurtFlashFlag) {			//Shaders.glEnableWrapper(GL11.GL_CULL_FACE);			shadersGlEnableWrapper(GL11.GL_CULL_FACE);		} else {			GL11.glEnable(GL11.GL_CULL_FACE);		}		GL11.glPopMatrix();		passSpecialRender(entity, d, d1, d2);	}	protected void settingDoRenderLivingAlphaBlend() {		if (ModchuModel_Main.isShaders && !shadersHurtFlashFlag) {			//Shaders.glEnableWrapper(GL11.GL_ALPHA_TEST);			shadersGlEnableWrapper(GL11.GL_ALPHA_TEST);		} else {			GL11.glEnable(GL11.GL_ALPHA_TEST);		}		if (ModchuModel_ConfigData.AlphaBlend) {			if (ModchuModel_Main.isShaders && !shadersHurtFlashFlag) {				//Shaders.glEnableWrapper(GL11.GL_BLEND);				shadersGlEnableWrapper(GL11.GL_BLEND);			} else {				GL11.glEnable(GL11.GL_BLEND);			}			GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);		} else {			if (ModchuModel_Main.isShaders && !shadersHurtFlashFlag) {				//Shaders.glDisableWrapper(k1);				shadersGlDisableWrapper(GL11.GL_BLEND);			} else {				GL11.glDisable(GL11.GL_BLEND);			}		}	}	@Override	public void passSpecialRender(Object entityLiving, double d, double d1, double d2) {		//super.passSpecialRender(entityLiving, d, d1, d2);	}	@Override	public float interpolateRotation(float par1, float par2, float par3) {		float var4;		for (var4 = par2 - par1; var4 < -180.0F; var4 += 360.0F) {		}		while (var4 >= 180.0F) {			var4 -= 360.0F;		}		return par1 + par3 * var4;	}	@Override	public float handleRotationFloat(Object entity, float par2) {		return Modchu_AS.getInt(Modchu_AS.entityTicksExisted, entity) + par2;	}	@Override	public int getColorMultiplier(Object entity, float par2, float par3) {		return 0;	}	@Override	public int inheritRenderPass(Object entity, int par2, float par3) {		return shouldRenderPass(entity, par2, par3);	}	public void shadersGlDisableWrapper(int i) {		Package pac = this.getClass().getPackage();		String s;		if (pac == null) s = "Shaders";		else s = pac.getName().concat(".Shaders");		Method mes = null;		if (checkGlDisableWrapper) {			try {				mes = Class.forName(s).getMethod("glDisableWrapper", new Class[]{ int.class });				try {					mes.invoke(null, i);				} catch (Exception e) {					checkGlDisableWrapper = false;				}			} catch (Exception e) {				checkGlDisableWrapper = false;			}		}		if (!checkGlDisableWrapper) {			glDisableWrapper(s, i);		}	}	public void shadersGlEnableWrapper(int i) {		Package pac = this.getClass().getPackage();		String s;		if (pac == null) s = "Shaders";		else s = pac.getName().concat(".Shaders");		Method mes = null;		if (checkGlEnableWrapper) {			try {				mes = Class.forName(s).getMethod("glEnableWrapper", new Class[]{ int.class });				try {					mes.invoke(null, i);				} catch (Exception e) {					checkGlEnableWrapper = false;				}			} catch (Exception e) {				checkGlEnableWrapper = false;			}		}		if (!checkGlEnableWrapper) {			glEnableWrapper(s, i);		}	}	public void glEnableWrapper(String s, int i) {		GL11.glEnable(i);		if (i == GL11.GL_TEXTURE_2D) {			Method mes = null;			try {				mes = Class.forName(s).getMethod("glEnableWrapperTexture2D", (Class[]) null);				try {					mes.invoke(null, (Object[]) null);				} catch (Exception e) {					e.printStackTrace();				}			} catch (Exception e) {				e.printStackTrace();			}		} else if (i == GL11.GL_FOG) {			Method mes = null;			try {				mes = Class.forName(s).getMethod("glEnableWrapperFog", (Class[]) null);				try {					mes.invoke(null, (Object[]) null);				} catch (Exception e) {					e.printStackTrace();				}			} catch (Exception e) {				e.printStackTrace();			}		}	}	public void glDisableWrapper(String s, int i) {		GL11.glDisable(i);		if (i == GL11.GL_TEXTURE_2D) {			Method mes = null;			try {				mes = Class.forName(s).getMethod("glDisableWrapperTexture2D", (Class[]) null);				try {					mes.invoke(null, (Object[]) null);				} catch (Exception e) {					e.printStackTrace();				}			} catch (Exception e) {				e.printStackTrace();			}		} else if (i == GL11.GL_FOG) {			Method mes = null;			try {				mes = Class.forName(s).getMethod("glDisableWrapperFog", (Class[]) null);				try {					mes.invoke(null, (Object[]) null);				} catch (Exception e) {					e.printStackTrace();				}			} catch (Exception e) {				e.printStackTrace();			}		}	}	public void renderLivingAt(Object entity, double par2, double par4, double par6) {		superRenderLivingAt(entity, par2, par4, par6);	}	public void applyRotations(Object entity, float f, float f1, float f2) {		superRotateCorpse(entity, f, f1, f2);	}	@Override	public void renderEquippedItems(Object entity, float f) {		/*				Modchu_AS.set(Modchu_AS.renderHelperEnableStandardItemLighting);				Modchu_AS.set(Modchu_AS.openGlHelperSetActiveTexture, Modchu_AS.get(Modchu_AS.openGlHelperLightmapTexUnit));				GL11.glDisable(GL11.GL_TEXTURE_2D);				Modchu_AS.set(Modchu_AS.openGlHelperSetActiveTexture, Modchu_AS.get(Modchu_AS.openGlHelperDefaultTexUnit));				GL11.glDisable(GL12.GL_RESCALE_NORMAL);		*/	}	@Override	public void doRender(Object entity, double d, double d1, double d2, float f, float f1) {		ModchuModel_ModelDataBase entityCaps = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		doRender(entity, entityCaps, d, d1, d2, f, f1);	}	public void doRender(Object entity, ModchuModel_ModelDataBase entityCaps, double d, double d1, double d2, float f, float f1) {		doRender(entity, entityCaps, d, d1, d2, f, f1, false);	}	public void doRender(Object entity, ModchuModel_ModelDataBase entityCaps, double d, double d1, double d2, float f, float f1, boolean oldRender) {		//Modchu_Debug.mDebug("ModchuModel_RenderMasterBase doRender entity="+entity);		//Modchu_Debug.mDebug("ModchuModel_RenderMasterBase doRender entityCaps.models[0]="+entityCaps.models[0]);		//Modchu_Debug.mDebug("ModchuModel_RenderMasterBase doRender entityCaps.models[1]="+entityCaps.models[1]);		//Modchu_Debug.mDebug("ModchuModel_RenderMasterBase doRender entityCaps.models[2]="+entityCaps.models[2]);		if (modelFATT != null && modelMain != null && entityCaps.models[0] != null) ;		else return;		if (entityCaps.models[1] != null) entityCaps.models[1].isWait = entityCaps.models[0].isWait;		if (entityCaps.models[2] != null) entityCaps.models[2].isWait = entityCaps.models[0].isWait;		//Modchu_Debug.mDebug("doRender isRiding="+entityCaps.getCapsValue(entityCaps.caps_isRiding));		if (Modchu_Main.getMinecraftVersion() > 159) {			setRenderCount(modelFATT, 0);		}		boolean isRiding = entityCaps.getCapsValueBoolean(entityCaps.caps_isSitting);		entityCaps.setCapsValue(entityCaps.caps_isRiding, isRiding);		entityCaps.models[0].isRiding = isRiding;		if (entityCaps.models[1] != null) entityCaps.models[1].isRiding = isRiding;		if (entityCaps.models[2] != null) entityCaps.models[2].isRiding = isRiding;		float ff = getSwingProgress(entity, f1);		entityCaps.models[0].onGrounds[0] = ff;		if (entityCaps.models[1] != null) entityCaps.models[1].onGrounds[0] = ff;		if (entityCaps.models[2] != null) entityCaps.models[2].onGrounds[0] = ff;		boolean isSneak = entityCaps.getCapsValueBoolean(entityCaps.caps_isSneak);		entityCaps.models[0].isSneak = isSneak;		if (entityCaps.models[1] != null) entityCaps.models[1].isSneak = isSneak;		if (entityCaps.models[2] != null) entityCaps.models[2].isSneak = isSneak;		GL11.glPushMatrix();		GL11.glPushAttrib(GL11.GL_ALL_ATTRIB_BITS);		if (!ModchuModel_Main.oldRender && !oldRender) {			Modchu_AS.set(Modchu_AS.renderMainModel, base, modelBase);			//Modchu_Debug.mDebug("ModchuModel_RenderMasterBase doRender modelBase="+modelBase);			superDoRenderLiving(entity, d, d1, d2, f, f1);		} else oldDoRenderLivingPFLM(entityCaps, entity, d, d1, d2, f, f1);		GL11.glPopAttrib();		GL11.glPopMatrix();		//Modchu_Debug.mDebug("ModchuModel_RenderMasterBase doRender entityCaps.models[0]="+entityCaps.models[0]);	}	public void allModelInit(Object entity, boolean debug, boolean errorDefault) {		ModchuModel_ModelDataBase entityCaps = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		((ModchuModel_ModelDataMaster) ModchuModel_ModelDataMaster.instance).modelInit(entity, entityCaps, (String) entityCaps.getCapsValue(entityCaps.caps_textureName), debug, errorDefault);		((ModchuModel_ModelDataMaster) ModchuModel_ModelDataMaster.instance).modelArmorInit(entity, entityCaps, (String) entityCaps.getCapsValue(entityCaps.caps_textureArmorName), debug, errorDefault);	}	public void modelArmorInit(Object entity, boolean debug, boolean errorDefault) {		ModchuModel_ModelDataBase entityCaps = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		((ModchuModel_ModelDataMaster) ModchuModel_ModelDataMaster.instance).modelArmorInit(entity, entityCaps, (String) entityCaps.getCapsValue(entityCaps.caps_textureArmorName), debug, errorDefault);	}	@Override	public void renderModel(Object entity, float par2, float par3, float par4, float par5, float par6, float par7) {		ModchuModel_ModelDataBase entityCaps = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		renderModel(entity, entityCaps, par2, par3, par4, par5, par6, par7);	}	public void renderModel(Object entity, ModchuModel_ModelDataBase entityCaps, float par2, float par3, float par4, float par5, float par6, float par7) {		//Modchu_Debug.mDebug("ModchuModel_RenderMasterBase renderModel ");		if (entityCaps != null && entityCaps.getCapsValueBoolean(entityCaps.caps_freeVariable, "showMainModel")) ;		else {			if (entityCaps != null) {				//Modchu_Debug.mDebug("ModchuModel_RenderMasterBase renderModel !showMainModel return");			} else {				Modchu_Debug.mDebug("ModchuModel_RenderMasterBase renderModel entityCaps == null !! return");			}			return;		}		if (entityCaps.getCapsValue(entityCaps.caps_ResourceLocation) != null) ;		else {			//Modchu_Debug.mDebug("ModchuModel_RenderMasterBase renderModel ResourceLocation null.allModelTextureReset");			((ModchuModel_ModelDataMaster) ModchuModel_ModelDataMaster.instance).allModelTextureReset(entity, entityCaps);		}		int version = Modchu_Main.getMinecraftVersion();		if ((version > 129 && (!ModchuModel_ConfigData.useInvisibilityBody | ModchuModel_ConfigData.useInvisibilityBody && !Modchu_AS.getBoolean(Modchu_AS.entityIsInvisible, entity))) | version < 130) {			/*						if (version < 159) {							String skinUrl = null;							String texture = (String) (entityCaps.getCapsValue(entityCaps.caps_ResourceLocation));							Modchu_Reflect.invokeMethod("Render", "func_76984_a", "loadDownloadableImageTexture", new Class[]{ String.class, String.class }, base, new Object[]{ skinUrl, texture });							//Modchu_Debug.mDebug("renderModel skinUrl="+skinUrl+" texture="+texture);						} else {			*/			//Modchu_Debug.mDebug("ModchuModel_RenderMasterBase renderModel resourceLocation="+entityCaps.getCapsValue(entityCaps.caps_ResourceLocation));			bindTexture(entityCaps, entityCaps.getCapsValue(entityCaps.caps_ResourceLocation));			//}			modelMain.setArmorRendering(true);		} else {			modelMain.setArmorRendering(false);		}		renderModelRenderCapsModel(entity, entityCaps, par2, par3, par4, par5, par6, par7);		//Modchu_Debug.mDebug("renderModel modelMain.isRendering="+modelMain.isRendering);	}	protected void renderModelRenderCapsModel(Object entity, ModchuModel_ModelDataBase entityCaps, float par2, float par3, float par4, float par5, float par6, float par7) {		//GL11.glPushMatrix();		//int i2 = entityliving.getBrightnessForRender(1.0F);		//Modchu_Debug.dDebug("tes r 8 "+(entityCaps.getCapsValue(entityCaps.caps_ResourceLocation)));		//Modchu_AS.set(Modchu_AS.renderHelperDisableStandardItemLighting);		//Modchu_AS.set(Modchu_AS.openGlHelperSetActiveTexture, Modchu_AS.get(Modchu_AS.openGlHelperLightmapTexUnit));		//Modchu_AS.set(Modchu_AS.openGlHelperSetActiveTexture, Modchu_AS.get(Modchu_AS.openGlHelperDefaultTexUnit));		//GL11.glDisable(GL12.GL_RESCALE_NORMAL);		//GL11.glEnable(GL12.GL_RESCALE_NORMAL);		//GL11.glDisable(GL11.GL_CULL_FACE);		//GL11.glDisable(GL11.GL_LIGHTING);		//GL11.glEnable(GL11.GL_LIGHTING);		//GL11.glDisable(GL11.GL_BLEND);		//GL11.glDisable(GL11.GL_TEXTURE_2D);		//GL11.glDisable(GL11.GL_ALPHA_TEST);		//GL11.glEnable(GL11.GL_ALPHA_TEST);		//GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);		//GL11.glBlendFunc(GL11.GL_ONE, GL11.GL_ONE);		//GL11.glDepthFunc(GL11.GL_EQUAL);		//GL11.glDepthFunc(GL11.GL_LEQUAL);		//ModchuModel_ModelBaseNihil.setLightmapTextureCoords(0x00f000f0);//61680		//if (Modchu_Main.getMinecraftVersion() > 159 && Modchu_Main.mmmLibVersion > 499) {		//setLightmapTextureCoords(0x00f000f0);//61680		//GL11.glMatrixMode(GL11.GL_TEXTURE);		//GL11.glLoadIdentity();		//GL11.glMatrixMode(GL11.GL_MODELVIEW);		//GL11.glEnable(GL11.GL_LIGHTING);		//GL11.glEnable(GL11.GL_BLEND);		//GL11.glDisable(GL11.GL_BLEND);		//GL11.glDepthFunc(GL11.GL_LEQUAL);		//GL11.glDisable(GL11.GL_ALPHA_TEST);		//GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);		//GL11.glDepthMask(true);		//Modchu_AS.set(Modchu_AS.openGlHelperSetActiveTexture, Modchu_AS.get(Modchu_AS.openGlHelperLightmapTexUnit));		//GL11.glDisable(GL11.GL_TEXTURE_2D);		//Modchu_AS.set(Modchu_AS.openGlHelperSetActiveTexture, Modchu_AS.get(Modchu_AS.openGlHelperDefaultTexUnit));		//setLightmapTextureCoords(i2);		//}		settingDoRenderLivingAlphaBlend();		//Modchu_Debug.mDebug("ModchuModel_RenderMasterBase renderModel entityCaps.models[0]="+entityCaps.models[0]);		if (entityCaps.models[0] != null) entityCaps.models[0].render(entityCaps, par2, par3, par4, par5, par6, par7, modelMain.isRendering);		/*				if (version < 169) {					Modchu_AS.set(Modchu_AS.renderHelperEnableStandardItemLighting);					GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);					GL11.glDepthMask(true);					GL11.glEnable(GL11.GL_CULL_FACE);					GL11.glEnable(GL11.GL_BLEND);					GL11.glEnable(GL11.GL_TEXTURE_2D);					GL11.glMatrixMode(GL11.GL_TEXTURE);					GL11.glLoadIdentity();					GL11.glMatrixMode(GL11.GL_MODELVIEW);				}		*/		//if (Modchu_Main.getMinecraftVersion() > 159 && Modchu_Main.mmmLibVersion > 499) {		//setLightmapTextureCoords(i2);		//GL11.glDisable(GL11.GL_BLEND);		//GL11.glDisable(GL11.GL_ALPHA_TEST);		//GL11.glDepthMask(true);		//GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);		//GL11.glDisable(GL11.GL_LIGHTING);		//GL11.glEnable(GL11.GL_LIGHTING);		//OpenGlHelper.setActiveTexture(OpenGlHelper.lightmapTexUnit);		//GL11.glDisable(GL11.GL_TEXTURE_2D);		//OpenGlHelper.setActiveTexture(OpenGlHelper.defaultTexUnit);		//GL11.glDisable(GL11.GL_CULL_FACE);		//}		//GL11.glPopMatrix();	}	public void bindTexture(ModchuModel_ModelDataBase entityCaps, Object o) {		int skinMode = entityCaps.getCapsValueInt(entityCaps.caps_skinMode);		if ((skinMode == entityCaps.skinMode_online && !entityCaps.getCapsValueBoolean(entityCaps.caps_localFlag)) | ((skinMode == entityCaps.skinMode_Player | skinMode == entityCaps.skinMode_PlayerOnline) && !ModchuModel_ModelDataMaster.instance.getPlayerData(Modchu_AS.get(Modchu_AS.minecraftPlayer)).getCapsValueBoolean(entityCaps.caps_localFlag))) {			String username = ((ModchuModel_ModelDataMaster) ModchuModel_ModelDataMaster.instance).getUserName(entityCaps, entityCaps.getCapsValue(entityCaps.caps_Entity));			//Modchu_Debug.dDebug("bindTexture local");			//Modchu_Debug.mDebug("bindTexture local Modchu_Debug.debugPlayerName="+Modchu_Debug.debugPlayerName);			//Modchu_Debug.mDebug("bindTexture local username="+username);			Modchu_RenderEngine.instance.bindTexture(username);		} else if (o != null && base != null && Modchu_AS.get(Modchu_AS.renderRenderManagerRenderEngine, base) != null) {			//Modchu_Debug.mDebug("ModchuModel_RenderMasterBase base="+base.getClass());			//Modchu_Debug.mDebug("ModchuModel_RenderMasterBase o.getClass()="+o.getClass());			//Modchu_Debug.mDebug("ModchuModel_RenderMasterBase o="+o);			boolean debug = false;			if (debug) debugBindTexture(o);			else Modchu_AS.set(Modchu_AS.renderBindTexture, base, o);		} else {			Modchu_Debug.mDebug1("ModchuModel_RenderMasterBase bindTexture null !! o=" + o);		}		//Modchu_Debug.dDebug(null);		//Modchu_Debug.dDebug(null, 1);		//Modchu_Debug.dDebug(null, 2);	}	private void debugBindTexture(Object o) {		//renderManager.renderEngine.bindTexture(o);		boolean debug = true;		int version = Modchu_Main.getMinecraftVersion();		if (version < 170) {			debugOldBindTexture(o);			return;		}		/*				if (!((Boolean)Modchu_Debug.getFreeVariable("debugBindTextureInit"))) {					Modchu_Debug.setFreeVariable("debugBindTextureInit", true);				}		*/		Object textureManager = Modchu_AS.get(Modchu_AS.minecraftGetTextureManager);		if (debug) Modchu_Debug.mDebug1("ModchuModel_RenderMasterBase debugBindTexture textureManager=" + textureManager);		Map mapTextureObjects = Modchu_AS.getMap("TextureManager", "mapTextureObjects", textureManager);		if (debug) Modchu_Debug.mDebug1("ModchuModel_RenderMasterBase debugBindTexture mapTextureObjects=" + mapTextureObjects);		Object itextureobject = mapTextureObjects.get(o);		if (debug) Modchu_Debug.mDebug1("ModchuModel_RenderMasterBase debugBindTexture itextureobject=" + itextureobject);		if (itextureobject == null) {			if (debug) Modchu_Debug.mDebug("ModchuModel_RenderMasterBase debugBindTexture o=" + o);			itextureobject = Modchu_Reflect.newInstance("SimpleTexture", new Class[]{ Modchu_Reflect.loadClass("ResourceLocation") }, new Object[]{ o });			if (debug) Modchu_Debug.mDebug("ModchuModel_RenderMasterBase debugBindTexture new itextureobject=" + itextureobject);			debugLoadTexture(o, itextureobject);			//Modchu_AS.set("TextureManager", "loadTexture", new Class[]{ Modchu_Reflect.loadClass("ResourceLocation"), Modchu_Reflect.loadClass("ITextureObject") }, renderManager, new Object[]{ o, itextureobject });		} else if (itextureobject instanceof Modchu_ISimpleTexture) {			debugLoadTexture(o, itextureobject);		}		if (debug) Modchu_Debug.mDebug1("ModchuModel_RenderMasterBase debugBindTexture itextureobject=" + itextureobject);		Modchu_AS.set(Modchu_AS.textureUtilBindTexture, Modchu_AS.getInt("ITextureObject", "getGlTextureId", itextureobject));		//Modchu_AS.set(Modchu_AS.renderBindTexture, base, o);	}	private boolean debugLoadTexture(Object textureLocation, Object textureObj) {		boolean debug = true;		boolean flag = true;		Object textureManager = Modchu_AS.get(Modchu_AS.minecraftGetTextureManager);		Map mapTextureObjects = Modchu_AS.getMap("TextureManager", "mapTextureObjects", textureManager);		try {			Object theResourceManager = Modchu_AS.get("TextureManager", "theResourceManager", textureManager);			if (debug) Modchu_Debug.mDebug1("ModchuModel_RenderMasterBase debugLoadTexture theResourceManager=" + theResourceManager);			debugLoadTexture_s(textureLocation, theResourceManager);			//Modchu_AS.set("ITextureObject", "loadTexture", new Class[]{ Modchu_Reflect.loadClass("ResourceLocation") }, textureObj, new Object[]{ theResourceManager });			//((ITextureObject) textureObj).loadTexture(theResourceManager);		} catch (Exception e) {			//LOGGER.warn("Failed to load texture: {}", new Object[]{ textureLocation, ioexception });			textureObj = Modchu_AS.get("TextureUtil", "MISSING_TEXTURE");			e.printStackTrace();			flag = false;		} catch (Throwable throwable) {			/*						final ITextureObject p_110579_2_f = textureObj;						CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Registering texture");						CrashReportCategory crashreportcategory = crashreport.makeCategory("Resource location being registered");						crashreportcategory.addCrashSection("Resource location", textureLocation);						crashreportcategory.setDetail("Texture object class", new ICrashReportDetail<String>() {							public String call() throws Exception {								return p_110579_2_f.getClass().getName();							}						});						throw new ReportedException(crashreport);			*/			throwable.printStackTrace();		}		mapTextureObjects.put(textureLocation, textureObj);		return flag;	}	public void debugLoadTexture_s(Object textureLocation, Object resourceManager) throws IOException {		boolean debug = true;		deleteGlTexture();		Object iresource = null;		try {			if (debug) Modchu_Debug.mDebug1("ModchuModel_RenderMasterBase debugLoadTexture_s resourceManager=" + resourceManager);			Map domainResourceManagers = Modchu_AS.getMap("SimpleReloadableResourceManager", "domainResourceManagers", resourceManager);			if (debug) Modchu_Debug.mDebug1("ModchuModel_RenderMasterBase debugLoadTexture_s domainResourceManagers=" + domainResourceManagers);			Object fallbackResourceManager = domainResourceManagers.get("minecraft");			if (debug) Modchu_Debug.mDebug1("ModchuModel_RenderMasterBase debugLoadTexture_s fallbackResourceManager=" + fallbackResourceManager);			iresource = getResource(textureLocation, fallbackResourceManager);			//iresource = Modchu_AS.get("IResourceManager", "getResource", new Class[]{ Modchu_Reflect.loadClass("ResourceLocation") }, resourceManager, new Object[]{ textureLocation });			if (debug) Modchu_Debug.mDebug1("ModchuModel_RenderMasterBase debugLoadTexture_s iresource=" + iresource);			BufferedImage bufferedimage = (BufferedImage) Modchu_AS.get("TextureUtil", "readBufferedImage", new Class[]{ InputStream.class }, new Object[]{ Modchu_AS.get("IResource", "getInputStream", iresource) });			if (debug) Modchu_Debug.mDebug1("ModchuModel_RenderMasterBase debugLoadTexture_s bufferedimage=" + bufferedimage);			boolean flag = false;			boolean flag1 = false;			if (Modchu_AS.getBoolean("IResource", "hasMetadata", iresource)) {				try {					Object texturemetadatasection = Modchu_AS.get("IResource", "getMetadata", new Class[]{ String.class }, iresource, new Object[]{ "texture" });					if (texturemetadatasection != null) {						flag = Modchu_AS.getBoolean("TextureMetadataSection", "getTextureBlur", texturemetadatasection);						flag1 = Modchu_AS.getBoolean("TextureMetadataSection", "getTextureClamp", texturemetadatasection);;					}				} catch (RuntimeException runtimeexception) {					runtimeexception.printStackTrace();					//LOG.warn("Failed reading metadata of: {}", new Object[]{ this.textureLocation, runtimeexception });				}			}			Modchu_AS.get("TextureUtil", "uploadTextureImageAllocate", new Class[]{ int.class, BufferedImage.class, boolean.class, boolean.class }, new Object[]{ getGlTextureId(), bufferedimage, flag, flag1 });		} finally {			if (iresource != null) {				((Closeable) iresource).close();			}			//org.apache.commons.io.IOUtils.closeQuietly((Closeable) iresource);		}	}	public Object getResource(Object location, Object fallbackResourceManager) throws IOException {		boolean debug = true;		List resourcePacks = fallbackResourceManager != null ? Modchu_AS.getList("FallbackResourceManager", "resourcePacks", fallbackResourceManager) : null;		if (debug) Modchu_Debug.mDebug("ModchuModel_RenderMasterBase getResource resourcePacks=" + resourcePacks);		checkResourcePath(location);		Object iresourcepack = null;		Object resourcelocation = getLocationMcmeta(location);		if (debug) Modchu_Debug.mDebug("ModchuModel_RenderMasterBase getResource resourcelocation=" + resourcelocation);		for (int i = resourcePacks.size() - 1; i >= 0; --i) {			Object iresourcepack1 = resourcePacks.get(i);			String debugS = "ModchuModel_RenderMasterBase getResource ["+i+" / "+(resourcePacks.size() - 1)+"]";			if (debug) Modchu_Debug.mDebug(debugS+" check pack iresourcepack1="+iresourcepack1);			if (iresourcepack == null					&& Modchu_AS.getBoolean("IResourcePack", "resourceExists", new Class[]{ Modchu_Reflect.loadClass("ResourceLocation") }, iresourcepack1, new Object[]{ resourcelocation })) {				if (debug) Modchu_Debug.mDebug(debugS+" 1 iresourcepack = iresourcepack1");				iresourcepack = iresourcepack1;			} else {				if (debug) Modchu_Debug.mDebug(debugS+" 1 else.");			}			if (Modchu_AS.getBoolean("IResourcePack", "resourceExists", new Class[]{ Modchu_Reflect.loadClass("ResourceLocation") }, iresourcepack1, new Object[]{ location })) {				InputStream inputstream = null;				if (debug) Modchu_Debug.mDebug(debugS+" 2 iresourcepack="+iresourcepack);				if (iresourcepack != null) {					inputstream = (InputStream) Modchu_AS.get("IResourcePack", "getInputStream", new Class[]{ Modchu_Reflect.loadClass("ResourceLocation") }, iresourcepack, new Object[]{ resourcelocation });				}				if (debug) Modchu_Debug.mDebug(debugS+" 2 ok. return inputstream="+inputstream);				return Modchu_Reflect.newInstance("SimpleResource", new Class[]{ String.class, Modchu_Reflect.loadClass("ResourceLocation"), InputStream.class, InputStream.class, Modchu_Reflect.loadClass("MetadataSerializer") }, new Object[]{ Modchu_AS.getString("IResourcePack", "getPackName", iresourcepack1), location, (InputStream) Modchu_AS.get("IResourcePack", "getInputStream", new Class[]{ Modchu_Reflect.loadClass("ResourceLocation") }, iresourcepack1, new Object[]{ location }), inputstream, Modchu_AS.get("FallbackResourceManager", "frmMetadataSerializer", fallbackResourceManager) });			} else {				if (debug) Modchu_Debug.mDebug(debugS+" 2 else.");			}		}		throw new FileNotFoundException(location.toString());	}	private void debugOldBindTexture(Object resourceLocation) {		boolean debug = true;		Object textureManager = Modchu_AS.get(Modchu_AS.minecraftGetTextureManager);		Map mapTextureObjects = Modchu_AS.getMap("TextureManager", "mapTextureObjects", textureManager);		Object object = mapTextureObjects.get(resourceLocation);		if (object == null) {			object = Modchu_Reflect.newInstance("SimpleTexture", new Class[]{ Modchu_Reflect.loadClass("ResourceLocation") }, new Object[]{ resourceLocation });			if (debug) Modchu_Debug.lDebug("ModchuModel_RenderMasterBase debugOldBindTexture new object="+object);			debugOldLoadTexture(resourceLocation, object);		} else {			if (debug) Modchu_Debug.lDebug("ModchuModel_RenderMasterBase debugOldBindTexture get object="+object);			debugOldLoadTexture(resourceLocation, object);		}		Modchu_AS.set("TextureUtil", "bindTexture", new Class[]{ int.class }, new Object[]{ Modchu_AS.getInt("TextureObject", "getGlTextureId", object) });	}	private boolean debugOldLoadTexture(Object resourceLocation, Object textureObject) {		boolean debug = true;		boolean flag = true;		Object textureManager = Modchu_AS.get(Modchu_AS.minecraftGetTextureManager);		Map mapTextureObjects = Modchu_AS.getMap("TextureManager", "mapTextureObjects", textureManager);		try {			if (debug) Modchu_Debug.mDebug("ModchuModel_RenderMasterBase debugOldLoadTexture textureObject="+textureObject);			Object theResourceManager = Modchu_AS.get("TextureManager", "theResourceManager", textureManager);			Modchu_AS.set("TextureObject", "loadTexture", new Class[]{ Modchu_Reflect.loadClass("ResourceManager") }, textureObject, new Object[]{ theResourceManager });		} catch (Exception e) {			if (debug) Modchu_Debug.lDebug1("ModchuModel_RenderMasterBase debugOldLoadTexture Failed to load texture: resourceLocation="+resourceLocation, 2, e);			textureObject = Modchu_AS.get("TextureUtil", "missingTexture");			mapTextureObjects.put(resourceLocation, textureObject);			flag = false;		} catch (Throwable e) {			if (debug) Modchu_Debug.lDebug1("ModchuModel_RenderMasterBase debugOldLoadTexture Throwable Failed to load texture: resourceLocation="+resourceLocation, 2, e);		}		if (debug) {			Modchu_Debug.mDebug("ModchuModel_RenderMasterBase debugOldLoadTexture mapTextureObjects.put resourceLocation="+resourceLocation);			Modchu_Debug.mDebug("ModchuModel_RenderMasterBase debugOldLoadTexture mapTextureObjects.put textureObject="+textureObject);		}		mapTextureObjects.put(resourceLocation, textureObject);		return flag;	}	static Object getLocationMcmeta(Object location) {		return Modchu_Reflect.newInstance("ResourceLocation", new Class[]{ String.class, String.class }, new Object[]{ Modchu_AS.getString(Modchu_AS.resourceLocationGetResourceDomain, location), Modchu_AS.getString(Modchu_AS.resourceLocationGetResourcePath, location) + ".mcmeta" });	}	private void checkResourcePath(Object p_188552_1_) throws IOException {		if (Modchu_AS.getString(Modchu_AS.resourceLocationGetResourcePath, p_188552_1_).contains("..")) {			throw new IOException("Invalid relative path to resource: " + p_188552_1_);		}	}	public int getGlTextureId() {		if (glTextureId == -1) {			glTextureId = Modchu_AS.getInt("TextureUtil", "glGenTextures");		}		return glTextureId;	}	public void deleteGlTexture() {		if (glTextureId != -1) {			Modchu_AS.get("TextureUtil", "deleteTexture", new Class[]{ int.class, }, new Object[]{ glTextureId });			glTextureId = -1;		}	}	public void setRenderCount(Object o, int i) {		boolean b2 = false;		b2 = Modchu_Reflect.setFieldObject(o.getClass(), "renderCount", o, i, 1);	}	public Object getRenderPassModel() {		Object o = Modchu_Reflect.getFieldObject(base.getClass(), "field_77046_h", "renderPassModel", base);		return o != null ? o : null;	}	public void setRenderPassModel(Object model) {		base.superSetRenderPassModel(model);	}	public void setRenderPassModel(Object model, Object model2) {		Modchu_Reflect.invokeMethod(base.getClass(), "setRenderPassModel", new Class[]{ Object.class, Object.class }, base, new Object[]{ model, model2 });	}	public void superDoRenderLiving(Object entity, double d, double d1, double d2, float f, float f1) {		base.superDoRenderLiving(entity, d, d1, d2, f, f1);	}	@Override	public float getSwingProgress(Object entity, float f1) {		return (Float) Modchu_Reflect.invokeMethod("EntityLivingBase", "func_70678_g", "getSwingProgress", new Class[]{ float.class }, entity, new Object[]{ f1 });	}	public Object getRenderManager() {		return Modchu_Reflect.getFieldObject(base.getClass(), "field_76990_c", "renderManager", base);	}	public void superPreRenderCallback(Object entity, float f) {		base.superPreRenderCallback(entity, f);	}	public void superRenderLivingAt(Object entity, double par2, double par4, double par6) {		base.superRenderLivingAt(entity, par2, par4,  par6);	}	public void superRotateCorpse(Object entity, float f, float f1, float f2) {		base.superApplyRotations(entity, f, f1, f2);	}	@Override	public void renderSpecials(Object entityPlayer, float f) {	}	@Override	public Object getEntityTexture(Object entity) {		return ((ModchuModel_ModelDataMaster) ModchuModel_ModelDataMaster.instance).getResourceLocation(entity);	}	/*		@Override		public Object getEntityTexture(Object entity, int i) {			return ((ModchuModel_ModelDataMaster) ModchuModel_ModelDataMaster.instance).getResourceLocation(entity, i);		}	*/	@Override	public Object getMainModel() {		return Modchu_AS.get(Modchu_AS.renderMainModel, base);	}	@Override	public void doRenderShadowAndFire(Object entity, double p_76979_2_, double p_76979_4_, double p_76979_6_, float p_76979_8_, float p_76979_9_) {		ModchuModel_ModelDataBase entityCaps = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		if (entityCaps != null && entityCaps.getCapsValueBoolean(entityCaps.caps_freeVariable, "showShadowAndFire")) ;		else return;		super.doRenderShadowAndFire(entity, p_76979_2_, p_76979_4_, p_76979_6_, p_76979_8_, p_76979_9_);	}	@Override	public void renderName(Object entity, double x, double y, double z) {		ModchuModel_ModelDataBase entityCaps = ModchuModel_ModelDataMaster.instance.getPlayerData(entity);		if (canRenderName(entity)) ;		else return;		super.renderName(entity, x, y, z);	}	@Override	public boolean canRenderName(Object entityLivingBase) {		if (!super.canRenderName(entityLivingBase)) return false;		ModchuModel_ModelDataBase entityCaps = ModchuModel_ModelDataMaster.instance.getPlayerData(entityLivingBase);		boolean b = entityCaps != null && entityCaps.getCapsValueBoolean(entityCaps.caps_freeVariable, "showRenderName");		//Modchu_Debug.mDebug("canRenderName b="+b);		return b;	}	public static void drawMobModel(int width, int height, int i, int j, int x, int y, int x2, int y2, float f, float f1, boolean move, Object entity) {		drawMobModel(width, height, i, j, x, y, x2, y2, f, f1, 30F, -30F, -30F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F, move, entity);	}	public static void drawMobModel(int width, int height, int i, int j, int x, int y, int x2, int y2, float f, float f1, float comeraPosX, float comeraPosY, float comeraPosZ, float comeraRotationX, float comeraRotationY, float comeraRotationZ, float cameraZoomX, float cameraZoomY, float cameraZoomZ, boolean move, Object entity) {		drawMobModel(width, height, i, j, x, y, x2, y2, f, f1, 30F, -30F, -30F, 0.0F, comeraPosX, comeraPosY, comeraPosZ, comeraRotationX, comeraRotationY, comeraRotationZ, cameraZoomX, cameraZoomY, cameraZoomZ, move, entity);	}	public static void drawMobModel(int width, int height, int i, int j, int x, int y, int x2, int y2, float f, float f1, float f2, float f3, float f4, float f5, boolean move, Object entity) {		drawMobModel(width, height, i, j, x, y, x2, y2, f, f1, f2, f3, f4, f5, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F, move, entity);	}	public static void drawMobModel(int width, int height, int i, int j, int x, int y, int x2, int y2, float f, float f1, float f2, float f3, float f4, float f5, float comeraPosX, float comeraPosY, float comeraPosZ, float comeraRotationX, float comeraRotationY, float comeraRotationZ, float cameraZoomX, float cameraZoomY, float cameraZoomZ, boolean move, Object entity) {		Modchu_GlStateManager.pushMatrix();		Modchu_GlStateManager.enableColorMaterial();		try {			//Modchu_Debug.dDebug("drawMobModel x=" + i + " y=" + j, 1);			float entityWidth = Modchu_AS.getFloat(Modchu_AS.entityWidth, entity);			float entityHeight = Modchu_AS.getFloat(Modchu_AS.entityHeight, entity);			if (entityHeight > 2F) {				f = f * 2F / entityHeight;			}			Modchu_GlStateManager.translate(x, y, 50F + f1);			Modchu_GlStateManager.scale(-f, f, f);			/*						if (Modchu_Main.getMinecraftVersion() > 169								| (Modchu_Main.isRelease()										&& Modchu_Main.isForge)								| ModchuModel_Main.oldRender) {			*/			Modchu_GlStateManager.rotate(180F, 0.0F, 0.0F, 1.0F);			/*						} else {							Modchu_GlStateManager.rotate(180F, 0.0F, 0.0F, 1.0F);						}			*/			//Modchu_GlStateManager.rotate(180F, 0.0F, 1.0F, 0.0F);			if (move) {				float ff1 = width / 2 + x2 - i;				float ff2 = height / 2 + y2 - j;				Modchu_GlStateManager.rotate(135F, 0.0F, 1.0F, 0.0F);				Modchu_GlStateManager.rotate(-135F, 0.0F, 1.0F, 0.0F);				//Modchu_GlStateManager.rotate(-(float)Math.atan(f6 / 40F) * 20F, 1.0F, 0.0F, 0.0F);				Modchu_GlStateManager.translate(comeraPosX, comeraPosY, comeraPosZ);				Modchu_GlStateManager.rotate(comeraRotationX, 1.0F, 0.0F, 0.0F);				Modchu_GlStateManager.rotate(comeraRotationY, 0.0F, 1.0F, 0.0F);				Modchu_GlStateManager.rotate(comeraRotationZ, 0.0F, 0.0F, 1.0F);				Modchu_GlStateManager.rotate((float) Math.atan(ff1 / 40F) * f5, 0.0F, 1.0F, 0.0F);				Modchu_GlStateManager.scale(cameraZoomX, cameraZoomY, cameraZoomZ);				Modchu_AS.set(Modchu_AS.entityRotationYaw, entity, (float) Math.atan(ff1 / 40F) * f2);				Modchu_AS.set(Modchu_AS.entityRotationPitch, entity, (float) Math.atan(ff2 / 40F) * f3);				//entity.renderYawOffset = (float)Math.atan(ff1 / 40F) * f4;				Modchu_AS.set(Modchu_AS.entityLivingBasePrevRotationYawHead, entity, Modchu_AS.getFloat(Modchu_AS.entityLivingBaseRotationYawHead, entity));				Modchu_AS.set(Modchu_AS.entityLivingBaseRotationYawHead, entity, Modchu_AS.getFloat(Modchu_AS.entityRotationYaw, entity));				//entity.rotationYawHead = 0F;				//entity.prevRotationYawHead = 0F;				Modchu_AS.set(Modchu_AS.entityLivingBaseRenderYawOffset, entity, 0.0F);				//Modchu_Debug.dDebug("drawMobModel2 ff1=" + ff1 + " f2=" + f2+" entity.rotationYaw="+Modchu_AS.get(Modchu_AS.entityRotationYaw, entity), 2);				//Modchu_Debug.dDebug("drawMobModel2 ff2=" + ff2 + " f3=" + f3, 3);			} else {				Modchu_AS.set(Modchu_AS.entityRotationYaw, entity, 0.0F);				Modchu_AS.set(Modchu_AS.entityRotationPitch, entity, 0.0F);				Modchu_AS.set(Modchu_AS.entityLivingBaseRenderYawOffset, entity, 0.0F);				Modchu_AS.set(Modchu_AS.entityLivingBaseRotationYawHead, entity, 0.0F);			}			Modchu_GlStateManager.translate(0.0F, Modchu_AS.getFloat(Modchu_AS.entityYOffset, entity), 0.0F);			//RenderManager.instance.playerViewY = 180F;			GL11.glEnable(32826 /*GL_RESCALE_NORMAL_EXT*/);			Modchu_GlStateManager.enableColorMaterial();			Modchu_GlStateManager.enableTexture2D();			Modchu_GlStateManager.depthMask(true);			Modchu_AS.set(Modchu_AS.renderHelperEnableStandardItemLighting);			//Modchu_GlStateManager.disable(GL12.GL_RESCALE_NORMAL);			Modchu_AS.set(Modchu_AS.openGlHelperSetActiveTexture, Modchu_AS.getInt(Modchu_AS.openGlHelperLightmapTexUnit));			Modchu_AS.set(Modchu_AS.openGlHelperSetActiveTexture, Modchu_AS.getInt(Modchu_AS.openGlHelperDefaultTexUnit));			boolean b = Modchu_AS.getBoolean(Modchu_AS.renderManagerRenderEntityWithPosYaw, entity, 0.0D, 0.0D, 0.0D, 0.0F, 1.0F);			//Modchu_Debug.mDebug("renderManagerRenderEntityWithPosYaw b="+b);			//Modchu_Debug.mDebug("renderManagerGetEntityRenderObject="+Modchu_AS.get(Modchu_AS.renderManagerGetEntityRenderObject, entity));		} catch (Error e) {			e.printStackTrace();		} catch (Exception e) {			e.printStackTrace();		}		Modchu_GlStateManager.popMatrix();		/*				//Modchu_AS.set(Modchu_AS.renderHelperDisableStandardItemLighting);				GL11.glDisable(32826);				GL11.glDisable(GL12.GL_RESCALE_NORMAL);				Modchu_AS.set(Modchu_AS.openGlHelperSetActiveTexture, Modchu_AS.getInt(Modchu_AS.openGlHelperLightmapTexUnit));				Modchu_GlStateManager.enableTexture2D();				Modchu_AS.set(Modchu_AS.openGlHelperSetActiveTexture, Modchu_AS.getInt(Modchu_AS.openGlHelperDefaultTexUnit));				Modchu_GlStateManager.disableLighting();		*/	}	public static void drawMobModel2(float f, Object entity) {		drawMobModel2(f, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F, entity);	}	public static void drawMobModel2(float f, float comeraPosX, float comeraPosY, float comeraPosZ, float comeraRotationX, float comeraRotationY, float comeraRotationZ, float cameraZoomX, float cameraZoomY, float cameraZoomZ, Object entity) {		//ModchuModel_Main.oldRender = true;		Modchu_GlStateManager.pushMatrix();		Modchu_GlStateManager.enableColorMaterial();		try {			//Modchu_Debug.mDebug("ModchuModel_RenderMasterBase drawMobModel2 x="+x+"y="+y);			//Modchu_GlStateManager.scale(-f, f, f);			//GL11.glLoadIdentity();			//GL11.glEnable(32826 /*GL_RESCALE_NORMAL_EXT*/);			GL11.glMatrixMode(GL11.GL_MODELVIEW);			//GL11.glMatrixMode(GL11.GL_PROJECTION);			Modchu_GlStateManager.enableColorMaterial();			Modchu_GlStateManager.enableTexture2D();			Modchu_GlStateManager.depthMask(true);			Modchu_AS.set(Modchu_AS.renderHelperEnableStandardItemLighting);			//Modchu_GlStateManager.disable(GL12.GL_RESCALE_NORMAL);			Modchu_AS.set(Modchu_AS.openGlHelperSetActiveTexture, Modchu_AS.getInt(Modchu_AS.openGlHelperLightmapTexUnit));			Modchu_AS.set(Modchu_AS.openGlHelperSetActiveTexture, Modchu_AS.getInt(Modchu_AS.openGlHelperDefaultTexUnit));			//boolean b = Modchu_AS.getBoolean(Modchu_AS.renderManagerRenderEntityWithPosYaw, entity, 0.0D, 0.0D, 0.0D, 0.0F, 1.0F);			if (Modchu_AS.getInt(Modchu_AS.entityTicksExisted, entity) == 0) {				Modchu_AS.set("Entity", "lastTickPosX", entity, Modchu_AS.getDouble(Modchu_AS.entityPosX, entity));				Modchu_AS.set("Entity", "lastTickPosY", entity, Modchu_AS.getDouble(Modchu_AS.entityPosY, entity));				Modchu_AS.set("Entity", "lastTickPosZ", entity, Modchu_AS.getDouble(Modchu_AS.entityPosZ, entity));			}			double lastTickPosX = Modchu_AS.getDouble("Entity", "lastTickPosX", entity);			double lastTickPosY = Modchu_AS.getDouble("Entity", "lastTickPosY", entity);			double lastTickPosZ = Modchu_AS.getDouble("Entity", "lastTickPosZ", entity);			double posX = Modchu_AS.getDouble(Modchu_AS.entityPosX, entity);			double posY = Modchu_AS.getDouble(Modchu_AS.entityPosY, entity);			double posZ = Modchu_AS.getDouble(Modchu_AS.entityPosZ, entity);			double d0 = lastTickPosX + (posX - lastTickPosX) * (double) f;			double d1 = lastTickPosY + (posY - lastTickPosY) * (double) f;			double d2 = lastTickPosZ + (posZ - lastTickPosZ) * (double) f;			float prevRotationYaw = Modchu_AS.getFloat(Modchu_AS.entityPrevRotationYaw, entity);			float rotationYaw = Modchu_AS.getFloat(Modchu_AS.entityRotationYaw, entity);			float f1 = prevRotationYaw + (rotationYaw - prevRotationYaw) * f;			int i = Modchu_AS.getInt(Modchu_AS.entityGetBrightnessForRender, entity, f);			if (Modchu_AS.getBoolean(Modchu_AS.entityIsBurning, entity)) i = 15728880;			int j = i % 65536;			int k = i / 65536;			Modchu_AS.set(Modchu_AS.openGlHelperSetLightmapTextureCoords, Modchu_AS.get(Modchu_AS.openGlHelperLightmapTexUnit), (float) j / 1.0F, (float) k / 1.0F);			Modchu_GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);			double renderPosX = Modchu_AS.getDouble("RenderManager", "renderPosX");			double renderPosY = Modchu_AS.getDouble("RenderManager", "renderPosY");			double renderPosZ = Modchu_AS.getDouble("RenderManager", "renderPosZ");			//Modchu_Debug.mDebug("ModchuModel_RenderMasterBase drawMobModel2 renderPosX="+renderPosX+" renderPosY="+renderPosY+" renderPosZ="+renderPosZ);			Object render = ModchuModel_Main.renderPlayerDummyInstance;			Modchu_AS.set("Render", "doRender", new Class[]{ Modchu_Reflect.loadClass("Entity"), double.class, double.class, double.class, float.class, float.class }, render, new Object[]{ entity, d0 - renderPosX, d1 - renderPosY, d2 - renderPosZ, f1, f });			//Object renderManager = Modchu_AS.get(Modchu_AS.renderManagerInstance);			//Modchu_AS.set("RenderManager", "renderEntity", new Class[]{ Modchu_Reflect.loadClass("Entity"), float.class }, renderManager, new Object[]{ entity, 0.0F });			//Modchu_Debug.mDebug("ModchuModel_RenderMasterBase drawMobModel2 renderManagerRenderEntityWithPosYaw b="+b);			double x1 = Modchu_AS.getDouble(Modchu_AS.entityPosX, entity);			double y1 = Modchu_AS.getDouble(Modchu_AS.entityPosY, entity);			double z1 = Modchu_AS.getDouble(Modchu_AS.entityPosZ, entity);			//Modchu_Debug.mDebug("ModchuModel_RenderMasterBase drawMobModel2 x1="+x1+" y1="+y1+" z1="+z1);			//Modchu_Debug.mDebug("ModchuModel_RenderMasterBase drawMobModel2 d0="+d0+" d1="+d1+" d2="+d2);			//Modchu_Debug.mDebug("ModchuModel_RenderMasterBase drawMobModel2 renderManagerGetEntityRenderObject="+Modchu_AS.get(Modchu_AS.renderManagerGetEntityRenderObject, entity));		} catch (Error e) {			e.printStackTrace();		} catch (Exception e) {			e.printStackTrace();		}		Modchu_GlStateManager.popMatrix();	}}