package net.minecraft.src;import modchu.model.ModchuModel_IModelCaps;import modchu.model.ModchuModel_ModelCapsHelper;import modchu.model.ModchuModel_ModelRenderer;import modchu.model.multimodel.MultiModelSkirtFloats;import net.minecraft.util.MathHelper;public class MultiModel_Biped extends MultiModelSkirtFloats {	public MultiModel_Biped() {		this(0.0F);	}	public MultiModel_Biped(float f) {		this(f, 0.0F);	}	public MultiModel_Biped(float f, float f1) {		this(f, f1, 64, 32);	}	public MultiModel_Biped(float f, float f1, int i, int j) {		super(f, f1, i, j);	}	@Override	public void initModel(float f, float f1) {		initModel(f, f1, true);	}	public void initModel(float f, float f1, boolean isAfterInit) {		bipedCloak = new ModchuModel_ModelRenderer(this, 0, 0);		bipedCloak.addBox(-5.0F, 0.0F, -1.0F, 10, 16, 1, f);		bipedEars = new ModchuModel_ModelRenderer(this, 24, 0);		bipedEars.addBox(-3.0F, -6.0F, -1.0F, 6, 6, 1, f);		bipedHead = new ModchuModel_ModelRenderer(this, 0, 0);		bipedHead.addBox(-4.0F, -8.0F, -4.0F, 8, 8, 8, f);		bipedHeadwear = new ModchuModel_ModelRenderer(this, 32, 0);		bipedHeadwear.addBox(-4.0F, -8.0F, -4.0F, 8, 8, 8, f + 0.5F);		bipedBody = new ModchuModel_ModelRenderer(this, 16, 16);		bipedBody.addBox(-4.0F, 0.0F, -2.0F, 8, 12, 4, f);		bipedRightArm = new ModchuModel_ModelRenderer(this, 40, 16);		bipedRightArm.addBox(-2.0F, 0.0F, -2.0F, 4, 12, 4, f);		bipedLeftArm = new ModchuModel_ModelRenderer(this, 40, 16);		bipedLeftArm.mirror = true;		bipedLeftArm.addBox(-2.0F, 0.0F, -2.0F, 4, 12, 4, f);		bipedRightLeg = new ModchuModel_ModelRenderer(this, 0, 16);		bipedRightLeg.addBox(-2.0F, 0.0F, -2.0F, 4, 12, 4, f);		bipedLeftLeg = new ModchuModel_ModelRenderer(this, 0, 16);		bipedLeftLeg.mirror = true;		bipedLeftLeg.addBox(-2.0F, 0.0F, -2.0F, 4, 12, 4, f);		upperBody = new ModchuModel_ModelRenderer(this);		lowerBody = new ModchuModel_ModelRenderer(this);		hip = new ModchuModel_ModelRenderer(this);		mainFrame = new ModchuModel_ModelRenderer(this, 0, 0);		mainFrame.setRotationPoint(0F, 0F + f1, 0F);		if (isAfterInit) afterInit(f, f1);	}	@Override	public void afterInit(float f, float f1) {		armsinit(f, f1);		actionPartsInit(f, f1);		defaultAddChild();	}	@Override	public void armsinit(float f, float f1) {		// 手持ち		Arms[0] = new ModchuModel_ModelRenderer(this, 0, 0);		Arms[0].setRotationPoint(0.5F, 6.5F, 0F);		Arms[1] = new ModchuModel_ModelRenderer(this, 0, 0);		Arms[1].setRotationPoint(-0.5F, 6.5F, 0F);		Arms[1].isInvertX = true;		HeadMount = new ModchuModel_ModelRenderer(this, "HeadMount");		HeadMount.setRotationPoint(0F, 0F, 0F);		HeadTop = new ModchuModel_ModelRenderer(this, "HeadTop");		HeadTop.setRotationPoint(0.0F, -8.0F, 0.0F);	}	@Override	public void actionPartsInit(float f, float f1) {		rightArm = new ModchuModel_ModelRenderer(this, 40, 16);		rightArm.addBox(-2.0F, -1.0F, -1.0F, 4, 6, 4, f);		rightArm2 = new ModchuModel_ModelRenderer(this, 40, 24);		rightArm2.addBox(-1.0F, 0.0F, -1.0F, 4, 6, 4, f);		leftArm = new ModchuModel_ModelRenderer(this, 40, 16);		leftArm.mirror = true;		leftArm.addBox(0.0F, -1.0F, -1.0F, 4, 6, 4, f);		leftArm2 = new ModchuModel_ModelRenderer(this, 40, 24);		leftArm2.mirror = true;		leftArm2.addBox(-1.0F, 0.0F, -1.0F, 4, 6, 4, f);		rightLeg = new ModchuModel_ModelRenderer(this, 0, 16);		rightLeg.addBox(-2.5F, 0.0F, -2F, 4, 6, 4, f);		rightLeg2 = new ModchuModel_ModelRenderer(this, 0, 22);		rightLeg2.addBox(-1.1F, 0.0F, -1.5F, 4, 6, 4, f);		leftLeg = new ModchuModel_ModelRenderer(this, 0, 16);		leftLeg.mirror = true;		leftLeg.addBox(-0.5F, 0.0F, -2F, 4, 6, 4, f);		leftLeg2 = new ModchuModel_ModelRenderer(this, 0, 22);		leftLeg2.mirror = true;		leftLeg2.addBox(-0.9F, 0.0F, -1.5F, 4, 6, 4, f);		rightHand = new ModchuModel_ModelRenderer(this, 40, 24);		rightHand.addBox(-1.0F, -1.0F, -1.0F, 4, 4, 4, f);		rightHand.setRotationPoint(0.0F, 3.0F, 0.0F);		leftHand = new ModchuModel_ModelRenderer(this, 40, 24);		leftHand.mirror = true;		leftHand.addBox(-1.0F, -1.0F, -1.0F, 4, 4, 4, f);		leftHand.setRotationPoint(0.0F, 3.0F, 0.0F);		leftArmPlus = new ModchuModel_ModelRenderer(this);		leftArmPlus2 = new ModchuModel_ModelRenderer(this);		rightArmPlus = new ModchuModel_ModelRenderer(this);		rightArmPlus2 = new ModchuModel_ModelRenderer(this);		rightLegPlus = new ModchuModel_ModelRenderer(this);		rightLegPlus2 = new ModchuModel_ModelRenderer(this);		leftLegPlus = new ModchuModel_ModelRenderer(this);		leftLegPlus2 = new ModchuModel_ModelRenderer(this);		rightHand.showModel = leftHand.showModel = rightArm.showModel = leftArm.showModel = rightArmPlus.showModel = rightArmPlus2.showModel = leftArmPlus.showModel = leftArmPlus2.showModel = rightLegPlus.showModel = rightLegPlus2.showModel = leftLegPlus.showModel = leftLegPlus2.showModel = rightArm2.showModel = leftArm2.showModel = rightLeg.showModel = rightLeg2.showModel = leftLeg.showModel = leftLeg2.showModel = false;	}	@Override	public void defaultAddChild() {		defaultAddChildSetting();	}	public void defaultAddChildSetting() {		if (bipedRightArm != null) bipedRightArm.clearChildModels();		if (bipedLeftArm != null) bipedLeftArm.clearChildModels();		if (bipedRightLeg != null) bipedRightLeg.clearChildModels();		if (bipedLeftLeg != null) bipedLeftLeg.clearChildModels();		if (bipedHeadwear != null) bipedHeadwear.clearChildModels();		if (HeadMount != null) HeadMount.clearChildModels();		if (HeadTop != null) HeadTop.clearChildModels();		if (bipedHead != null) {			bipedHead.clearChildModels();			if (bipedHeadwear != null) bipedHead.addChild(bipedHeadwear);		}		if (bipedBody != null) {			bipedBody.clearChildModels();			if (bipedHead != null) bipedBody.addChild(bipedHead);			if (bipedRightArm != null) bipedBody.addChild(bipedRightArm);			if (bipedLeftArm != null) bipedBody.addChild(bipedLeftArm);		}		if (upperBody != null) {			upperBody.clearBoneChildModels();			if (bipedBody != null) upperBody.addBoneChild(bipedBody);		}		if (lowerBody != null) {			lowerBody.clearBoneChildModels();			if (bipedRightLeg != null) lowerBody.addBoneChild(bipedRightLeg);			if (bipedLeftLeg != null) lowerBody.addBoneChild(bipedLeftLeg);		}		if (hip != null) {			hip.clearBoneChildModels();			if (bipedBody != null) hip.addBoneChild(bipedBody);			if (bipedRightLeg != null) hip.addBoneChild(bipedRightLeg);			if (bipedLeftLeg != null) hip.addBoneChild(bipedLeftLeg);		}		if (bipedHead != null && HeadMount != null) bipedHead.addChild(HeadMount);		if (bipedHead != null && HeadTop != null) bipedHead.addChild(HeadTop);		if (Arms != null) {			if (bipedRightArm != null && Arms[0] != null) bipedRightArm.addChild(Arms[0]);			if (bipedLeftArm != null && Arms[1] != null) bipedLeftArm.addChild(Arms[1]);			if (Arms[0] != null && rightHand != null) rightHand.removeChild((ModchuModel_ModelRenderer) Arms[0]);			if (Arms[1] != null && leftHand != null) leftHand.removeChild((ModchuModel_ModelRenderer) Arms[1]);			if (Arms[0] != null) Arms[0].setRotationPoint(0.5F, 6.5F, 0F);			if (Arms[1] != null) Arms[1].setRotationPoint(-0.5F, 6.5F, 0F);		}		if (mainFrame != null) {			((ModchuModel_ModelRenderer) mainFrame).clearChildModels();			if (bipedBody != null) mainFrame.addChild(bipedBody);			if (bipedRightLeg != null) mainFrame.addChild(bipedRightLeg);			if (bipedLeftLeg != null) mainFrame.addChild(bipedLeftLeg);		}		boolean b = true;		setCapsValue(caps_visible, bipedLeftArm, b);		setCapsValue(caps_visible, bipedRightArm, b);		setCapsValue(caps_visible, bipedLeftLeg, b);		setCapsValue(caps_visible, bipedRightLeg, b);	}	@Override	public void setRotationAnglesLM(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IModelCaps entityCaps) {		setDefaultPause(f, f1, f2, f3, f4, f5, entityCaps);		bipedHead.rotateAngleY = f3 / (180F / (float) Math.PI);		bipedHead.rotateAngleX = f4 / (180F / (float) Math.PI);		if (ModchuModel_ModelCapsHelper.getCapsValueBoolean(this, entityCaps, caps_getIsSneak) && !ModchuModel_ModelCapsHelper.getCapsValueBoolean(this, entityCaps, caps_getIsRiding) && ModchuModel_ModelCapsHelper.getCapsValueBoolean(this, entityCaps, caps_oldwalking)) {			bipedRightArm.rotateAngleX = MathHelper.cos(f * 0.6662F + (float) Math.PI) * 2.0F * f1;			bipedLeftArm.rotateAngleX = MathHelper.cos(f * 0.6662F) * 2.0F * f1;			bipedLeftArm.rotateAngleZ = (MathHelper.cos(f * 0.2812F) - 1.0F) * 1.0F * f1;			bipedRightArm.rotateAngleZ = (MathHelper.cos(f * 0.2312F) + 1.0F) * 1.0F * f1;		} else {			bipedRightArm.rotateAngleX = MathHelper.cos(f * 0.6662F + (float) Math.PI) * 2.0F * f1 * 0.5F;			bipedLeftArm.rotateAngleX = MathHelper.cos(f * 0.6662F) * 2.0F * f1 * 0.5F;			bipedRightArm.rotateAngleZ = 0.0F;			bipedLeftArm.rotateAngleZ = 0.0F;		}		bipedRightLeg.rotateAngleX = MathHelper.cos(f * 0.6662F) * 1.4F * f1;		bipedLeftLeg.rotateAngleX = MathHelper.cos(f * 0.6662F + (float) Math.PI) * 1.4F * f1;		bipedRightLeg.rotateAngleY = 0.0F;		bipedLeftLeg.rotateAngleY = 0.0F;		if (ModchuModel_ModelCapsHelper.getCapsValueBoolean(this, entityCaps, caps_getIsRiding)) {			bipedRightArm.rotateAngleX += -((float) Math.PI / 5F);			bipedLeftArm.rotateAngleX += -((float) Math.PI / 5F);			bipedRightLeg.rotateAngleX = -((float) Math.PI * 2F / 5F);			bipedLeftLeg.rotateAngleX = -((float) Math.PI * 2F / 5F);			bipedRightLeg.rotateAngleY = ((float) Math.PI / 10F);			bipedLeftLeg.rotateAngleY = -((float) Math.PI / 10F);		}		if (heldItem[1] != 0 && !ModchuModel_ModelCapsHelper.getCapsValueBoolean(this, entityCaps, caps_oldwalking)) {			bipedLeftArm.rotateAngleX = bipedLeftArm.rotateAngleX * 0.5F - ((float) Math.PI / 10F) * heldItem[1];		}		if (heldItem[0] != 0 && !ModchuModel_ModelCapsHelper.getCapsValueBoolean(this, entityCaps, caps_oldwalking)) {			bipedRightArm.rotateAngleX = bipedRightArm.rotateAngleX * 0.5F - ((float) Math.PI / 10F) * heldItem[0];		}		bipedRightArm.rotateAngleY = bipedLeftArm.rotateAngleY = 0.0F;		bipedRightLeg.rotateAngleZ = bipedLeftLeg.rotateAngleZ = 0.0F;		float var7;		float var8;		armSwing(f, f1, f2, f3, f4, f5, entityCaps);		bipedRightLeg.rotationPointZ = bipedLeftLeg.rotationPointZ =				bipedBody.rotateAngleX = bipedBody.rotateAngleY = bipedBody.rotateAngleZ =				upperBody.rotateAngleX = upperBody.rotateAngleY = upperBody.rotateAngleZ = 0.0F;		if (ModchuModel_ModelCapsHelper.getCapsValueBoolean(this, entityCaps, caps_getIsSneak)) {			upperBody.rotateAngleX = 0.5F;			bipedHead.rotateAngleX -= 0.5F;			bipedBody.rotationPointY = 1.0F;			bipedBody.rotationPointZ = 2.0F;			bipedRightLeg.rotationPointY = bipedLeftLeg.rotationPointY = 12.0F - 1.0F;			bipedRightLeg.rotationPointZ = bipedLeftLeg.rotationPointZ = 7.6F;			//bipedRightLeg.rotateAngleX -= 0.5F;			//bipedLeftLeg.rotateAngleX -= 0.5F;		} else {			upperBody.rotateAngleX = 0.0F;			bipedHead.rotationPointY = 0.0F;			bipedRightLeg.rotationPointY = bipedLeftLeg.rotationPointY = 12.0F;		}		if (ModchuModel_ModelCapsHelper.getCapsValueBoolean(this, entityCaps, caps_aimedBow)) {			var7 = 0.0F;			var8 = 0.0F;			bipedRightArm.rotateAngleZ = 0.0F;			bipedLeftArm.rotateAngleZ = 0.0F;			bipedRightArm.rotateAngleY = -(0.1F - var7 * 0.6F) + bipedHead.rotateAngleY;			bipedLeftArm.rotateAngleY = 0.1F - var7 * 0.6F + bipedHead.rotateAngleY + 0.4F;			bipedRightArm.rotateAngleX = -((float) Math.PI / 2F) + bipedHead.rotateAngleX;			bipedLeftArm.rotateAngleX = -((float) Math.PI / 2F) + bipedHead.rotateAngleX;			bipedRightArm.rotateAngleX -= var7 * 1.2F - var8 * 0.4F;			bipedLeftArm.rotateAngleX -= var7 * 1.2F - var8 * 0.4F;			bipedRightArm.rotateAngleZ += MathHelper.cos(f2 * 0.09F) * 0.05F + 0.05F;			bipedLeftArm.rotateAngleZ -= MathHelper.cos(f2 * 0.09F) * 0.05F + 0.05F;			bipedRightArm.rotateAngleX += MathHelper.sin(f2 * 0.067F) * 0.05F;			bipedLeftArm.rotateAngleX -= MathHelper.sin(f2 * 0.067F) * 0.05F;		} else {			if (ModchuModel_ModelCapsHelper.getCapsValueBoolean(this, entityCaps, caps_getIsWait)) {				// 待機状態				bipedRightArm.rotateAngleX = MathHelper.sin(f2 * 0.067F) * 0.05F - 0.5F;				bipedRightArm.rotateAngleY = 0.0F;				bipedRightArm.rotateAngleZ = -0.4F;				bipedLeftArm.rotateAngleX = MathHelper.sin(f2 * 0.067F) * 0.05F - 0.5F;				bipedLeftArm.rotateAngleY = 0.0F;				bipedLeftArm.rotateAngleZ = 0.4F;			} else {				// 呼吸 腕等				bipedRightArm.rotateAngleZ += MathHelper.cos(f2 * 0.09F) * 0.05F + 0.05F;				bipedLeftArm.rotateAngleZ -= MathHelper.cos(f2 * 0.09F) * 0.05F + 0.05F;				bipedRightArm.rotateAngleX += MathHelper.sin(f2 * 0.067F) * 0.05F;				bipedLeftArm.rotateAngleX -= MathHelper.sin(f2 * 0.067F) * 0.05F;			}		}	}	public void armSwing(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IModelCaps entityCaps) {		if ((onGrounds[0] > -9990F || onGrounds[1] > -9990F) && !ModchuModel_ModelCapsHelper.getCapsValueBoolean(this, entityCaps, caps_aimedBow) && !ModchuModel_ModelCapsHelper.getCapsValueBoolean(this, entityCaps, caps_oldwalking)) {			// 腕振り			float f6, f7, f8;			f6 = MathHelper.sin(MathHelper.sqrt_float(onGrounds[0]) * (float) Math.PI * 2.0F);			f7 = MathHelper.sin(MathHelper.sqrt_float(onGrounds[1]) * (float) Math.PI * 2.0F);			bipedBody.rotateAngleY = (f6 - f7) * 0.2F;			// R			if (onGrounds[0] > 0F) {				f6 = 1.0F - onGrounds[0];				f6 *= f6;				f6 *= f6;				f6 = 1.0F - f6;				f7 = MathHelper.sin(f6 * (float) Math.PI);				f8 = MathHelper.sin(onGrounds[0] * (float) Math.PI) * -(bipedHead.rotateAngleX - 0.7F) * 0.75F;				bipedRightArm.rotateAngleX -= f7 * 1.2D + f8;				bipedRightArm.rotateAngleY += bipedBody.rotateAngleY * 2.0F;				bipedRightArm.rotateAngleZ = MathHelper.sin(onGrounds[0] * 3.141593F) * -0.4F;			}			// L			if (onGrounds[1] > 0F) {				f6 = 1.0F - onGrounds[1];				f6 *= f6;				f6 *= f6;				f6 = 1.0F - f6;				f7 = MathHelper.sin(f6 * (float) Math.PI);				f8 = MathHelper.sin(onGrounds[1] * (float) Math.PI) * -(bipedHead.rotateAngleX - 0.7F) * 0.75F;				bipedLeftArm.rotateAngleX -= f7 * 1.2D + f8;				bipedLeftArm.rotateAngleY += bipedBody.rotateAngleY * 2.0F;				bipedLeftArm.rotateAngleZ = MathHelper.sin(onGrounds[1] * 3.141593F) * 0.4F;			}		}	}	@Override	public void setRotationAnglesfirstPerson(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IModelCaps entityCaps) {		if (dominantArm != 0) super.setRotationAnglesfirstPerson(f, f1, f2, f3, f4, f5, entityCaps);		ModchuModel_ModelRenderer arm = getBipedRightArm(entityCaps);		Object entity = getCapsValue(entityCaps, entityCaps.caps_Entity);		if (entity != null && getCapsValue(entityCaps, entityCaps.caps_currentEquippedItem) != null) {			//地図を持っている時			if (dominantArm == 0) {			} else {				arm.rotationPointX = -7.5F;				arm.rotationPointY = 2.5F;				arm.rotationPointZ = 0.0F;			}		} else {			//素手時			if (dominantArm == 0) {				arm.rotateAngleX = 0.0F;				arm.rotateAngleY = 0.0F;				arm.rotateAngleZ = 0.0F;			} else {			}		}	}	@Override	public void setDefaultPause(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IModelCaps entityCaps) {		bipedHead.setRotationPoint(0.0F, 0.0F, 0.0F);		bipedBody.setRotationPoint(0.0F, 0.0F, 0.0F);		bipedHeadwear.setRotationPoint(0.0F, 0.0F, 0.0F);		bipedRightArm.setRotationPoint(-6.0F, 0.0F, 0.0F);		bipedLeftArm.setRotationPoint(6.0F, 0.0F, 0.0F);		bipedRightLeg.setRotationPoint(-2.0F, 12.0F, 0.0F);		bipedLeftLeg.setRotationPoint(1.9F, 12.0F, 0.0F);		Arms[0].setRotationPoint(0.0F, 9.5F, 0F);		Arms[1].setRotationPoint(0.0F, 9.5F, 0F);		upperBody.setRotationPoint(0.0F, 0.0F, 0.0F);		upperBody.setRotateAngle(0.0F, 0.0F, 0.0F);		lowerBody.setRotationPoint(0.0F, 0.0F, 0.0F);		lowerBody.setRotateAngle(0.0F, 0.0F, 0.0F);		hip.setRotationPoint(0.0F, 0.0F, 0.0F);		hip.setRotateAngle(0.0F, 0.0F, 0.0F);	}	@Override	public void setMotionDefaultPause(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IModelCaps entityCaps) {		setDefaultPause(f, f1, f2, f3, f4, f5, entityCaps);		action1Reset(f, f1, f2, f3, f4, f5, entityCaps);		bipedHead.rotationPointY = 0.0F;		bipedBody.rotationPointY = 0.0F;		rightArm.setRotationPoint(-5.0F, 2.0F, -1.0F);		leftArm.setRotationPoint(5.0F, 4.0F, -1.0F);		rightArm2.setRotationPoint(-1.0F, 4.5F, 0.0F);		leftArm2.setRotationPoint(1.0F, 4.5F, 0.0F);		rightLeg.setRotationPoint(-1.5F, 14.0F, 0.0F);		rightLeg2.setRotationPoint(-1.5F, 6.5F, 0.0F);		leftLeg.setRotationPoint(0.5F, 12.0F, 0.0F);		leftLeg2.setRotationPoint(0.5F, 6.0F, -0.5F);		mainFrame.setRotationPoint(0.0F, 0.0F, 0.0F);		mainFrame.setRotateAngle(0.0F, 0.0F, 0.0F);		rightArm.rotateAngleZ = 1.57F;		leftArm.rotateAngleZ = -1.57F;		bipedHead.rotateAngleX = bipedHead.rotateAngleY = bipedHead.rotateAngleZ = bipedBody.rotateAngleX = bipedBody.rotateAngleY = bipedBody.rotateAngleZ = 0.0F;	}	@Override	public void renderEars(float f) {		bipedEars.rotateAngleY = bipedHead.rotateAngleY;		bipedEars.rotateAngleX = bipedHead.rotateAngleX;		bipedEars.rotationPointX = 0.0F;		bipedEars.rotationPointY = 0.0F;		bipedEars.render(f);	}	@Override	public void renderCloak(float f) {		bipedCloak.render(f);	}	@Override	public int showArmorParts(ModchuModel_IModelCaps entityCaps, int parts, int index) {		// 鎧の表示用		boolean f;		// 兜		f = parts == 3 ? true : false;		setArmorBipedHeadShowModel(entityCaps, f);		// 鎧		f = parts == 2 ? true : false;		setArmorBipedBodyShowModel(entityCaps, f);		setArmorBipedRightArmShowModel(entityCaps, f);		setArmorBipedLeftArmShowModel(entityCaps, f);		// 脚甲		//f = parts == 1 | parts == 0 ? true : false;		// 臑当		f = parts == 0 ? true : false;		setArmorBipedRightLegShowModel(entityCaps, f);		setArmorBipedLeftLegShowModel(entityCaps, f);		return -1;	}	@Override	public float getHeight() {		return getHeight(null);	}	@Override	public float getHeight(ModchuModel_IModelCaps pEntityCaps) {		return 1.81F;	}	@Override	public float getWidth() {		return getWidth(null);	}	@Override	public float getWidth(ModchuModel_IModelCaps pEntityCaps) {		return 0.6F;	}	@Override	public float[] getArmorModelsSize() {		return new float[]{ 0.5F, 1.0F };	}	@Override	public void defaultPartsSettingBefore(ModchuModel_IModelCaps entityCaps) {		String[] s = {				"rightArm", "rightArm2", "rightArmPlus", "rightArmPlus2", "rightHand",				"rightLeg", "rightLeg2", "rightLegPlus", "rightLegPlus2", "leftArm",				"leftArm2", "leftArmPlus", "leftArmPlus2", "leftHand", "leftLeg",				"leftLeg2", "leftLegPlus", "leftLegPlus2", "HeadMount", "mainFrame"		};		setCapsValue(entityCaps, caps_showPartsHideList, (Object) s);		String[] s1 = {				"bipedHead", "bipedHeadwear", "bipedBody", "bipedRightArm", "bipedLeftArm",				"bipedRightLeg", "bipedLeftLeg", "c", "d", "e",				"f", "g", "h", "i", "j",				"k", "field_78116_c", "field_78114_d", "field_78115_e", "field_78112_f",				"field_78113_g", "field_78123_h", "field_78124_i", "field_78121_j", "field_78122_k"		};		String[] s2 = {				"Head", "Headwear", "Body", "RightArm", "LeftArm",				"RightLeg", "LeftLeg", "Head", "Headwear", "Body",				"RightArm", "LeftArm", "RightLeg", "LeftLeg", "bipedCloak",				"bipedEars", "bipedHead", "Headwear", "Body", "RightArm",				"LeftArm", "RightLeg", "LeftLeg", "bipedEars", "bipedCloak"		};		setCapsValue(entityCaps, caps_showPartsRenemeMap, s1, s2);	}	@Override	public void action1(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IModelCaps entityCaps) {		super.action1(f, f1, f2, f3, f4, f5, entityCaps);		float f6 = bipedBody.rotateAngleZ;		if (f6 > 0.0F) {			bipedHead.rotationPointY = bipedBody.rotationPointY + 0.5F - (f6 * 0.30889264F);		} else {			bipedHead.rotationPointY = bipedBody.rotationPointY + 0.5F - (f6 * 2.30889264F);		}		rightArm.rotationPointX = -5.0F;		rightArm.rotationPointY = 2.0F;		rightArm.rotationPointZ = -1.0F;		leftArm.rotationPointX = 5.0F;		leftArm.rotationPointY = 3.5F;		leftArm.rotationPointZ = -1.0F;		leftArm2.rotationPointX = 1.5F;		leftArm2.rotationPointY = 6.0F;		leftArm2.rotationPointZ = 0.0F;		rightHand.rotationPointX = 0.0F;		rightHand.rotationPointY = 3.0F;		rightHand.rotationPointZ = 0.0F;		leftHand.rotationPointX = 0.0F;		leftHand.rotationPointY = 3.0F;		leftHand.rotationPointZ = 0.0F;		rightLeg2.rotationPointX = -1.5F;		rightLeg2.rotationPointY = 5.5F;		rightLeg2.rotationPointZ = 0.0F;		leftLeg.rotationPointX = 0.5F;		leftLeg2.rotationPointX = 0.0F;		leftLeg2.rotationPointY = 5.5F;		leftLeg2.rotationPointZ = 0.0F;		Arms[0].setRotationPoint(0.0F, 0.0F, 0.0F);		Arms[1].setRotationPoint(0.0F, 0.0F, 0.0F);	}	@Override	public void action2(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IModelCaps entityCaps) {		// 手を上げるモーション		super.action2(f, f1, f2, f3, f4, f5, entityCaps);		((ModchuModel_ModelRenderer) getCapsValue(caps_bipedRightArm, entityCaps)).rotationPointX += ModchuModel_ModelCapsHelper.getCapsValueInt(this, entityCaps, caps_dominantArm) == 0 ? 2.0F : -2.0F;	}	@Override	public void action3(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IModelCaps entityCaps) {		// 手を上げて振るモーション		super.action3(f, f1, f2, f3, f4, f5, entityCaps);		((ModchuModel_ModelRenderer) getCapsValue(caps_bipedRightArm, entityCaps)).rotationPointX += ModchuModel_ModelCapsHelper.getCapsValueInt(this, entityCaps, caps_dominantArm) == 0 ? 2.0F : -2.0F;	}	@Override	public void action5(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IModelCaps entityCaps) {		// 両手を上げるモーション		super.action5(f, f1, f2, f3, f4, f5, entityCaps);		bipedRightArm.rotationPointX += 2.0F;		bipedLeftArm.rotationPointX -= 2.0F;	}	@Override	public float getyOffset() {		return getyOffset(null);	}	@Override	public float getMountedYOffset() {		return getMountedYOffset(null);	}}