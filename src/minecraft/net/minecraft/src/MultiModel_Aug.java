package net.minecraft.src;import modchu.lib.Modchu_Reflect;import modchu.model.ModchuModel_IModelCaps;import modchu.model.ModchuModel_ModelCapsHelper;import modchu.model.ModchuModel_ModelRenderer;import net.minecraft.entity.Entity;import net.minecraft.util.MathHelper;public class MultiModel_Aug extends MultiModel_SR2 {	public ModchuModel_ModelRenderer sidetailUpperR;	public ModchuModel_ModelRenderer sidetailUpperL;	public ModchuModel_ModelRenderer shaggyB;	public ModchuModel_ModelRenderer shaggyR;	public ModchuModel_ModelRenderer shaggyL;	public ModchuModel_ModelRenderer sensor1;	public ModchuModel_ModelRenderer sensor2;	public ModchuModel_ModelRenderer sensor3;	public ModchuModel_ModelRenderer sensor4;	public MultiModel_Aug() {		this(0.0F);	}	public MultiModel_Aug(float f) {		this(f, 0.0F);	}	public MultiModel_Aug(float f, float f1) {		this(f, f1 , 64, 32);	}	public MultiModel_Aug(float f, float f1, int i, int j) {		super(f, f1, i, j);	}	@Override	public void initModel(float f, float f1, boolean isAfterInit) {		super.initModel(f, f1, false);		// 再構成パーツ		SideTailR = new ModchuModel_ModelRenderer(this);		SideTailR.setTextureOffset(46, 20).addBox(-1.5F, -0.5F, -1.0F, 2, 10, 2, f);		SideTailR.setRotationPoint(-5F, -7.8F, 1.9F);		SideTailL = new ModchuModel_ModelRenderer(this);		SideTailL.setTextureOffset(54, 20).addBox(0.5F, -0.5F, -1.0F, 2, 10, 2, f);		SideTailL.setRotationPoint(4F, -7.8F, 1.9F);		// 増加パーツ		shaggyB = new ModchuModel_ModelRenderer(this, 24, 0);		shaggyB.addPlate(-5.0F, 0.0F, 0.0F, 10, 4, 4, f);		shaggyB.setRotationPoint(0.0F, -1.0F, 4.0F);		shaggyB.setRotateAngleX(0.4F);		shaggyR = new ModchuModel_ModelRenderer(this, 34, 4);		shaggyR.addPlate(0.0F, 0.0F, -5.0F, 10, 4, 1, f);		shaggyR.setRotationPoint(4.0F, -1.0F, 0.0F);		shaggyR.setRotateAngleZ(-0.4F);		shaggyL = new ModchuModel_ModelRenderer(this, 24, 4);		shaggyL.addPlate(0.0F, 0.0F, -5.0F, 10, 4, 5, f);		shaggyL.setRotationPoint(-4.0F, -1.0F, 0.0F);		shaggyL.setRotateAngleZ(0.4F);		sensor1 = new ModchuModel_ModelRenderer(this, 0, 0);		sensor1.addPlate(-8.0F, -4.0F, 0.0F, 8, 4, 0);		sensor1.setRotationPoint(0.0F, -8.0F, 0.0F);		sensor2 = new ModchuModel_ModelRenderer(this, 0, 4);		sensor2.addPlate(0.0F, -4.0F, 0.0F, 8, 4, 0);		sensor2.setRotationPoint(0.0F, -8.0F, 0.0F);		sensor3 = new ModchuModel_ModelRenderer(this, 44, 0);		sensor3.addPlate(0.0F, -7.0F, -4.0F, 4, 8, 1);		sensor3.setRotationPoint(0.0F, -8.0F, 0.0F);		sensor4 = new ModchuModel_ModelRenderer(this, 34, 0);		sensor4.addPlate(0.0F, -4.0F, -10.0F, 10, 4, 1);		sensor4.setRotationPoint(0.0F, -8.0F, 0.0F);		sidetailUpperR = new ModchuModel_ModelRenderer(this, 52, 10);		sidetailUpperR.addBox(-4.0F, 0.0F, -1.0F, 4, 3, 2);		sidetailUpperR.setRotationPoint(0.0F, 0.0F, 0.0F);		sidetailUpperL = new ModchuModel_ModelRenderer(this, 52, 15);		sidetailUpperL.addBox(0.0F, 0.0F, -1.0F, 4, 3, 2);		sidetailUpperL.setRotationPoint(0.0F, 0.0F, 0.0F);		// 未使用パーツ		//setCapsValue(caps_visible, bipedHeadwear, false);		//setCapsValue(caps_visible, Tail, false);		//setCapsValue(caps_visible, ChignonB, false);		if (isAfterInit) afterInit(f, f1);	}	@Override	public void defaultAddChildSetting() {		super.defaultAddChildSetting();		((ModchuModel_ModelRenderer) bipedHead).removeChild(bipedHeadwear);		((ModchuModel_ModelRenderer) bipedHead).removeChild(Tail);		((ModchuModel_ModelRenderer) bipedHead).removeChild(ChignonB);		if (SideTailR != null) bipedHead.addChild(SideTailR);		if (SideTailL != null) bipedHead.addChild(SideTailL);		if (shaggyB != null) bipedHead.addChild(shaggyB);		if (shaggyR != null) bipedHead.addChild(shaggyR);		if (shaggyL != null) bipedHead.addChild(shaggyL);		if (sensor1 != null) bipedHead.addChild(sensor1);		if (sensor2 != null) bipedHead.addChild(sensor2);		if (sensor3 != null) bipedHead.addChild(sensor3);		if (sensor4 != null) bipedHead.addChild(sensor4);		if (sidetailUpperR != null) bipedHead.addChild(sidetailUpperR);		if (sidetailUpperL != null) bipedHead.addChild(sidetailUpperL);	}	@Override	public void setLivingAnimationsLM(ModchuModel_IModelCaps entityCaps, float f, float f1, float renderPartialTicks)	{		super.setLivingAnimationsLM(entityCaps, f, f1, renderPartialTicks);		Object entityliving = (Entity) getCapsValue(entityCaps, entityCaps.caps_Entity);		if (entityliving != null) ;else return;		float f3 = (float)(Integer)Modchu_Reflect.getFieldObject("Entity", "field_70173_aa", "ticksExisted", entityliving) + renderPartialTicks + ModchuModel_ModelCapsHelper.getCapsValueFloat(this, caps_entityIdFactor);		float f4 = 0.0F;		if (ModchuModel_ModelCapsHelper.getCapsValueBoolean(this, entityCaps, caps_isLookSuger)) {			f3 *= 8.0F;			f4 = -0.2F;		} else {			f4 = (1F - ModchuModel_ModelCapsHelper.getCapsValueInt(this, entityCaps, caps_health ) / 20F) * 0.5F;		}		float f5 = MathHelper.sin(f3 * 0.067F) * 0.05F - f4;		float f6 = 40.0F / 57.29578F;		sensor1.setRotateAngle(f5, -f6, f5);		sensor2.setRotateAngle(-f5, f6, -f5);		sensor3.setRotateAngle(MathHelper.sin(f3 * 0.067F) * 0.05F - 1.2F - f4, MathHelper.sin(f3 * 0.09F) * 0.4F, MathHelper.cos(f3 * 0.09F) * 0.2F);		sensor4.setRotateAngle(MathHelper.sin(f3 * 0.067F) * 0.05F + f4, MathHelper.cos(f3 * 0.09F) * 0.5F, MathHelper.sin(f3 * 0.09F) * 0.2F);	}	@Override	public void setRotationAnglesLM(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IModelCaps entityCaps) {		super.setRotationAnglesLM(f, f1, f2, f3, f4, f5, entityCaps);		SideTailR.rotateAngleX = SideTailL.rotateAngleX = -bipedHead.rotateAngleX / 1.5F;		float y = -8.0F;		sensor1.rotationPointY = sensor2.rotationPointY = sensor3.rotationPointY = sensor4.rotationPointY = y;		y = -1.0F;		shaggyB.rotationPointY = shaggyR.rotationPointY = shaggyL.rotationPointY = y;	}	@Override	public void defaultPartsSettingBefore(ModchuModel_IModelCaps entityCaps) {		super.defaultPartsSettingBefore(entityCaps);		String[] s1 = {				"sidetailUpperR", "sidetailUpperL"		};		String[] s2 = {				"s_tailUR", "s_tailUL"		};		setCapsValue(entityCaps, caps_showPartsRenemeMap, s1, s2);	}}