package modchu.model;import java.util.ArrayList;import java.util.List;import java.util.concurrent.ConcurrentHashMap;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_Reflect;import modchu.model.multimodel.MultiModelAction;import modchu.model.multimodel.MultiModelBaseBiped;import modchu.model.replacepoint.ModchuModel_EntityCapsReplacePoint;import net.minecraft.entity.Entity;import net.minecraft.entity.player.EntityPlayer;public class ModchuModel_ModelDataBase extends ModchuModel_EntityCapsReplacePoint implements ModchuModel_IModelCaps {	public static int allMultiModelActionMode = 0;	public static int allMultiModelActionRequestNumber = 0;	public static final int allMultiModelActionModeMax = 2;	public static final int allMultiModelActionMax = 30;	public static boolean allMultiModelActionFlag = false;	private Object subEntityCaps;	private boolean isSitting = false;	private boolean[] actionRequest = new boolean[2];	private boolean actionFlag = false;	private boolean motionResetFlag = false;	private boolean motionSetFlag = false;	private boolean sleeping = false;	private boolean allMultiModelActionRunFlag = false;	private float actionSpeed = 0.0F;	private int skinMode = 0;	private int runActionNumber = 0;	private int actionRequestNumber = 0;	private int actionReleaseNumber = 0;	private int actionCount = 0;	private int actionTime = 0;	private int initFlag = 0;	private byte entityType = 1;	private List<String> showPartsHideList = new ArrayList();	private ConcurrentHashMap<String, String> showPartsRenemeMap = new ConcurrentHashMap();	private ConcurrentHashMap<String, Object> freeVariableMap;	private boolean allMultiModelActionRunInitFlag;	public ModchuModel_ModelDataBase() {		super();	}	@Override	public Object getCapsValue(int pIndex, Object ... pArg) {		return getCapsValue((MultiModelBaseBiped)null, pIndex, (Object[])pArg);	}	@Override	public Object getCapsValue(MultiModelBaseBiped model, ModchuModel_IModelCaps entityCaps, int pIndex, Object... pArg) {		return null;	}	@Override	public Object getCapsValue(MultiModelBaseBiped model, int pIndex, Object... pArg) {		switch (pIndex) {		case caps_EntityType:			return getEntityType();		case caps_subEntityCaps:			return getSubEntityCaps();		case caps_isSitting:			return getIsSitting();		case caps_isSleeping:			return getIsSleeping();		case caps_initFlag:			return getInitFlag();		case caps_height:			return owner.height;		case caps_width:			return owner.width;		case caps_actionRequest:			return getActionRequest();		case caps_actionRequestNumber:			return getActionRequestNumber();		case caps_runActionNumber:			return getRunActionNumber();		case caps_actionReleaseNumber:			return getActionReleaseNumber();		case caps_actionFlag:			return getActionFlag();		case caps_actionCount:			return getActionCount();		case caps_actionTime:			return getActionTime();		case caps_actionSpeed:			return getActionSpeed();		case caps_skinMode:			return getSkinMode();		case caps_motionResetFlag:			return getMotionResetFlag();		case caps_motionSetFlag:			return getMotionSetFlag();		case caps_showPartsHideList:			return getShowPartsHideList();		case caps_showPartsRenemeMap:			return getShowPartsRenemeMap();		case caps_allMultiModelActionMode:			return getAllMultiModelActionMode();		case caps_allMultiModelActionModeMax:			return getAllMultiModelActionModeMax();		case caps_allMultiModelActionRequestNumber:			return getAllMultiModelActionRequestNumber();		case caps_allMultiModelActionFlag:			return getAllMultiModelActionFlag();		case caps_allMultiModelActionMax:			return getAllMultiModelActionMax();		case caps_freeVariable:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				return getFreeVariable((String)pArg[0]);			}		}		Object o = null;		if (model != null) {			o = model.getCapsValue(pIndex, (Object[]) pArg);		}		if (o != null) return o;		if (subEntityCaps != null) {			o = Modchu_Reflect.invokeMethod(subEntityCaps.getClass(), "getCapsValue", new Class[]{ int.class, Object[].class }, subEntityCaps, new Object[]{ pIndex, pArg });			return o;		}		return super.getCapsValue(pIndex, (Object[]) pArg);	}	@Override	public Object getCapsValue(ModchuModel_IModelCaps entityCaps, int pIndex, Object... pArg) {		return null;	}	@Override	public boolean setCapsValue(int pIndex, Object... pArg) {		return setCapsValue((MultiModelBaseBiped)null, pIndex, (Object[])pArg);	}	@Override	public boolean setCapsValue(MultiModelBaseBiped model, ModchuModel_IModelCaps entityCaps, int pIndex, Object... pArg) {		return false;	}	@Override	public boolean setCapsValue(MultiModelBaseBiped model, int pIndex, Object... pArg) {		switch (pIndex) {		case caps_Entity:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				setEntity((Entity) pArg[0]);				return true;			}			return false;		case caps_subEntityCaps:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				setSubEntityCaps(pArg[0]);				return true;			}			return false;		case caps_skinMode:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				setSkinMode((Integer) pArg[0]);				return true;			}			return false;		case caps_isSitting:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				setIsSitting((Boolean) pArg[0]);				return true;			}			return false;		case caps_isSleeping:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				setIsSleeping((Boolean) pArg[0]);				return true;			}			return false;		case caps_initFlag:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				setInitFlag((Integer) pArg[0]);				return true;			}			return false;		case caps_EntityType:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				setEntityType((Byte) pArg[0]);				return true;			}			return false;		case caps_actionRequest:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				setActionRequest((boolean[]) pArg[0]);				return true;			}			return false;		case caps_freeVariable:			if (pArg != null			&& pArg.length > 1			&& pArg[0] != null			&& pArg[1] != null) {				setFreeVariable((String)pArg[0], pArg[1]);				return true;			}			return false;		case caps_actionRequestNumber:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				setActionRequestNumber((Integer) pArg[0]);				return true;			}			return false;		case caps_actionReleaseNumber:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				setActionReleaseNumber((Integer) pArg[0]);				return true;			}			return false;		case caps_actionCount:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				setActionCount((Integer) pArg[0]);				return true;			}			return false;		case caps_actionTime:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				setActionTime((Integer) pArg[0]);				return true;			}			return false;		case caps_actionFlag:			return false;		case caps_actionSpeed:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				setActionSpeed((Float) pArg[0]);				return true;			}			return false;		case caps_motionResetFlag:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				setMotionResetFlag((Boolean) pArg[0]);				return true;			}			return false;		case caps_motionSetFlag:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				setMotionSetFlag((Boolean) pArg[0]);				return true;			}			return false;		case caps_showPartsHideList:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				addShowPartsHideList((String[]) pArg[0]);				return true;			}			return false;		case caps_showPartsRenemeMap:			if (pArg != null			&& pArg.length > 1			&& pArg[0] != null			&& pArg[1] != null) {				addShowPartsRenemeMap((String[]) pArg[0], (String[]) pArg[1]);				return true;			}			return false;		case caps_actionRelease:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				actionRelease((Integer) pArg[0]);				return true;			}			return false;		case caps_setRotationAnglesBefore:			if (pArg != null			&& pArg.length > 6			&& pArg[0] != null			&& pArg[1] != null			&& pArg[2] != null			&& pArg[3] != null			&& pArg[4] != null			&& pArg[5] != null			&& pArg[6] != null) {				setRotationAnglesBefore(pArg[0], (Float) pArg[1] ,(Float) pArg[2], (Float) pArg[3], (Float) pArg[4], (Float) pArg[5], (Float) pArg[6]);				return true;			}			return false;		case caps_setRotationAnglesAfter:			if (pArg != null			&& pArg.length > 6			&& pArg[0] != null			&& pArg[1] != null			&& pArg[2] != null			&& pArg[3] != null			&& pArg[4] != null			&& pArg[5] != null			&& pArg[6] != null) {				setRotationAnglesAfter(pArg[0], (Float) pArg[1] ,(Float) pArg[2], (Float) pArg[3], (Float) pArg[4], (Float) pArg[5], (Float) pArg[6]);				return true;			}			return false;		case caps_allMultiModelActionMode:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				setAllMultiModelActionMode((Integer) pArg[0]);				return true;			}			return false;		case caps_allMultiModelActionRequestNumber:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				setAllMultiModelActionRequestNumber((Integer) pArg[0]);				return true;			}			return false;		case caps_allMultiModelActionFlag:			if (pArg != null			&& pArg.length > 0			&& pArg[0] != null) {				setAllMultiModelActionFlag((Boolean) pArg[0]);				return true;			}			return false;		}		if (subEntityCaps != null) {			return (Boolean) (Modchu_Reflect.invokeMethod(subEntityCaps.getClass(), "setCapsValue", new Class[]{ int.class, Object[].class }, subEntityCaps, new Object[]{ pIndex, pArg }));		}		return super.setCapsValue(pIndex, (Object[]) pArg);	}	@Override	public boolean setCapsValue(ModchuModel_IModelCaps entityCaps, int pIndex, Object... pArg) {		return setCapsValue(pIndex, (Object[])pArg);	}	/**	 * setRotationAnglesLM 呼び出し前に呼ばれる。	 */	protected void setRotationAnglesBefore(Object model, float f, float f1, float f2, float f3, float f4, float f5) {	}	/**	 * setRotationAnglesLM 呼び出し後に呼ばれる。	 */	protected void setRotationAnglesAfter(Object model, float f, float f1, float f2, float f3, float f4, float f5) {		if (model != null				&& model instanceof MultiModelAction) ;else {					((MultiModelBaseBiped) model).boneProcessing(f, f1, f2, f3, f4, f5, this);					//Modchu_Debug.mDebug("setRotationAnglesAfter else");					return;				}		if (getAllMultiModelActionFlag()				&& getAllMultiModelActionModeCheck()) {			//Modchu_Debug.mDebug("setRotationAnglesAfter getAllMultiModelActionRequestNumber()="+getAllMultiModelActionRequestNumber());			if (getAllMultiModelActionRequestNumber() > 0) {				if (getActionRequestNumber() != getAllMultiModelActionRequestNumber()) {					setActionRequestNumber(getAllMultiModelActionRequestNumber());				}				if (allMultiModelActionRunInitFlag) {					setActionRequest(new boolean[]{ true, true });					allMultiModelActionRunFlag = true;					allMultiModelActionRunInitFlag = false;				}			} else {				setAllMultiModelActionFlag(false);				allMultiModelActionRunInitFlag = true;				setActionRequest(new boolean[]{ true, false });				allMultiModelActionRunFlag = false;			}		} else {			if (!allMultiModelActionRunInitFlag) allMultiModelActionRunInitFlag = true;			if (allMultiModelActionRunFlag) {				setActionRequest(new boolean[]{ true, false });				allMultiModelActionRunFlag = false;			}		}		//Modchu_Debug.mDebug("setRotationAnglesAfter getActionRequest()="+getActionRequest());		int runActionNumber;		if (getActionRequest()[0]) {			runActionNumber = getRunActionNumber();			//Modchu_Debug.mDebug("setRotationAnglesAfter getActionRequest()[0]="+getActionRequest()[0]+" getActionRequest()[1]="+getActionRequest()[1]);			//Modchu_Debug.mDebug("setRotationAnglesAfter runActionNumber="+runActionNumber);			if (getActionRequest()[1]) {				//Modchu_Debug.mDebug("setRotationAnglesAfter ActionRequest action実行処理");				int actionRequestNumber = getActionRequestNumber();				//Modchu_Debug.mDebug("setRotationAnglesAfter actionRequestNumber="+actionRequestNumber);				if (actionRequestNumber > 0						&& actionRequestNumber != runActionNumber) {					//Modchu_Debug.mDebug("setRotationAnglesAfter getActionRequest()[1]="+getActionRequest()[1]+" actionRequestNumber="+actionRequestNumber);					if (!getResetActionNumberFlag()) {						setActionFlag(true);					}					setRunActionNumber(actionRequestNumber);				}			}			if (!getActionRequest()[1]) {				//Modchu_Debug.mDebug("setRotationAnglesAfter ActionRequest action解除処理");				if (!getResetActionNumberFlag()) {					setActionFlag(false);				}				if (setRunActionNumber(0)) {					setActionRequestNumber(0);				}			}			return;		}		runActionNumber = getRunActionNumber();		//Modchu_Debug.mDebug("setRotationAnglesAfter runActionNumber="+runActionNumber);		if (getActionFlag()				&& !getResetActionNumberFlag()				&& runActionNumber > 0) {			if (!getCapsValueBoolean(caps_isPlayer)) setActionReleaseNumber(runActionNumber);			float actionSpeed = ModchuModel_ModelDataMaster.instance.getActionSpeed(this);			setActionSpeed(actionSpeed);			//Modchu_Debug.mDebug("setRotationAnglesAfter actionSpeed="+actionSpeed);			Object[] model2 = getTextureDataModel();			if (model2 != null) {				for (int i = 0; i < model2.length; i++) {					if (MultiModelAction.class.isInstance(model2[i])) {						((MultiModelAction) model2[i]).action(f, f1, f2, f3, f4, f5, runActionNumber, this);					} else {						//Modchu_Debug.mDebug("setRotationAnglesAfter model2 !MultiModelAction.class.isInstance !!");					}					((MultiModelBaseBiped) model2[i]).boneProcessing(f, f1, f2, f3, f4, f5, this);				}			} else {				((MultiModelBaseBiped) model).boneProcessing(f, f1, f2, f3, f4, f5, this);			}			setActionSpeed(0.0F);		} else {			actionReleaseRun();			((MultiModelBaseBiped) model).boneProcessing(f, f1, f2, f3, f4, f5, this);		}	}	private void actionRelease(int i) {		Object[] model2 = getTextureDataModel();		if (model2 != null) {			for (int i1 = 0; i1 < model2.length; i1++) {				if (MultiModelAction.class.isInstance(model2[i1])) {					((MultiModelAction) model2[i1]).actionRelease(this, i);				} else {					Modchu_Debug.mDebug("actionRelease model2 !MultiModelAction.class.isInstance !!");				}			}		}	}	protected Object[] getTextureDataModel() {		Object entity = Modchu_Reflect.invokeMethod(subEntityCaps.getClass(), "getCapsValue", new Class[]{ int.class, Object[].class }, subEntityCaps, new Object[]{ caps_Entity, null });		if (entity != null) {			Object textureData = Modchu_Reflect.getFieldObject(entity.getClass(), "textureData", entity);			if (textureData != null) {				return (Object[]) Modchu_Reflect.getFieldObject(textureData.getClass(), "textureModel", textureData);			}		}		return null;	}	private void setEntity(Entity entity) {		Modchu_Reflect.setFieldObject(ModchuModel_ModelDataBase.class, "owner", this, entity);	}	private Object getSubEntityCaps() {		return subEntityCaps;	}	protected void setSubEntityCaps(Object entityCaps) {		subEntityCaps = entityCaps;	}	protected boolean getMotionResetFlag() {		return motionResetFlag;	}	protected void setMotionResetFlag(boolean b) {		motionResetFlag = b;	}	protected boolean getIsSitting() {		return isSitting;	}	protected void setIsSitting(boolean b) {		isSitting = b;	}	protected boolean getIsSleeping() {		return owner instanceof EntityPlayer ? ((EntityPlayer) owner).isPlayerSleeping() | sleeping : sleeping;	}	protected void setIsSleeping(boolean b) {		sleeping = b;	}	protected boolean[] getActionRequest() {		return actionRequest;	}	protected void setActionRequest(boolean[] b) {		actionRequest = b;	}	protected int getActionRequestNumber() {		return actionRequestNumber;	}	protected void setActionRequestNumber(int i) {		if (actionRequestNumber != i) {			actionRequestNumber = i;			//Modchu_Debug.mDebug("setActionRequestNumber i="+i);		} else {			//Modchu_Debug.mDebug("setActionRequestNumber else i="+i);		}	}	protected int getRunActionNumber() {		return runActionNumber;	}	protected boolean setRunActionNumber(int i) {		if (runActionNumber != i) {			actionReleaseRun();			runActionNumber = i;			setActionReleaseNumber(i);			//Modchu_Debug.mDebug("setRunActionNumber i="+i);		} else {			//Modchu_Debug.mDebug("setRunActionNumber else i="+i);		}		setActionRequest(new boolean[]{ false, false });		return true;	}	protected int getActionReleaseNumber() {		return actionReleaseNumber;	}	protected void setActionReleaseNumber(int i) {		//Modchu_Debug.mDebug("setActionReleaseNumber i="+i);		if (i != actionReleaseNumber) {			actionReleaseNumber = i;		}	}	protected boolean getResetActionNumberFlag() {		return false;	}	protected void setResetActionNumberFlag(boolean b) {	}	protected void actionReleaseRun() {		int i = getActionReleaseNumber();		actionReleaseRun(i);	}	protected void actionReleaseRun(int i) {		//Modchu_Debug.mDebug("actionReleaseRun() i="+i);		if (i > 0) {			//Modchu_Debug.mDebug("actionReleaseRun() i="+i);			setCapsValue(caps_actionRelease, i);			actionReleaseNumber = 0;		}	}	protected boolean getActionFlag() {		return actionFlag;	}	protected void setActionFlag(boolean b) {		actionFlag = b;	}	protected int getActionCount() {		return actionCount;	}	protected void setActionCount(int i) {		actionCount = i;	}	protected int getActionTime() {		return actionTime;	}	protected void setActionTime(int i) {		actionTime = i;	}	protected float getActionSpeed() {		return actionSpeed;	}	protected void setActionSpeed(float f) {		actionSpeed = f;	}	protected boolean getMotionSetFlag() {		return motionSetFlag;	}	protected void setMotionSetFlag(boolean b) {		motionSetFlag = b;	}	protected int getSkinMode() {		return skinMode;	}	protected void setSkinMode(int i) {		skinMode = i;	}	protected byte getEntityType() {		return entityType;	}	protected void setEntityType(byte b) {		entityType = b;	}	private Object getFreeVariable(String s) {		return freeVariableMap != null ? freeVariableMap.get(s) : null;	}	private void setFreeVariable(String s, Object o) {		if (freeVariableMap != null) ;else freeVariableMap = new ConcurrentHashMap();		freeVariableMap.put(s, o);	}	private int getInitFlag() {		return initFlag;	}	private void setInitFlag(int i) {		initFlag = i;	}	private boolean getAllMultiModelActionModeCheck() {		switch(getAllMultiModelActionMode()) {		case 0:			return false;		case 1:			return true;		case 2:			return getCapsValueBoolean(caps_isPlayer) ? false : true;		}		return false;	}	public static int getAllMultiModelActionRequestNumber() {		return allMultiModelActionRequestNumber;	}	public static void setAllMultiModelActionRequestNumber(int i) {		allMultiModelActionRequestNumber = i;	}	public static int getAllMultiModelActionMode() {		return allMultiModelActionMode;	}	public static int getAllMultiModelActionMax() {		return allMultiModelActionMax;	}	public static void setAllMultiModelActionModePlus() {		allMultiModelActionMode++;		if (allMultiModelActionMode > allMultiModelActionModeMax) allMultiModelActionMode = 0;		return;	}	public static void setAllMultiModelActionModeMinus() {		allMultiModelActionMode--;		if (allMultiModelActionMode < 0) allMultiModelActionMode = allMultiModelActionModeMax;		return;	}	public static void setAllMultiModelActionPlus() {		allMultiModelActionRequestNumber++;		if (allMultiModelActionRequestNumber > allMultiModelActionMax) allMultiModelActionRequestNumber = 0;		return;	}	public static void setAllMultiModelActionMinus() {		allMultiModelActionRequestNumber--;		if (allMultiModelActionRequestNumber < 0) allMultiModelActionRequestNumber = allMultiModelActionMax;		return;	}	public static void setAllMultiModelActionMode(int i) {		allMultiModelActionMode = i;		if (allMultiModelActionMode > allMultiModelActionModeMax				| allMultiModelActionMode < 0) allMultiModelActionMode = 0;		return;	}	public static int getAllMultiModelActionModeMax() {		return allMultiModelActionModeMax;	}	public static boolean getAllMultiModelActionFlag() {		return allMultiModelActionFlag;	}	public static void setAllMultiModelActionFlag(boolean b) {		allMultiModelActionFlag = b;	}	public static String getAllMultiModelActionModeName(int i) {		String s = null;		switch (i) {		case 0:			s = "false";			break;		case 1:			s = "All";			break;		case 2:			s = "PlayersOther";			break;		}		return s;	}	protected List<String> getShowPartsHideList() {		return showPartsHideList;	}	/**	 * GUI パーツ表示・非表示用 ボタン非表示リスト追加	 */	protected void addShowPartsHideList(String[] s) {		//Modchu_Debug.mDebug("addShowPartsHideList s.length="+s.length);		for(int i = 0; i < s.length; i++) {			showPartsHideList.add(s[i]);		}	}	protected ConcurrentHashMap<String, String> getShowPartsRenemeMap() {		return showPartsRenemeMap;	}	/**	 * GUI パーツ表示・非表示用 ボタン表示名リネーム用追加	 */	protected void addShowPartsRenemeMap(String[] s1, String[] s2) {		for(int i = 0; i < s1.length && i < s2.length; i++) {			showPartsRenemeMap.put(s1[i], s2[i]);		}	}	public int getCapsValueInt(int pIndex, Object ...pArg) {		Object o = getCapsValue((MultiModelBaseBiped)null, pIndex, pArg);		if (o instanceof Boolean) {			boolean b = (Boolean) o;			return b ? 2 : 1;		}		return o != null ? (Integer) o : 0;	}	public float getCapsValueFloat(int pIndex, Object ...pArg) {		Object o = getCapsValue((MultiModelBaseBiped)null, pIndex, pArg);		return o != null ? (Float) o : 0.0F;	}	public double getCapsValueDouble(int pIndex, Object ...pArg) {		Object o = getCapsValue((MultiModelBaseBiped)null, pIndex, pArg);		return o != null ? (Double) o : 0.0D;	}	public boolean getCapsValueBoolean(int pIndex, Object ...pArg) {		Object o = getCapsValue((MultiModelBaseBiped)null, pIndex, pArg);		return o != null ? (Boolean) o : false;	}	public boolean[] getCapsValueBooleanArray(int pIndex, Object ...pArg) {		Object o = getCapsValue((MultiModelBaseBiped)null, pIndex, pArg);		return o != null ? (boolean[]) o : null;	}}