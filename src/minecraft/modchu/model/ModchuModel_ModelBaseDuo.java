package modchu.model;import modchu.model.replacepoint.ModchuModel_ModelBaseDuoReplacePointV160;import net.minecraft.entity.Entity;import org.lwjgl.opengl.GL11;public class ModchuModel_ModelBaseDuo extends ModchuModel_ModelBaseDuoReplacePointV160 {	public int renderCount;	public ModchuModel_ModelBaseDuo(Object pRender) {		super(pRender);	}	@Override	public void render(Entity par1Entity, float par2, float par3, float par4, float par5, float par6, float par7) {		boolean lri = (renderCount & 0x0f) == 0;		if (modelInner != null) {			if (textureInner != null) {				if (textureInner[renderParts] != null) {					// 通常パーツ					ModchuModel_Client.setTexture(textureInner[renderParts]);					modelInner.render(entityCaps, par2, par3, par4, par5, par6, par7, isRendering);				}			} else {				// ほぼエンチャントエフェクト用				modelInner.render(entityCaps, par2, par3, par4, par5, par6, par7, isRendering);			}			if (textureInnerLight != null && renderCount == 0) {				// 発光テクスチャ表示処理				if (textureInnerLight[renderParts] != null) {					ModchuModel_Client.setTexture(textureInnerLight[renderParts]);					GL11.glEnable(GL11.GL_BLEND);					GL11.glEnable(GL11.GL_ALPHA_TEST);					GL11.glBlendFunc(GL11.GL_ONE, GL11.GL_ONE);					GL11.glDepthFunc(GL11.GL_LEQUAL);					ModchuModel_Client.setLightmapTextureCoords(0x00f000f0);//61680					if (textureLightColor == null) {						GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);					} else {						//発光色を調整						GL11.glColor4f(								textureLightColor[0],								textureLightColor[1],								textureLightColor[2],								textureLightColor[3]);					}					modelInner.render(entityCaps, par2, par3, par4, par5, par6, par7, isRendering);					ModchuModel_Client.setLightmapTextureCoords(lighting);					GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);					GL11.glDisable(GL11.GL_BLEND);					GL11.glEnable(GL11.GL_ALPHA_TEST);				}			}		}		if (modelOuter != null) {			if (textureOuter != null) {				// 通常パーツ				if (textureOuter[renderParts] != null) {					ModchuModel_Client.setTexture(textureOuter[renderParts]);					modelOuter.render(entityCaps, par2, par3, par4, par5, par6, par7, isRendering);				}			} else {				// ほぼエンチャントエフェクト用				modelOuter.render(entityCaps, par2, par3, par4, par5, par6, par7, isRendering);			}			if (textureOuterLight != null && renderCount == 0) {				// 発光テクスチャ表示処理				if (textureOuterLight[renderParts] != null) {					ModchuModel_Client.setTexture(textureOuterLight[renderParts]);					float var4 = 1.0F;					GL11.glEnable(GL11.GL_BLEND);					GL11.glEnable(GL11.GL_ALPHA_TEST);					GL11.glBlendFunc(GL11.GL_ONE, GL11.GL_ONE);					GL11.glDepthFunc(GL11.GL_LEQUAL);					ModchuModel_Client.setLightmapTextureCoords(0x00f000f0);//61680					if (textureLightColor == null) {						GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);					} else {						//発光色を調整						GL11.glColor4f(								textureLightColor[0],								textureLightColor[1],								textureLightColor[2],								textureLightColor[3]);					}					modelOuter.render(entityCaps, par2, par3, par4, par5, par6, par7, isRendering);					ModchuModel_Client.setLightmapTextureCoords(lighting);					GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);					GL11.glDisable(GL11.GL_BLEND);					GL11.glEnable(GL11.GL_ALPHA_TEST);				}			}		}//		isAlphablend = false;		renderCount++;	}}