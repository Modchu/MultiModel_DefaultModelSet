package modchu.model.multimodel;import java.util.HashMap;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_Reflect;import modchu.model.ModchuModel_IModelCaps;import modchu.model.ModchuModel_IModelCapsConstant;import modchu.model.ModchuModel_Main;import modchu.model.ModchuModel_ModelCapsHelper;import modchu.model.ModchuModel_ModelRenderer;import modchu.model.replacepoint.ModchuModel_ModelMultiReplacePoint;import net.minecraft.block.Block;import net.minecraft.block.BlockFlower;import net.minecraft.block.BlockLeaves;import net.minecraft.block.BlockPumpkin;import net.minecraft.entity.Entity;import net.minecraft.entity.player.EntityPlayer;import net.minecraft.entity.player.InventoryPlayer;import net.minecraft.item.Item;import net.minecraft.item.ItemBlock;import net.minecraft.item.ItemStack;import org.lwjgl.opengl.GL11;/** * PlayerFormLittleMaid共通クラス */public abstract class MultiModelBaseBiped extends ModchuModel_ModelMultiReplacePoint implements ModchuModel_IModelCapsConstant {	public ModchuModel_ModelRenderer bipedHead;	public ModchuModel_ModelRenderer bipedHeadwear;	public ModchuModel_ModelRenderer bipedBody;	public ModchuModel_ModelRenderer bipedRightArm;	public ModchuModel_ModelRenderer bipedLeftArm;	public ModchuModel_ModelRenderer bipedRightLeg;	public ModchuModel_ModelRenderer bipedLeftLeg;	public ModchuModel_ModelRenderer bipedEars;	public ModchuModel_ModelRenderer bipedCloak;	public ModchuModel_ModelRenderer HeadMount;	public ModchuModel_ModelRenderer HeadTop;	private int armorType = 0;	private boolean oldwalking = false;	private boolean firstPerson = false;	/**	 * コンストラクタは全て継承させること	 */	public MultiModelBaseBiped() {		this(0.0F);	}	/**	 * コンストラクタは全て継承させること	 */	public MultiModelBaseBiped(float psize) {		this(psize, 0.0F);	}	/**	 * コンストラクタは全て継承させること	 */	public MultiModelBaseBiped(float psize, float pyoffset) {		this(psize, pyoffset, 64, 32);	}	/**	 * コンストラクタは全て継承させること	 */	public MultiModelBaseBiped(float psize, float pyoffset, int par3, int par4) {		super(psize, pyoffset, par3, par4);		textureWidth = par3;		textureHeight = par4;	}	public void afterInit(float f, float f1) {		armsinit(f, f1);		defaultAddChild();	}	/**	 * 手持ちアイテム描画用パーツ初期化時に呼ばれる	 */	public void armsinit(float f, float f1) {	}	@Override	public void render(ModchuModel_IModelCaps entityCaps, float f, float f1, float ticksExisted, float pheadYaw, float pheadPitch, float f5, boolean pIsRender) {		setRotationAngles(f, f1, ticksExisted, pheadYaw, pheadPitch, f5, entityCaps);		mainFrame.render(f5, pIsRender);		if (entityCaps != null) {			/*//151delete						renderStabilizer(entity, (Map) entityCaps.getCapsValue(caps_stabiliser), f, f1, ticksExisted, pheadYaw, pheadPitch, f5);			*///151delete			//-@-151			renderStabilizer(entityCaps, f, f1, ticksExisted, pheadYaw, pheadPitch, f5);			//@-@151		}	}	@Override	public void setLivingAnimations(ModchuModel_IModelCaps entityCaps, float f, float f1, float f2) {		setCapsValue(entityCaps, caps_setLivingAnimationsBefore, this, f, f1, f2);		setLivingAnimationsLM(entityCaps, f, f1, f2);		if (ModchuModel_ModelCapsHelper.getCapsValueByte(entityCaps, entityCaps.caps_EntityType) == entityCaps.entityType_LMM) {			setLivingAnimationsAfter(entityCaps, f, f1, f2);		} else {			setCapsValue(entityCaps, caps_setLivingAnimationsAfter, this, f, f1, f2);		}	}	public void setLivingAnimationsLM(ModchuModel_IModelCaps entityCaps, float f, float f1, float f2) {	}	@Override	public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IModelCaps entityCaps) {		if (entityCaps != null) {			setCapsValue(entityCaps, caps_setRotationAnglesBefore, this, f, f1, f2, f3, f4, f5);			setRotationAnglesLM(f, f1, f2, f3, f4, f5, entityCaps);			setCapsValue(entityCaps, caps_setRotationAnglesAfter, this, f, f1, f2, f3, f4, f5);		}	}	public void setRotationAnglesLM(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IModelCaps entityCaps) {	}	public void renderEars(float par1) {	}	public void renderCloak(float par1) {	}	@Override	public void renderItems(ModchuModel_IModelCaps entityCaps) {		if (entityCaps != null) {			renderItemsLM(entityCaps);		}	}	public void renderItemsLM(ModchuModel_IModelCaps entityCaps) {		// 手持ちの表示		GL11.glPushMatrix();		// R		Arms[0].loadMatrix();		GL11.glTranslatef(0F, 0.05F, -0.05F);		Arms[0].renderItems(this, entityCaps, false, 0);		// L		Arms[1].loadMatrix();		GL11.glTranslatef(0F, 0.05F, -0.05F);		Arms[1].renderItems(this, entityCaps, false, 1);		renderItemsHead(entityCaps);		renderItemsArmorHead(entityCaps);		GL11.glPopMatrix();	}	public void renderItemsHead(ModchuModel_IModelCaps entityCaps) {		// 頭部装飾品の表示		boolean lplanter = ModchuModel_ModelCapsHelper.getCapsValueBoolean(entityCaps, caps_isPlanter);		ItemStack lis = (ItemStack) entityCaps.getCapsValue(caps_HeadMount);		int addSupport = addSupportChecks(lis);		if (ModchuModel_ModelCapsHelper.getCapsValueBoolean(entityCaps, caps_isCamouflage) || lplanter || addSupport > -1) {			float scale = 1.0F;			Object inventory = entityCaps.getCapsValue(caps_Inventory);			if (inventory != null) {				Entity pEntity = (Entity) entityCaps.getCapsValue(caps_Entity);				int slot = pEntity instanceof EntityPlayer ? 10 : 16;				ItemStack litemstack1 = (ItemStack) Modchu_Reflect.invokeMethod(InventoryPlayer.class, "func_70301_a", "getStackInSlot", new Class[]{ int.class }, inventory, new Object[]{ slot }, -1);				if (litemstack1 != null) {					Item item2 = litemstack1.getItem();					if (item2 == item2.dyePowder) {						scale = 1.0F + (0.2F * litemstack1.getItemDamage());					}				}				HeadMount.loadMatrix();				if (lplanter || (addSupport > -1 && addSupport < 3)) {					HeadTop.loadMatrix();					Modchu_Reflect.invokeMethod(ModchuModel_ModelRenderer.class, "renderItemsHead", new Class[]{ ModchuModel_ModelMultiReplacePoint.class, ModchuModel_IModelCaps.class, float.class, int.class }, HeadTop, new Object[]{ this, entityCaps, scale, addSupport });					//HeadTop.loadMatrix().renderItemsHead(this, entityCaps);				} else {					Modchu_Reflect.invokeMethod(ModchuModel_ModelRenderer.class, "renderItemsHead", new Class[]{ ModchuModel_ModelMultiReplacePoint.class, ModchuModel_IModelCaps.class, float.class, int.class }, HeadMount, new Object[]{ this, entityCaps, scale, addSupport });					//HeadMount.loadMatrix().renderItemsHead(this, entityCaps);				}			}		}	}	public void renderItemsArmorHead(ModchuModel_IModelCaps entityCaps) {		// アーマー頭部装飾品の表示		ItemStack lis = (ItemStack) getCapsValue(entityCaps, caps_currentArmor, 3);		if (lis != null) {			int addSupport = addSupportChecks(lis);			headMountRenderItems(entityCaps, lis, addSupport);		}	}	public void headMountRenderItems(ModchuModel_IModelCaps entityCaps, ItemStack litemstack, int addSupport) {		Entity pEntity = (Entity) getCapsValue(entityCaps, entityCaps.caps_Entity);		Item item = litemstack.getItem();		Block block = null;		boolean isCamouflage = false;		boolean isPlanter = false;		try {			block = Block.blocksList[item.itemID];			isCamouflage = item instanceof ItemBlock && block instanceof BlockLeaves || block instanceof BlockPumpkin;			isPlanter = block instanceof BlockFlower;		} catch (Exception e) {		}		if (isCamouflage || isPlanter || addSupport > -1) {			Object inventory = entityCaps.getCapsValue(caps_Inventory);			float scale = 1.0F;			if (inventory != null) {				int slot = pEntity instanceof EntityPlayer ? 10 : 16;				ItemStack litemstack2 = (ItemStack) Modchu_Reflect.invokeMethod(InventoryPlayer.class, "func_70301_a", "getStackInSlot", new Class[]{ int.class }, inventory, new Object[]{ slot }, -1);				HeadMount.loadMatrix();				if (litemstack2 != null) {					Item item2 = litemstack2.getItem();					if (item2 == item2.dyePowder) {						scale = 1.0F + (0.2F * litemstack2.getItemDamage());					}				}			}			GL11.glPushMatrix();			HeadMount.loadMatrix();			Modchu_Reflect.invokeMethod(ModchuModel_ModelRenderer.class, "renderItemsHead", new Class[]{ ModchuModel_ModelMultiReplacePoint.class, ModchuModel_IModelCaps.class, ItemStack.class, float.class, int.class }, HeadMount, new Object[]{ this, entityCaps, litemstack, scale, addSupport });			//HeadMount.loadMatrix().renderItemsHead(this, entityCaps);			GL11.glPopMatrix();		}	}	/**	 * PlayerFormLittleMaidで追加対応したブロック・アイテムかチェック	 * DecoBlock = 0, DecoBlockBase = 1, FavBlock = 2, Item.skull = 3,	 * BlockPumpkin = 4	 */	public int addSupportChecks(ItemStack litemstack) {		if (litemstack != null) ;		else return -1;		int flag = -1;		Item item = litemstack.getItem();		Block block = null;		try {			block = Block.blocksList[item.itemID];			if (ModchuModel_Main.isDecoBlock) {				if (Modchu_Reflect.loadClass("decoBlock").isInstance(block)) return 0;				if (Modchu_Reflect.loadClass("decoBlockBase").isInstance(block)) return 1;			}			if (ModchuModel_Main.isFavBlock					&& Modchu_Reflect.loadClass("favBlock").isInstance(block)) {				return 2;			}		} catch (Exception e) {		}//-@-132		if (item.itemID == Item.skull.itemID) return 3;//@-@132		if (item instanceof ItemBlock && block instanceof BlockPumpkin) return 4;		return flag;	}	public ModchuModel_ModelRenderer getArms(int i) {		return (ModchuModel_ModelRenderer) Arms[i];	}	public ModchuModel_ModelRenderer getHeadMount() {		return HeadMount;	}	/**	 * PlayerFormLittleMaid専用Player用処理	 * setRotationAngles 呼び出し後に通常視点時なら呼ばれる。	 * 通常視点時の手の描画位置、角度調整を入れる。	 */	public void setRotationAnglesfirstPerson(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IModelCaps entityCaps) {	}	/**	 * GUI パーツ表示・非表示 モデル初期化時とPFLM_Gui Customize Defaultボタンが押された時、	 * setPartsの前に呼ばれる。自動取得されたリストの編集など	 */	public void defaultPartsSettingBefore(ModchuModel_IModelCaps entityCaps) {	}	/**	 * GUI パーツ表示・非表示 モデル初期化時とPFLM_Gui Customize Defaultボタンが押された時、	 * setPartsの後に呼ばれる。デフォルトOFFにする設定など	 */	public void defaultPartsSettingAfter(ModchuModel_IModelCaps entityCaps) {	}	/**	 * GUI パーツ表示・非表示反映	 */	public void showModelSettingReflects(ModchuModel_IModelCaps entityCaps) {	}	@Override	public void changeModel(ModchuModel_IModelCaps entityCaps) {	}	/**	 * カラー切替時に実行されるコード	 */	public void changeColor(ModchuModel_IModelCaps entityCaps) {	}	/**	 * 各パーツのaddChild状態をリセットし、すべて再セットするコードを入れる	 * 何度も呼ばれるのでaddChildのみではなく、clearしてからのaddChildを考慮する事	 */	public void defaultAddChild() {	}	/**	 * ボーンパーツ処理	 */	public void boneProcessing(float f, float f1, float f2, float f3, float f4, float f5, ModchuModel_IModelCaps entityCaps) {	}	public float getyOffset(ModchuModel_IModelCaps pEntityCaps) {		return 1.62F;	}	public float getRidingHeight(ModchuModel_IModelCaps pEntityCaps) {		return getHeight(pEntityCaps);	}	public float getRidingWidth(ModchuModel_IModelCaps pEntityCaps) {		return getWidth(pEntityCaps);	}	public float getRidingyOffset(ModchuModel_IModelCaps pEntityCaps) {		return getyOffset(pEntityCaps);	}	/**	 * 他Mobを頭に乗せた時の他Mob基準位置調整	 */	public float getMountedYOffset(ModchuModel_IModelCaps pEntityCaps) {		return 0.75F;	}	/**	 * 座っているポーズ「乗り物に乗っていない」時の位置調整	 */	public double getSittingyOffset(ModchuModel_IModelCaps entityCaps) {		return -0.35D;	}	/**	 * isModelSize=true時に乗り物に乗っている状態でのカメラ位置調整	 */	public float ridingViewCorrection(ModchuModel_IModelCaps pEntityCaps) {		return 0.0F;	}	/**	 * デフォルトモデルスケール	 */	public float getModelScale(ModchuModel_IModelCaps pEntityCaps) {		return 0.9375F;	}	public void setArmorBipedHeadShowModel(ModchuModel_IModelCaps entityCaps, boolean b) {		setCapsValue(caps_visible, bipedHead, b);	}	public void setArmorBipedBodyShowModel(ModchuModel_IModelCaps entityCaps, boolean b) {		setCapsValue(caps_visible, bipedBody, b);	}	public void setArmorBipedRightArmShowModel(ModchuModel_IModelCaps entityCaps, boolean b) {		if (ModchuModel_ModelCapsHelper.getCapsValueBoolean(this, entityCaps, caps_actionFlag) && ModchuModel_ModelCapsHelper.getCapsValueInt(this, caps_actionRequestNumber) == 0 | ModchuModel_ModelCapsHelper.getCapsValueInt(this, caps_actionRequestNumber) == 1) {			setCapsValue(caps_visible, bipedRightArm, false);		} else setCapsValue(caps_visible, bipedRightArm, b);	}	public void setArmorBipedLeftArmShowModel(ModchuModel_IModelCaps entityCaps, boolean b) {		if (ModchuModel_ModelCapsHelper.getCapsValueBoolean(this, entityCaps, caps_actionFlag) && ModchuModel_ModelCapsHelper.getCapsValueInt(this, caps_actionRequestNumber) == 0 | ModchuModel_ModelCapsHelper.getCapsValueInt(this, caps_actionRequestNumber) == 1) {			setCapsValue(caps_visible, bipedLeftArm, false);		} else setCapsValue(caps_visible, bipedLeftArm, b);	}	public void setArmorBipedRightLegShowModel(ModchuModel_IModelCaps entityCaps, boolean b) {		if (ModchuModel_ModelCapsHelper.getCapsValueBoolean(this, entityCaps, caps_actionFlag) && ModchuModel_ModelCapsHelper.getCapsValueInt(this, caps_actionRequestNumber) == 0 | ModchuModel_ModelCapsHelper.getCapsValueInt(this, caps_actionRequestNumber) == 1) {			setCapsValue(caps_visible, bipedRightLeg, false);		} else setCapsValue(caps_visible, bipedRightLeg, b);	}	public void setArmorBipedLeftLegShowModel(ModchuModel_IModelCaps entityCaps, boolean b) {		if (ModchuModel_ModelCapsHelper.getCapsValueBoolean(this, entityCaps, caps_actionFlag) && ModchuModel_ModelCapsHelper.getCapsValueInt(this, caps_actionRequestNumber) == 0 | ModchuModel_ModelCapsHelper.getCapsValueInt(this, caps_actionRequestNumber) == 1) {			setCapsValue(caps_visible, bipedLeftLeg, false);		} else setCapsValue(caps_visible, bipedLeftLeg, b);	}	public void setArmorSkirtShowModel(ModchuModel_IModelCaps entityCaps, boolean b) {	}	@Override	public Object getCapsValue(int pIndex, Object... pArg) {		return getCapsValue((ModchuModel_IModelCaps) null, pIndex, (Object[]) pArg);	}	public Object getCapsValue(ModchuModel_IModelCaps entityCaps, int pIndex, Object... pArg) {		if (entityCaps != null) {			Object o = entityCaps instanceof ModchuModel_IModelCaps ? ((ModchuModel_IModelCaps) entityCaps).getCapsValue(this, pIndex, pArg) : entityCaps.getCapsValue(pIndex, pArg);			if (o != null) return o;		}		switch (pIndex) {		case caps_getIsSneak:			if (entityCaps != null) return getIsSneak(entityCaps);			break;		case caps_getIsRiding:			if (entityCaps != null) return getIsRiding(entityCaps);			break;		case caps_isRiding:			return isRiding;		case caps_aimedBow:			if (entityCaps != null) return getaimedBow(entityCaps);			break;		case caps_getIsWait:			if (entityCaps != null) return getIsWait(entityCaps);			break;		case caps_isSitting:			if (pArg != null && pArg.length > 0 && pArg[0] != null) return getIsSitting((ModchuModel_IModelCaps) pArg[0]);			break;		case caps_getIsSleeping:			if (entityCaps != null) return getIsSleeping(entityCaps);			break;		case caps_firstPerson:			return getFirstPerson();		case caps_armorType:			return getArmorType();		case caps_oldwalking:			return getOldwalking();		case caps_isItemHolder:			if (entityCaps != null) return isItemHolder(entityCaps);			break;		case caps_bipedHead:			if (pArg != null && pArg.length > 0 && pArg[0] != null) return getBipedHead((ModchuModel_IModelCaps) pArg[0]);			break;		case caps_bipedRightArm:			if (pArg != null && pArg.length > 0 && pArg[0] != null) return getBipedRightArm((ModchuModel_IModelCaps) pArg[0]);			break;		case caps_notDominantArm:			if (pArg != null && pArg.length > 0 && pArg[0] != null) return getNotDominantArm((ModchuModel_IModelCaps) pArg[0]);			break;		case caps_Physical_Hammer:			if (pArg != null && pArg.length > 0 && pArg[0] != null) return Physical_Hammer((ModchuModel_IModelCaps) pArg[0]);			break;		case caps_height:			if (entityCaps != null) return getHeight(entityCaps);			break;		case caps_width:			if (entityCaps != null) return getWidth(entityCaps);			break;		case caps_YOffset:			if (entityCaps != null) return getyOffset(entityCaps);			break;		case caps_convertDegtoRad:			if (pArg != null && pArg.length > 0 && pArg[0] != null) return convertDegtoRad((Float) pArg[0]);			break;		case caps_modchuRemodelingModel:			return getModchuRemodelingModel();		case caps_sittingyOffset:			if (entityCaps != null) return getSittingyOffset(entityCaps);			break;		case caps_texture:			if (pArg != null && pArg.length > 1 && pArg[0] != null && pArg[1] != null) return getTexture((String) pArg[0], (Integer) pArg[1]);			break;		//entityCaps相当機能が無いLMM対策		case caps_maidColor:			return getMaidColor((ModchuModel_IModelCaps) pArg[0]);		}		return super.getCapsValue(pIndex, pArg);	}	@Override	public boolean setCapsValue(int pIndex, Object... pArg) {		return setCapsValue((ModchuModel_IModelCaps) null, pIndex, (Object[]) pArg);	}	public boolean setCapsValue(ModchuModel_IModelCaps entityCaps, int pIndex, Object... pArg) {		switch (pIndex) {		case caps_isRiding:			if (pArg != null && pArg.length > 0 && pArg[0] != null) {				setIsRiding((Boolean) pArg[0]);				return true;			}			return false;		case caps_isSneak:			if (pArg != null && pArg.length > 0 && pArg[0] != null) {				setIsSneak((Boolean) pArg[0]);				return true;			}			return false;		case caps_oldwalking:			if (pArg != null && pArg.length > 0 && pArg[0] != null) {				setOldwalking((Boolean) pArg[0]);				return true;			}			return false;		case caps_firstPerson:			if (pArg != null && pArg.length > 0 && pArg[0] != null) {				setFirstPerson((Boolean) pArg[0]);				return true;			}			return false;		case caps_armorType:			if (pArg != null && pArg[0] != null) {				setArmorType((Integer) pArg[0]);				return true;			}			return false;		case caps_renderFirstPersonHand:			if (pArg != null && pArg.length > 0 && pArg[0] != null) {				renderFirstPersonHand(entityCaps, (Float) pArg[0]);				return true;			}			return false;		case caps_visible:			if (pArg != null && pArg.length > 1 && pArg[0] != null && pArg[1] != null) {				if (pArg.length > 2 && pArg[2] != null) {					setVisible((ModchuModel_ModelRenderer) pArg[0], (Boolean) pArg[1], (Boolean) pArg[2]);					return true;				}				setVisible((ModchuModel_ModelRenderer) pArg[0], (Boolean) pArg[1]);				return true;			}			return false;		case caps_aimedBow:			if (pArg != null && pArg.length > 0 && pArg[0] != null) {				setAimedBow((Boolean) pArg[0]);				return true;			}			return false;		case caps_modchuRemodelingModel:			if (pArg != null && pArg.length > 0 && pArg[0] != null) {				setModchuRemodelingModel((Boolean) pArg[0]);				return true;			}			return false;		}		boolean b = super.setCapsValue(pIndex, pArg);		if (b) return true;		//Modchu_Debug.mDebug("entityCaps pIndex="+pIndex+" 0x0264="+0x0264);		if (entityCaps != null) return entityCaps.setCapsValue(pIndex, pArg);		return false;	}	private int getMaidColor(ModchuModel_IModelCaps entityCaps) {		Object entityliving = (Entity) getCapsValue(entityCaps, entityCaps.caps_Entity);		//Modchu_Debug.mDebug("getMaidColor entityliving != null?"+(entityliving != null));		Object o = null;		if (entityCaps != null) o = entityCaps.getCapsValue(caps_maidColor);		if (o != null) return (Integer) o;		if (ModchuModel_ModelCapsHelper.getCapsValueByte(entityCaps, entityCaps.caps_EntityType) == entityCaps.entityType_LMM) {			o = (Integer) Modchu_Reflect.getFieldObject("LMM_EntityLittleMaid", "maidColor", entityliving);			if (o != null) return (Integer) o;		}		return 0;	}	private Object getTexture(String s, int i) {		return ModchuModel_Main.textureManagerGetTexture(s, i);	}	private boolean getIsRiding(ModchuModel_IModelCaps entityCaps) {		return isRiding && !getRidingBan(entityCaps);	}	private void setIsRiding(boolean b) {		isRiding = b;	}	private boolean getIsSneak(ModchuModel_IModelCaps entityCaps) {		return isSneak && !getSneakBan(entityCaps);	}	private void setIsSneak(boolean b) {		isSneak = b;	}	private boolean getIsSleeping(ModchuModel_IModelCaps entityCaps) {		return ModchuModel_ModelCapsHelper.getCapsValueBoolean(this, entityCaps, caps_isSleeping) && !getSleepingBan(entityCaps);	}	private boolean getaimedBow(ModchuModel_IModelCaps entityCaps) {		return aimedBow && !getAimedBowBan(entityCaps);	}	private boolean getIsWait(ModchuModel_IModelCaps entityCaps) {		//if (!ModchuModel_ModelCapsHelper.getCapsValueBoolean(entityCaps, caps_isPlayer)) {			//Modchu_Debug.mDebug("getIsWait caps_isWait="+(ModchuModel_ModelCapsHelper.getCapsValueBoolean(this, caps_isWait)));			//Modchu_Debug.mDebug("getIsWait getWaitBan="+(getWaitBan(entityCaps)));		//}		return ModchuModel_ModelCapsHelper.getCapsValueBoolean(this, caps_isWait) && !getWaitBan(entityCaps);	}	private boolean getIsSitting(ModchuModel_IModelCaps entityCaps) {		if (entityCaps != null) return (Boolean) entityCaps.getCapsValue(caps_isSitting) && !getSittingBan(entityCaps);		return false;	}	private boolean getFirstPerson() {		return firstPerson;	}	private void setFirstPerson(boolean b) {		firstPerson = b;	}	private boolean getOldwalking() {		return oldwalking;	}	private void setOldwalking(boolean b) {		oldwalking = b;	}	private int getArmorType() {		return armorType;	}	private void setArmorType(int i) {		armorType = i;	}	private boolean getSneakBan(ModchuModel_IModelCaps entityCaps) {		return ModchuModel_ModelCapsHelper.getCapsValueBoolean(entityCaps, caps_freeVariable, "sneakBan");	}	private boolean getAimedBowBan(ModchuModel_IModelCaps entityCaps) {		return ModchuModel_ModelCapsHelper.getCapsValueBoolean(entityCaps, caps_freeVariable, "aimedBowBan");	}	private boolean getWaitBan(ModchuModel_IModelCaps entityCaps) {		return ModchuModel_ModelCapsHelper.getCapsValueBoolean(entityCaps, caps_freeVariable, "waitBan");	}	private boolean getSittingBan(ModchuModel_IModelCaps entityCaps) {		return ModchuModel_ModelCapsHelper.getCapsValueBoolean(entityCaps, caps_freeVariable, "sittingBan");	}	private boolean getSleepingBan(ModchuModel_IModelCaps entityCaps) {		return ModchuModel_ModelCapsHelper.getCapsValueBoolean(entityCaps, caps_freeVariable, "sleepingBan");	}	private boolean getRidingBan(ModchuModel_IModelCaps entityCaps) {		return ModchuModel_ModelCapsHelper.getCapsValueBoolean(entityCaps, caps_freeVariable, "ridingBan");	}	private void setAimedBowBan(ModchuModel_IModelCaps entityCaps, boolean b) {		entityCaps.setCapsValue(caps_freeVariable, "aimedBowBan", b);	}	private void setSneakBan(ModchuModel_IModelCaps entityCaps, boolean b) {		entityCaps.setCapsValue(caps_freeVariable, "sneakBan", b);	}	private void setWaitBan(ModchuModel_IModelCaps entityCaps, boolean b) {		entityCaps.setCapsValue(caps_freeVariable, "waitBan", b);	}	private void setSittingBan(ModchuModel_IModelCaps entityCaps, boolean b) {		entityCaps.setCapsValue(caps_freeVariable, "sittingBan", b);	}	private void setSleepingBan(ModchuModel_IModelCaps entityCaps, boolean b) {		entityCaps.setCapsValue(caps_freeVariable, "sleepingBan", b);	}	private void setRidingBan(ModchuModel_IModelCaps entityCaps, boolean b) {		entityCaps.setCapsValue(caps_freeVariable, "ridingBan", b);	}	private boolean getAimedBow() {		return aimedBow;	}	private void setAimedBow(boolean b) {		aimedBow = b;	}	private void setVisible(ModchuModel_ModelRenderer renderer, boolean b) {		setVisible(renderer, b, false);	}	private void setVisible(ModchuModel_ModelRenderer renderer, boolean b, boolean b1) {		if (renderer != null && renderer.showModel != b) ;		else return;		if (!b1) {			HashMap<String, Boolean> partsShowMap = (HashMap<String, Boolean>) getCapsValue(caps_showPartsMap, armorType);			if (partsShowMap != null) {				String s = (String) getCapsValue(caps_modelRendererName, renderer, armorType);				if (s != null && partsShowMap.containsKey(s)) {					return;				}			}		}		renderer.setVisible(b);	}	private float convertDegtoRad(float deg) {		return deg / 180F * (float) Math.PI;	}	private boolean getModchuRemodelingModel() {		return ModchuModel_Main.modchuRemodelingModel;	}	private void setModchuRemodelingModel(boolean b) {		ModchuModel_Main.modchuRemodelingModel = b;	}	public float Physical_Hammer(ModchuModel_IModelCaps entityCaps) {		return (Float) Modchu_Reflect.getFieldObject("mod_PFLM_PlayerFormLittleMaid", "Physical_Hammer");	}	public ModchuModel_ModelRenderer getBipedHead(ModchuModel_IModelCaps entityCaps) {		return bipedHead;	}	public ModchuModel_ModelRenderer getBipedRightArm(ModchuModel_IModelCaps entityCaps) {		if (ModchuModel_ModelCapsHelper.getCapsValueInt(entityCaps, caps_dominantArm, getCapsValue(caps_armorType)) == 0) return bipedRightArm;		return bipedLeftArm;	}	public ModchuModel_ModelRenderer getNotDominantArm(ModchuModel_IModelCaps entityCaps) {		if (ModchuModel_ModelCapsHelper.getCapsValueInt(entityCaps, caps_dominantArm, getCapsValue(caps_armorType)) == 0) return bipedLeftArm;		return bipedRightArm;	}	@Override	public void renderFirstPersonHand(ModchuModel_IModelCaps entityCaps) {		renderFirstPersonHand(entityCaps, 0.0625F);	}	public void renderFirstPersonHand(ModchuModel_IModelCaps entityCaps, float f) {		((ModchuModel_ModelRenderer) getCapsValue(caps_bipedRightArm, entityCaps)).render(f);	}	@Override	public int showArmorParts(int parts, int index) {		return showArmorParts(null, parts, index);	}	public abstract int showArmorParts(ModchuModel_IModelCaps entityCaps, int parts, int index);	// 以下、LMM_EntityCaps側にあってほしいもの	/**	 * LMM専用処理	 * setLivingAnimations 呼び出し後に呼ばれる。	 */	public void setLivingAnimationsAfter(ModchuModel_IModelCaps entityCaps, float f, float f1, float f2) {		if (bipedHead != null && entityCaps != null) {			float angle = ModchuModel_ModelCapsHelper.getCapsValueFloat(this, entityCaps, caps_interestedAngle, f2);			bipedHead.rotateAngleZ = angle;		}	}}