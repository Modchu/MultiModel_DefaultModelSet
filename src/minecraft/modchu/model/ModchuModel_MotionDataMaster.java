package modchu.model;import java.io.BufferedReader;import java.io.File;import java.io.FileInputStream;import java.io.InputStreamReader;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import modchu.lib.Modchu_Config;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_Main;public class ModchuModel_MotionDataMaster {	public static HashMap<Integer, ModchuModel_MotionData> motionDataMap;	private static List<File> motionList = new ArrayList<File>();	private static int tempI = 0;	private static boolean debug = false;	public static ModchuModel_MotionData loadMotionData(int i) {		if (debug) Modchu_Debug.mDebug("Modchu_Config loadMotionData");		if (motionDataMap != null) ;else motionDataMap = new HashMap();		if (motionDataMap.containsKey(i)) {			if (debug) Modchu_Debug.mDebug("Modchu_Config containsKey return.");			return motionDataMap.get(i);		}		ModchuModel_MotionData motionData = new ModchuModel_MotionData();		BufferedReader breader = null;		File file = null;		tempI = 0;		if (motionList.isEmpty()) loadMotionFileInit();		try {			file = motionList.get(i);			if (debug) Modchu_Debug.mDebug("Modchu_Config file="+file);			if (file != null) {				breader = new BufferedReader(new InputStreamReader(new FileInputStream(file), "Shift_JIS"));				String rl;				boolean initFrameCheck = false;				String[] s0 = null;				for (int i1 = 0; (rl = breader.readLine()) != null ; i1++) {					if (debug) Modchu_Debug.mDebug("Modchu_Config rl="+rl);					if (motionStringFrameCheck(rl)) {						if (!initFrameCheck) {							if (debug) Modchu_Debug.mDebug("Modchu_Config setMotionDataFrame rl="+rl);							motionData = setMotionDataFrame(motionData, rl);							initFrameCheck = true;						} else {							if (debug) Modchu_Debug.mDebug("Modchu_Config addMotionData initFrameCheck motion data end break. rl="+rl);							break;						}					}					if (motionStringCheck(rl)) {						if (debug) Modchu_Debug.mDebug("Modchu_Config addMotionData rl="+rl);						s0 = addMotionData(motionData, rl, s0);					}				}				motionData.setMaxMotionFrame(tempI);			}		} catch (Exception e) {			if (debug) Modchu_Debug.lDebug("Modchu_Config", "loadMotionFile load fail. file ="+(file != null ? file.toString() : null)+" i="+i, 2, e);			e.printStackTrace();		} finally {			try {				if (breader != null) breader.close();			} catch (Exception e) {			}		}		motionDataMap.put(i, motionData);		return motionData;	}	public static void loadMotionFileInit() {		File cfgdir = new File(Modchu_Main.getMinecraftDir(), "/Motion/");		//Modchu_Debug.lDebug("loadMotionFileInit() cfgdir.getAbsolutePath()="+cfgdir.getAbsolutePath());		motionList = Modchu_Config.listFiles(cfgdir.getAbsolutePath(), "*.csv");		//Modchu_Debug.lDebug("loadMotionFileInit() motionList.size()="+motionList.size());		//Modchu_Debug.lDebug("loadMotionFileInit() motionList.get(0)="+motionList.get(0));	}	private static boolean motionStringCheck(String s) {		if (s != null) ;else  return false;		//int cnt = rl.replaceAll("[^,]", "").length();		return s.replaceAll("[^,]", "").length() > 7;	}	private static boolean motionStringFrameCheck(String s) {		if (s != null) ;else  return false;		return s.indexOf(",") < 0				&& Modchu_Main.integerCheck(s) ? true : false;	}	private static String[] addMotionData(ModchuModel_MotionData motionData, String s, String[] tempData) {		int i = 0;		i = s.indexOf(",");		if (i < 0) {			if (debug) Modchu_Debug.mDebug("Modchu_Config addMotionData 1 error s="+s);			return null;		}		String[] s0 = s.split(",");		String s1 = null;		s1 = s0[0];		if (debug) Modchu_Debug.mDebug("Modchu_Config addMotionData 1 s1="+s1);		if (s1 != null) ;else return null;		motionData.addNameList(s1);		motionData.addNameArrayList(s1);		motionData.putFrameStringMap(s1);		List list = motionData.getFrameStringList(s1);		float[] dataF = new float[s0.length];		String s2 = null;		if (s0.length < 2) {			if (debug) Modchu_Debug.mDebug("Modchu_Config addMotionData 2 error s0.length="+s0.length);			return null;		}		for (int i2 = 0; i2 < s0.length - 1; i2++) {			s2 = s0[i2 + 1];			dataF[i2] = Modchu_Main.floatCheck(s2) ? Float.valueOf(s2) : 0.0F;		}		if (debug) {			String debaS = "";			for (int i2 = 0; i2 < dataF.length; i2++) {				debaS = debaS.concat(","+dataF[i2]);			}			Modchu_Debug.mDebug("Modchu_Config addMotionData 2 i1"+debaS);		}		int frame = (int)dataF[0];		completionMotionData(motionData, s0, dataF, tempData);		motionData.putDataList(s1 + "," + frame, dataF);		if (debug) Modchu_Debug.mDebug("Modchu_Config addMotionData putDataList="+(s1 + "," + frame));		list.add(frame);		if (frame > tempI) tempI = frame;		motionData.putFrameStringMap(s1, list);		if (debug) Modchu_Debug.mDebug("Modchu_Config addMotionData end frame="+frame);		return s0;	}	private static ModchuModel_MotionData setMotionDataFrame(ModchuModel_MotionData motionData, String s) {		motionData.setFrame(Integer.valueOf(s));		return motionData;	}	private static void completionMotionData(ModchuModel_MotionData motionData, String[] s0, float[] tempDataF, String[] tempData) {		if (tempData != null				&& tempData[0].equals(s0[0])				&& s0.length > 8) ;else {					if (debug) {						if (tempData != null) Modchu_Debug.mDebug("Modchu_Config completionMotionData 1 else return. tempData[0]="+tempData[0]);						else Modchu_Debug.mDebug("Modchu_Config completionMotionData 1 else return. tempData[0] = null !!");						if (s0 != null) {							Modchu_Debug.mDebug("Modchu_Config completionMotionData 1 else return. s0[0]="+s0[0]);							Modchu_Debug.mDebug("Modchu_Config completionMotionData 1 else return. s0.length="+s0.length);						} else {							Modchu_Debug.mDebug("Modchu_Config completionMotionData 1 else return. s0 == null !!");						}					}					return;				}		int frame = (int)tempDataF[0];		int tempFrame = Integer.valueOf(tempData[1]);		if (tempFrame + 1 < frame) ;else {			if (debug) Modchu_Debug.mDebug("Modchu_Config completionMotionData 1 frame else return. tempFrame="+tempFrame+" frame="+frame);			return;		}		if (debug) Modchu_Debug.mDebug("Modchu_Config completionMotionData 1");		List list = motionData.getFrameStringList(s0[0]);		String s;		String s1;		float[] dataF = new float[s0.length];		float f1;		float f2;		int frameDifference = frame - tempFrame;		if (debug) Modchu_Debug.mDebug("Modchu_Config completionMotionData frameDifference="+frameDifference);		int i = tempFrame;		for (int i4 = frameDifference - 1; i4 > 0; i4--) {			i++;			for (int i3 = 2; i3 < s0.length - 1; i3++) {				s = s0[i3];				s1 = tempData[i3];				f1 = Modchu_Main.floatCheck(s) ? Float.valueOf(s) : 0.0F;				f2 = Modchu_Main.floatCheck(s1) ? Float.valueOf(s1) : 0.0F;				dataF[i3] = f1 - ((f1- f2) / ((float)frameDifference / (float)i4));				if (debug) Modchu_Debug.mDebug("Modchu_Config completionMotionData 2 f1="+f1+" ~ f2="+f2+" i2["+i3+"]="+dataF[i3]);			}			motionData.putDataList(s0[0] + "," + i, dataF);			if (debug) Modchu_Debug.mDebug("Modchu_Config completionMotionData putDataList="+(s0[0] + "," + i));			list.add(i);		}		motionData.putFrameStringMap(s0[0], list);	}}